{
    "version": "https://jsonfeed.org/version/1",
    "title": "我在人间贩卖黄昏，只为收集世间温柔遇见你.",
    "subtitle": "有幸来到人间的旅人",
    "icon": "https://flechazoclf.github.io/FlechazoCLF.github.io/images/favicon.ico",
    "description": "我在人间贩卖星光",
    "home_page_url": "https://FlechazoCLF.github.io/FlechazoCLF.github.io",
    "items": [
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7cac95ec.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7cac95ec.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（4）编译",
            "date_published": "2024-05-23T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h1 id=\"小柴带你学autosar系列一-基础知识篇4编译\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇4编译\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（4）编译</h1>\n<blockquote>\n<p>编译真的很重要！了解一下机器是如何工作的吧。当然啦！通过学习这篇文章还可以学习制作库文件哦！隐藏你的源码，依然可以调用函数。这样代码发给别人就不怕源码暴漏哦！🍔</p>\n</blockquote>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601175457674.png\" alt=\"image-20240601175457674\"></p>\n<h1 id=\"gcc编译\"><a class=\"anchor\" href=\"#gcc编译\">#</a> GCC 编译</h1>\n<p>GCC 编译器是一个开源的编译器套件，用于编译多种编程语言，包括 C、C++、Objective-C、Fortran、Ada 等。它是一个功能强大且灵活的编译器，支持多种平台和架构。</p>\n<h2 id=\"1-预处理阶段preprocessing\"><a class=\"anchor\" href=\"#1-预处理阶段preprocessing\">#</a> 1. 预处理阶段（Preprocessing）</h2>\n<p>在预处理阶段，GCC 将源代码中的预处理指令（以  <code>#</code>  开头的指令，如  <code>#include</code> 、 <code>#define</code> ）处理成纯 C 代码。预处理器会将头文件包含到源文件中，执行宏替换等操作。</p>\n<p><strong>生成的文件</strong>：通常，预处理后的文件会以  <code>.i</code>  扩展名保存，如  <code>source.i</code> 。</p>\n<h2 id=\"2-编译阶段compilation\"><a class=\"anchor\" href=\"#2-编译阶段compilation\">#</a> 2. 编译阶段（Compilation）</h2>\n<p>编译阶段将预处理后的源文件翻译成汇编语言。GCC 使用的是内置的 C 编译器（称为  <code>cc1</code> ），它将 C 代码转换成目标机器的汇编代码。</p>\n<p><strong>生成的文件</strong>：通常，编译后的文件会以  <code>.s</code>  扩展名保存，如  <code>source.s</code> 。</p>\n<h2 id=\"3-汇编阶段assembly\"><a class=\"anchor\" href=\"#3-汇编阶段assembly\">#</a> 3. 汇编阶段（Assembly）</h2>\n<p>在汇编阶段，汇编器将汇编代码转换成机器码指令，生成目标文件。这些目标文件包含了二进制代码和相关的元数据。</p>\n<p><strong>生成的文件</strong>：通常，汇编后的文件会以  <code>.o</code>  扩展名保存，如  <code>source.o</code> 。</p>\n<h2 id=\"4-链接阶段linking\"><a class=\"anchor\" href=\"#4-链接阶段linking\">#</a> 4. 链接阶段（Linking）</h2>\n<p>链接阶段将所有的目标文件（包括程序的主文件和所有的库文件）链接在一起，生成最终的可执行文件。链接器（ld）负责解析符号引用、符号重定位等任务，将各个目标文件中的代码和数据段组合成一个可执行文件。</p>\n<p><strong>生成的文件</strong>：最终生成的可执行文件通常没有扩展名，如  <code>a.out</code> 。</p>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>假设有一个 C 源文件  <code>hello.c</code> ：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>通过 GCC 编译该文件时，可以执行以下命令：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token operator\">-</span>o hello hello<span class=\"token punctuation\">.</span>c</pre></td></tr></tbody></table></figure><p>这个命令会依次执行预处理、编译、汇编和链接四个阶段，并生成最终的可执行文件  <code>hello</code> 。</p>\n<ul>\n<li><code>hello.i</code> ：预处理后的文件。</li>\n<li><code>hello.s</code> ：编译后的汇编文件。</li>\n<li><code>hello.o</code> ：汇编后的目标文件。</li>\n<li><code>hello</code> ：最终的可执行文件。</li>\n</ul>\n<p>这就是 GCC 编译器的工作过程以及每个阶段生成的文件。</p>\n<h1 id=\"ghs编译\"><a class=\"anchor\" href=\"#ghs编译\">#</a> GHS 编译</h1>\n<p>RH850 是一种用于嵌入式系统的微控制器（MCU），通常用 Green Hills Software（GHS）编译工具进行编译和链接。GHS 工具链包含编译器、汇编器、链接器等，支持各种目标平台和架构。编译过程包括使用链接脚本，这是生成嵌入式系统二进制文件的关键步骤。下面是一个典型的 RH850 使用 GHS 编译器的编译过程，详细介绍了每个阶段及其生成的文件，特别是链接器脚本的作用。</p>\n<h2 id=\"1-源代码准备\"><a class=\"anchor\" href=\"#1-源代码准备\">#</a> 1. 源代码准备</h2>\n<p>假设有一个简单的 C 源文件  <code>main.c</code> ：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, RH850!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"2-预处理阶段\"><a class=\"anchor\" href=\"#2-预处理阶段\">#</a> 2. 预处理阶段</h2>\n<p>预处理器将处理所有的预处理指令，例如  <code>#include</code>  和  <code>#define</code> ，生成一个预处理后的文件。</p>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>ccrh850 <span class=\"token operator\">-</span>E main<span class=\"token punctuation\">.</span>c <span class=\"token operator\">-</span>o main<span class=\"token punctuation\">.</span>i</pre></td></tr></tbody></table></figure><p><strong>生成的文件</strong>：</p>\n<ul>\n<li><code>main.i</code> ：预处理后的文件。</li>\n</ul>\n<h2 id=\"3-编译阶段\"><a class=\"anchor\" href=\"#3-编译阶段\">#</a> 3. 编译阶段</h2>\n<p>编译器将预处理后的 C 代码转换为汇编代码。</p>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>ccrh850 <span class=\"token operator\">-</span>S main<span class=\"token punctuation\">.</span>i <span class=\"token operator\">-</span>o main<span class=\"token punctuation\">.</span>s</pre></td></tr></tbody></table></figure><p><strong>生成的文件</strong>：</p>\n<ul>\n<li><code>main.s</code> ：汇编代码文件。</li>\n</ul>\n<h2 id=\"4-汇编阶段\"><a class=\"anchor\" href=\"#4-汇编阶段\">#</a> 4. 汇编阶段</h2>\n<p>汇编器将汇编代码转换为机器代码，生成目标文件。</p>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>asrh850 main<span class=\"token punctuation\">.</span>s <span class=\"token operator\">-</span>o main<span class=\"token punctuation\">.</span>o</pre></td></tr></tbody></table></figure><p><strong>生成的文件</strong>：</p>\n<ul>\n<li><code>main.o</code> ：目标文件（对象文件）。</li>\n</ul>\n<h2 id=\"5-链接阶段\"><a class=\"anchor\" href=\"#5-链接阶段\">#</a> 5. 链接阶段</h2>\n<p>链接器将多个目标文件和库文件链接在一起，生成可执行文件。链接器脚本在这个阶段非常重要，用于指定代码和数据段在内存中的布局。</p>\n<p><strong>链接器脚本（linker script）</strong></p>\n<p>一个典型的链接器脚本可能如下所示（ <code>linker.ld</code> ）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>SECTIONS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span>text <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span>data <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span>bss <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>bss<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>这个脚本指定了  <code>.text</code>  段（代码段）、 <code>.data</code>  段（数据段）和  <code>.bss</code>  段（未初始化数据段）的布局。</p>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>librh850 main<span class=\"token punctuation\">.</span>o <span class=\"token operator\">-</span>T linker<span class=\"token punctuation\">.</span>ld <span class=\"token operator\">-</span>o main<span class=\"token punctuation\">.</span>elf</pre></td></tr></tbody></table></figure><p><strong>生成的文件</strong>：</p>\n<ul>\n<li><code>main.elf</code> ：最终的可执行文件（ELF 格式）。</li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li>\n<p>预处理：</p>\n<pre><code>ccrh850 -E main.c -o main.i\n</code></pre>\n<ul>\n<li>生成预处理后的文件  <code>main.i</code> 。</li>\n</ul>\n</li>\n<li>\n<p>编译：</p>\n<pre><code>ccrh850 -S main.i -o main.s\n</code></pre>\n<ul>\n<li>生成汇编代码文件  <code>main.s</code> 。</li>\n</ul>\n</li>\n<li>\n<p>汇编：</p>\n<pre><code>asrh850 main.s -o main.o\n</code></pre>\n<ul>\n<li>生成目标文件  <code>main.o</code> 。</li>\n</ul>\n</li>\n<li>\n<p>链接：</p>\n<pre><code>librh850 main.o -T linker.ld -o main.elf\n</code></pre>\n<ul>\n<li>生成最终的可执行文件  <code>main.elf</code> ，使用链接器脚本  <code>linker.ld</code>  指定内存布局。</li>\n</ul>\n</li>\n</ul>\n<p>每个阶段都生成特定的中间文件和最终的可执行文件，链接器脚本在链接阶段至关重要，它定义了程序的内存布局，使得生成的二进制文件能够正确地运行在目标硬件上。</p>\n<h1 id=\"静态库lib\"><a class=\"anchor\" href=\"#静态库lib\">#</a> 静态库.lib</h1>\n<p>通过静态库，开发者可以隐藏实现细节，仅暴露接口（头文件）。这增加了代码的安全性，并使得接口的更改不会影响到使用该库的代码，只要接口保持不变。</p>\n<p>真的太好玩啦！</p>\n<h2 id=\"1制作静态库\"><a class=\"anchor\" href=\"#1制作静态库\">#</a> 1. 制作静态库</h2>\n<ul>\n<li>\n<p>VS 创建一个新项目</p>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180016291.png\" alt=\"image-20240601180016291\"></p>\n</li>\n<li>\n<p>打印一些信息，并在头文件声明这个函数</p>\n</li>\n</ul>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180221362.png\" alt=\"image-20240601180221362\"></p>\n<ul>\n<li>生成 lib</li>\n</ul>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180400338.png\" alt=\"image-20240601180400338\"></p>\n<p>看到他啦</p>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180440718.png\" alt=\"image-20240601180440718\"></p>\n<h2 id=\"2使用静态库\"><a class=\"anchor\" href=\"#2使用静态库\">#</a> 2. 使用静态库</h2>\n<h3 id=\"1-创建或打开你的c项目\"><a class=\"anchor\" href=\"#1-创建或打开你的c项目\">#</a> 1. 创建或打开你的 C 项目</h3>\n<p>首先，确保你已经在 Visual Studio 中创建了一个 C 项目或打开了现有的 C 项目。</p>\n<h3 id=\"2-将静态库文件添加到项目\"><a class=\"anchor\" href=\"#2-将静态库文件添加到项目\">#</a> 2. 将静态库文件添加到项目</h3>\n<p>假设你的静态库文件是  <code>StaticLib1.lib</code> 。</p>\n<ol>\n<li>将  <code>StaticLib1.lib</code>  文件拷贝到你的项目目录中，通常放在一个特定的文件夹中，比如  <code>libs</code>  文件夹。我懒哈哈！随便放啦</li>\n</ol>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180639255.png\" alt=\"image-20240601180639255\"></p>\n<h3 id=\"3-添加库文件路径和库文件名到项目设置\"><a class=\"anchor\" href=\"#3-添加库文件路径和库文件名到项目设置\">#</a> 3. 添加库文件路径和库文件名到项目设置</h3>\n<ol>\n<li><strong>打开项目属性</strong>：\n<ul>\n<li>在解决方案资源管理器中，右键点击你的项目名称，选择 “属性”（ <code>Properties</code> ）。</li>\n</ul>\n</li>\n<li><strong>配置包含目录</strong>：\n<ul>\n<li>在项目属性窗口中，导航到  <code>Configuration Properties -&gt; C/C++ -&gt; General</code> 。</li>\n<li>在  <code>Additional Include Directories</code>  字段中，添加你的头文件目录的路径。如果你的头文件在  <code>include</code>  文件夹中，输入相对路径  <code>include</code>  或者绝对路径。</li>\n</ul>\n</li>\n<li><strong>配置库目录</strong>：\n<ul>\n<li>在项目属性窗口中，导航到  <code>Configuration Properties -&gt; Linker -&gt; General</code> 。</li>\n<li>在  <code>Additional Library Directories</code>  字段中，添加你的静态库目录的路径。如果你的库文件在  <code>libs</code>  文件夹中，输入相对路径  <code>libs</code>  或者绝对路径。</li>\n</ul>\n</li>\n<li><strong>添加库文件</strong>：\n<ul>\n<li>在项目属性窗口中，导航到  <code>Configuration Properties -&gt; Linker -&gt; Input</code> 。</li>\n<li>在  <code>Additional Dependencies</code>  字段中，添加你的库文件名称  <code>mylibrary.lib</code> 。如果有多个库文件，用分号分隔。</li>\n</ul>\n</li>\n</ol>\n<p>最后就可以调用静态库里的函数啦！同时又看不到函数的具体实现。是不是贼有意思呢？</p>\n<p><img data-src=\"../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180929641.png\" alt=\"image-20240601180929641\"></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/5e71c9a6.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/5e71c9a6.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（3）C语言基础",
            "date_published": "2024-05-16T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h1 id=\"小柴带你学autosar系列一-基础知识篇3c语言基础\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇3c语言基础\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（3）C 语言基础</h1>\n<h1 id=\"c语言入门基本语法\"><a class=\"anchor\" href=\"#c语言入门基本语法\">#</a> C 语言入门基本语法</h1>\n<p>C 语言是一种功能强大且高效的编程语言，被广泛应用于系统编程、嵌入式系统、游戏开发等领域。本文将介绍 C 语言的基本语法，并通过代码示例帮助你理解和掌握这些基础知识。</p>\n<h2 id=\"1-程序结构\"><a class=\"anchor\" href=\"#1-程序结构\">#</a> 1. 程序结构</h2>\n<p>一个简单的 C 语言程序通常包含以下几个部分：</p>\n<ul>\n<li>预处理指令</li>\n<li>主函数</li>\n<li>变量声明</li>\n<li>语句和表达式</li>\n</ul>\n<p>以下是一个简单的 C 语言程序示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span>  <span class=\"token comment\">// 预处理指令，包含标准输入输出库</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 主函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出语句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回值，0 表示程序成功结束</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"2-变量和数据类型\"><a class=\"anchor\" href=\"#2-变量和数据类型\">#</a> 2. 变量和数据类型</h2>\n<p>C 语言支持多种数据类型，包括整型、浮点型、字符型等。常见的基本数据类型有：</p>\n<ul>\n<li><code>int</code> ：整型</li>\n<li><code>float</code> ：单精度浮点型</li>\n<li><code>double</code> ：双精度浮点型</li>\n<li><code>char</code> ：字符型</li>\n</ul>\n<p>变量声明的示例如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 整型变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 浮点型变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 双精度浮点型变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> d<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 字符型变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">3.14f</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">2.718</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 赋值</span></pre></td></tr></tbody></table></figure><h2 id=\"3-常量\"><a class=\"anchor\" href=\"#3-常量\">#</a> 3. 常量</h2>\n<p>常量是值在程序运行期间不可更改的数据。可以使用 <code>const</code>  关键字定义常量：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 整型常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 浮点型常量</span></pre></td></tr></tbody></table></figure><h2 id=\"4-运算符\"><a class=\"anchor\" href=\"#4-运算符\">#</a> 4. 运算符</h2>\n<p>C 语言提供了多种运算符，包括算术运算符、关系运算符、逻辑运算符等。</p>\n<ul>\n<li>算术运算符： <code>+</code> ,  <code>-</code> ,  <code>*</code> ,  <code>/</code> ,  <code>%</code></li>\n<li>关系运算符： <code>==</code> ,  <code>!=</code> ,  <code>&gt;</code> ,  <code>&lt;</code> ,  <code>&gt;=</code> ,  <code>&lt;=</code></li>\n<li>逻辑运算符： <code>&amp;&amp;</code> ,  <code>||</code> ,  <code>!</code></li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 算术运算</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> prod <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> quotient <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> remainder <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> isEqual <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关系运算</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> isGreater <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> andResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 逻辑运算</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> orResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> notResult <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"5-控制结构\"><a class=\"anchor\" href=\"#5-控制结构\">#</a> 5. 控制结构</h2>\n<h3 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句</h3>\n<p>条件语句用于根据条件的真伪执行不同的代码块。</p>\n<ul>\n<li><code>if</code>  语句：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is negative\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is zero\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><ul>\n<li><code>switch</code>  语句：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> grade <span class=\"token operator\">=</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token char\">'A'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Excellent\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token char\">'B'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token char\">'C'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fair\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token char\">'D'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Poor\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid grade\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h3 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h3>\n<p>循环语句用于重复执行某个代码块。</p>\n<ul>\n<li><code>for</code>  循环：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><ul>\n<li><code>while</code>  循环：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count = %d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><ul>\n<li><code>do-while</code>  循环：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n = %d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"6-函数\"><a class=\"anchor\" href=\"#6-函数\">#</a> 6. 函数</h2>\n<p>函数是组织代码的基本单元，用于实现特定功能。函数可以有参数和返回值。</p>\n<p>函数定义和调用示例如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 函数定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result = %d\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"7-数组\"><a class=\"anchor\" href=\"#7-数组\">#</a> 7. 数组</h2>\n<p>数组是存储同类型数据的集合，可以通过下标访问数组元素。</p>\n<p>数组声明和使用示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> numbers<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组声明和初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numbers[%d] = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"8-指针\"><a class=\"anchor\" href=\"#8-指针\">#</a> 8. 指针</h2>\n<p>指针是存储变量地址的变量，可以通过指针访问和操作变量的值。</p>\n<p>指针示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指针 p 指向 x 的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of x = %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address of x = %p\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value at address p = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通过指针访问 x 的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>函数返回值类型 <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 指针变量名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>函数参数列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> 函数返回值类型 <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> 指针变量名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>函数参数列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myFun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myFun: %d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>pFun <span class=\"token operator\">=</span> myFun<span class=\"token punctuation\">;</span><span class=\"token comment\">// 函数指针指向 myFun (); 调用：pFun ();</span></pre></td></tr></tbody></table></figure><h2 id=\"9-结构体\"><a class=\"anchor\" href=\"#9-结构体\">#</a> 9. 结构体</h2>\n<p>结构体是用户自定义的数据类型，用于存储不同类型的数据。</p>\n<p>结构体定义和使用示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> student1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>student1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 字符数组赋值需要使用 strcpy 函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">95.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID: %d\\n\"</span><span class=\"token punctuation\">,</span> student1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: %s\\n\"</span><span class=\"token punctuation\">,</span> student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Score: %.2f\\n\"</span><span class=\"token punctuation\">,</span> student1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"10共用体\"><a class=\"anchor\" href=\"#10共用体\">#</a> 10. 共用体</h2>\n<p>共用体（Union）是 C 语言中一种特殊的数据类型，它允许在相同的内存位置存储不同的数据类型。与结构体不同的是，共用体的所有成员共享同一块内存空间，因此共用体的大小等于其最大成员的大小。</p>\n<h3 id=\"共用体的定义\"><a class=\"anchor\" href=\"#共用体的定义\">#</a> 共用体的定义</h3>\n<p>共用体通过关键字 <code>union</code>  来定义，其语法如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> UnionName <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    member1_type member1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    member2_type member2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 可以有多个成员</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h3 id=\"共用体的使用\"><a class=\"anchor\" href=\"#共用体的使用\">#</a> 共用体的使用</h3>\n<p>共用体的成员可以像结构体的成员一样被访问。但是，共用体的每次赋值都会覆盖之前的值，并且只能同时使用一个成员。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> Data <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>data<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.i = %d\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出 10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>data<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.f = %.2f\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出 3.14</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.str = %s\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出 Hello</span></pre></td></tr></tbody></table></figure><p>在上面的示例中，共用体 <code>Data</code>  有三个成员： <code>i</code> 、 <code>f</code>  和 <code>str</code> ，它们分别是整型、浮点型和字符数组类型。因为共用体的所有成员共享同一块内存空间，所以对一个成员的赋值会影响其他成员的值。</p>\n<h3 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h3>\n<ul>\n<li><strong>节省内存</strong>：当某些数据共享同一块内存空间时，可以使用共用体来节省内存。</li>\n<li><strong>数据类型转换</strong>：在一些特定情况下，共用体可以用于进行不同类型之间的转换。</li>\n</ul>\n<h2 id=\"11宏定义\"><a class=\"anchor\" href=\"#11宏定义\">#</a> 11. 宏定义</h2>\n<h3 id=\"创建符号常量\"><a class=\"anchor\" href=\"#创建符号常量\">#</a> 创建符号常量</h3>\n<p>宏定义可以用来创建符号常量，这些常量在程序中可以被多次引用，提高了代码的可读性和维护性。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14159</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr></tbody></table></figure><p>在上面的示例中， <code>PI</code>  和 <code>MAX_SIZE</code>  都被定义为符号常量，它们在程序中可以被多次使用而不用重复书写其值。</p>\n<h3 id=\"创建代码片段\"><a class=\"anchor\" href=\"#创建代码片段\">#</a> 创建代码片段</h3>\n<p>宏定义还可以用来创建代码片段，这些片段在程序中被多次调用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SQUARE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></tbody></table></figure><p>上面的宏定义创建了一个求平方的宏，可以通过传入参数 <code>x</code>  来实现平方操作。</p>\n<h3 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h3>\n<p>下面是一个使用宏定义的示例，演示了创建符号常量和代码片段的用法：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14159</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PI = %.2f\\n\"</span><span class=\"token punctuation\">,</span> PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> max_value <span class=\"token operator\">=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max value = %d\\n\"</span><span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在这个示例中， <code>PI</code>  被定义为符号常量， <code>MAX</code>  被定义为求最大值的宏。</p>\n<h2 id=\"12枚举\"><a class=\"anchor\" href=\"#12枚举\">#</a> 12. 枚举</h2>\n<p>枚举是一种用户定义的数据类型，它允许为一组相关的常量赋予符号名称。这使得代码更易于阅读和维护。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Monday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Tuesday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Wednesday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Thursday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Friday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Saturday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Sunday</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们定义了一个枚举类型 <code>Weekday</code> ，其中包含了一周中的每一天。默认情况下，枚举常量的值从 0 开始，依次递增。</p>\n<h2 id=\"13递归\"><a class=\"anchor\" href=\"#13递归\">#</a> 13. 递归</h2>\n<p>递归是指函数调用自身的编程技术。它在解决问题时通常将问题分解为更小的、类似的子问题，直到达到基本情况。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Factorial of 5 is %d\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在这个例子中， <code>factorial</code>  函数通过递归调用自身来计算给定数字的阶乘。</p>\n<h2 id=\"14内联函数\"><a class=\"anchor\" href=\"#14内联函数\">#</a> 14. 内联函数</h2>\n<p>在 c/c++ 中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了 <strong>inline</strong> 修饰符，表示为内联函数。</p>\n<p>栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。</p>\n<p>inline 仅是一个对编译器的建议</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">num_check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"奇\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"偶\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02d   %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token function\">num_check</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>上面的例子就是标准的内联函数的用法，使用 inline 修饰带来的好处我们表面看不出来，其实，在内部的工作就是在每个 for 循环的内部任何调用 dbtest (i) 的地方都换成了 (i%2&gt;0)?\"奇\":\"偶\"，这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</pre></td></tr></tbody></table></figure><p>内联是以 ** 代码膨胀（复制）** 为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。</p>\n<p>如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</p>\n<h1 id=\"c语言关键字\"><a class=\"anchor\" href=\"#c语言关键字\">#</a> C 语言关键字</h1>\n<p>C 语言中的关键字可以根据其功能和用途进行分类。以下是对 C 语言关键字的分类：</p>\n<h2 id=\"1-数据类型声明\"><a class=\"anchor\" href=\"#1-数据类型声明\">#</a> 1. 数据类型声明</h2>\n<ul>\n<li><strong>char</strong>：用于声明字符型变量或函数的返回类型。</li>\n<li><strong>int</strong>：用于声明整型变量或函数的返回类型。</li>\n<li><strong>float</strong>：用于声明单精度浮点型变量或函数的返回类型。</li>\n<li><strong>double</strong>：用于声明双精度浮点型变量或函数的返回类型。</li>\n<li><strong>void</strong>：用于指定函数无返回值或无参数，或者声明指向未知类型的指针。</li>\n<li><strong>long</strong>：用于声明长整型变量或函数的返回类型。</li>\n<li><strong>short</strong>：用于声明短整型变量或函数的返回类型。</li>\n<li><strong>signed</strong>：用于声明有符号整型变量。</li>\n<li><strong>unsigned</strong>：用于声明无符号整型变量。</li>\n</ul>\n<h2 id=\"2-变量声明和存储类别\"><a class=\"anchor\" href=\"#2-变量声明和存储类别\">#</a> 2. 变量声明和存储类别</h2>\n<ul>\n<li><strong>auto</strong>：用于声明自动变量，其生命周期随着代码块的结束而结束。</li>\n<li><strong>static</strong>：用于声明静态变量，其生命周期在整个程序执行期间保持不变。</li>\n<li><strong>extern</strong>：用于声明变量或函数是在其他文件中定义的。</li>\n<li><strong>register</strong>：用于声明寄存器变量，提示编译器将变量存储在 CPU 寄存器中。</li>\n<li><strong>const</strong>：用于声明只读变量，其值在初始化后不能修改。</li>\n<li><strong>volatile</strong>：用于告诉编译器变量的值可能会在外部被改变，从而防止编译器对该变量进行优化。</li>\n</ul>\n<h2 id=\"3-流程控制\"><a class=\"anchor\" href=\"#3-流程控制\">#</a> 3. 流程控制</h2>\n<ul>\n<li><strong>if</strong>：用于创建条件语句。</li>\n<li><strong>else</strong>：用于在 if 语句中指定条件为假时要执行的代码块。</li>\n<li><strong>switch</strong>：用于创建 switch 语句。</li>\n<li><strong>case</strong>：用于在 switch 语句中指定不同的情况。</li>\n<li><strong>default</strong>：在 switch 语句中用于指定默认情况。</li>\n<li><strong>while</strong>：用于创建 while 循环。</li>\n<li><strong>do</strong>：用于创建 do-while 循环。</li>\n<li><strong>for</strong>：用于创建 for 循环。</li>\n<li><strong>break</strong>：用于跳出循环或 switch 语句。</li>\n<li><strong>continue</strong>：用于跳过循环中的当前迭代，继续下一次迭代。</li>\n<li><strong>goto</strong>：用于无条件地转移到程序中的标记位置。</li>\n<li><strong>return</strong>：用于从函数中返回值。</li>\n</ul>\n<h2 id=\"4-函数和返回值\"><a class=\"anchor\" href=\"#4-函数和返回值\">#</a> 4. 函数和返回值</h2>\n<ul>\n<li><strong>void</strong>：用于指定函数无返回值或无参数，或者声明指向未知类型的指针。</li>\n<li><strong>return</strong>：用于从函数中返回值。</li>\n</ul>\n<h2 id=\"5-结构和组织代码\"><a class=\"anchor\" href=\"#5-结构和组织代码\">#</a> 5. 结构和组织代码</h2>\n<ul>\n<li><strong>struct</strong>：用于定义结构体类型。</li>\n<li><strong>union</strong>：用于定义共用体类型。</li>\n<li><strong>typedef</strong>：用于定义新的数据类型名称。</li>\n<li><strong>enum</strong>：用于定义枚举类型。</li>\n</ul>\n<h2 id=\"6-内存大小和类型检查\"><a class=\"anchor\" href=\"#6-内存大小和类型检查\">#</a> 6. 内存大小和类型检查</h2>\n<ul>\n<li><strong>sizeof</strong>：用于获取数据类型或变量的大小（字节数）。</li>\n</ul>\n<h2 id=\"7-标记和标签\"><a class=\"anchor\" href=\"#7-标记和标签\">#</a> 7. 标记和标签</h2>\n<ul>\n<li><strong>goto</strong>：用于无条件地转移到程序中的标记位置。</li>\n<li><strong>label_name:</strong>：标签名称，通常与 <code>goto</code>  语句配合使用。</li>\n</ul>\n<h2 id=\"8-条件编译\"><a class=\"anchor\" href=\"#8-条件编译\">#</a> 8. 条件编译</h2>\n<ul>\n<li><strong>#if</strong>：条件预处理指令，根据条件编译指定的代码。</li>\n<li><strong>#ifdef</strong>：条件预处理指令，如果定义了指定的宏则编译后面的代码。</li>\n<li><strong>#ifndef</strong>：条件预处理指令，如果未定义指定的宏则编译后面的代码。</li>\n<li><strong>#elif</strong>：条件预处理指令，用于多个条件之间的选择。</li>\n<li><strong>#else</strong>：条件预处理指令，用于条件不成立时执行的代码。</li>\n<li><strong>#endif</strong>：条件预处理指令，结束条件编译块。</li>\n<li><strong>#define</strong>：用于定义宏。</li>\n<li><strong>#undef</strong>：用于取消已定义的宏。</li>\n<li><strong>#include</strong>：用于包含其他文件的内容。</li>\n</ul>\n<p>这些关键字和预处理指令在 C 语言中起着不同的作用，能够帮助程序员控制程序的流程、声明变量和类型、组织代码结构等。理解和熟悉这些关键字的用法是编写高效、可读性强的 C 代码的重要基础。</p>\n<h1 id=\"c语言运算符\"><a class=\"anchor\" href=\"#c语言运算符\">#</a> C 语言运算符</h1>\n<p>C 语言中的运算符是用来执行各种数学和逻辑运算的特殊符号。它们可以用于操作各种类型的数据，包括整数、浮点数、字符等。以下是 C 语言中常用的运算符及其优先级：</p>\n<h2 id=\"1-算术运算符\"><a class=\"anchor\" href=\"#1-算术运算符\">#</a> 1. 算术运算符</h2>\n<ul>\n<li><strong>+</strong>：加法运算</li>\n<li><strong>-</strong>：减法运算</li>\n<li>*****：乘法运算</li>\n<li><strong>/</strong>：除法运算</li>\n<li><strong>%</strong>：取模运算（求余数）</li>\n</ul>\n<h2 id=\"2-关系运算符\"><a class=\"anchor\" href=\"#2-关系运算符\">#</a> 2. 关系运算符</h2>\n<ul>\n<li><strong>==</strong>：等于</li>\n<li><strong>!=</strong>：不等于</li>\n<li><strong>&gt;</strong>：大于</li>\n<li><strong>&lt;</strong>：小于</li>\n<li><strong>&gt;=</strong>：大于等于</li>\n<li><strong>&lt;=</strong>：小于等于</li>\n</ul>\n<h2 id=\"3-逻辑运算符\"><a class=\"anchor\" href=\"#3-逻辑运算符\">#</a> 3. 逻辑运算符</h2>\n<ul>\n<li><strong>&amp;&amp;</strong>：逻辑与</li>\n<li><strong>||</strong>：逻辑或</li>\n<li><strong>!</strong>：逻辑非</li>\n</ul>\n<h2 id=\"4-位运算符\"><a class=\"anchor\" href=\"#4-位运算符\">#</a> 4. 位运算符</h2>\n<ul>\n<li><strong>&amp;</strong>：按位与</li>\n<li><strong>|</strong>：按位或</li>\n<li><strong>^</strong>：按位异或</li>\n<li><strong>~</strong>：按位取反</li>\n<li><strong>&lt;&lt;</strong>：左移位</li>\n<li><strong>&gt;&gt;</strong>：右移位</li>\n</ul>\n<h2 id=\"5-赋值运算符\"><a class=\"anchor\" href=\"#5-赋值运算符\">#</a> 5. 赋值运算符</h2>\n<ul>\n<li><strong>=</strong>：赋值运算符</li>\n<li><strong>+=</strong>：加法赋值</li>\n<li><strong>-=</strong>：减法赋值</li>\n<li>*<strong>=</strong>：乘法赋值</li>\n<li><strong>/=</strong>：除法赋值</li>\n<li><strong>%=</strong>：取模赋值</li>\n<li><strong>&amp;=</strong>：按位与赋值</li>\n<li><strong>|=</strong>：按位或赋值</li>\n<li><strong>^=</strong>：按位异或赋值</li>\n<li><strong>&lt;&lt;=</strong>：左移位赋值</li>\n<li><strong>&gt;&gt;=</strong>：右移位赋值</li>\n</ul>\n<h2 id=\"6-其他运算符\"><a class=\"anchor\" href=\"#6-其他运算符\">#</a> 6. 其他运算符</h2>\n<ul>\n<li><strong>sizeof()</strong>：返回数据类型或变量的大小（字节数）</li>\n<li><strong>?:</strong>：条件运算符（三目运算符）</li>\n<li><strong>,</strong>：逗号运算符（用于分隔多个表达式，返回最后一个表达式的值）</li>\n</ul>\n<h2 id=\"7-优先级\"><a class=\"anchor\" href=\"#7-优先级\">#</a> 7. 优先级</h2>\n<p>运算符的优先级确定了它们在表达式中的执行顺序。以下是常见运算符的优先级，按照从高到低的顺序排列：</p>\n<ol>\n<li><strong>()</strong>：圆括号（最高优先级）</li>\n<li><strong>[], -&gt;, .</strong>：数组访问、结构体和共用体成员访问</li>\n<li><strong>++, --</strong>：自增和自减</li>\n<li><strong>+, -</strong>：正负号</li>\n<li><strong>!, ~</strong>：逻辑非和按位取反</li>\n<li><strong>sizeof</strong>：大小运算符</li>\n<li>*<strong>, /, %</strong>：乘法、除法和取模</li>\n<li><strong>+, -</strong>：加法和减法</li>\n<li><strong>&lt;&lt;, &gt;&gt;</strong>：左移位和右移位</li>\n<li><strong>&lt;, &lt;=, &gt;, &gt;=</strong>：关系运算符</li>\n<li><strong>==, !=</strong>：等于和不等于</li>\n<li><strong>&amp;</strong>：按位与</li>\n<li><strong>^</strong>：按位异或</li>\n<li><strong>|</strong>：按位或</li>\n<li><strong>&amp;&amp;</strong>：逻辑与</li>\n<li><strong>||</strong>：逻辑或</li>\n<li><strong>?:</strong>：条件运算符</li>\n<li><strong>=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=</strong>：赋值运算符（最低优先级）</li>\n</ol>\n<p>了解运算符的优先级和结合性是编写正确和高效的表达式的关键。0</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html",
            "title": "",
            "date_published": "2024-05-13T14:21:32.885Z",
            "content_html": "<html><head></head><body></body></html>",
            "tags": []
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构",
            "date_published": "2024-05-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h2 id=\"小柴带你学autosar系列一-基础知识篇2autosar架构\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇2autosar架构\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构</h2>\n<p>+++</p>\n<h2 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起</h2>\n<p>首先要知道分层的意义：树状结构！（就像国、省、市、区这样分发快递的时候是不是很清晰呢😊）</p>\n<p>补充一点：Autosar 的代码全是状态驱动的。为了实现代码解耦。【详情后续会更新👻】</p>\n<p>+++</p>\n<h2 id=\"autosar分层\"><a class=\"anchor\" href=\"#autosar分层\">#</a> AutoSar 分层</h2>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512105511125.png\" alt=\"image-20240512105511125\"></p>\n<ul>\n<li>应用层（Application Layer）：【具体功能的实现。例如：制动控制、车身控制、点火控制、刹车控制、天气等等】</li>\n<li>RTE（Runtime Environment）【管理和调度 SWC。做 SWC 与 BSW 之间的映射】</li>\n<li>BSW（Basic Software）基础软件层【枚举了所有可能用到的所有基本功能】</li>\n<li>微控制器（Microcontroller）</li>\n</ul>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240504123109486.png\" alt=\"image-20240504123109486\"></p>\n<p>各个层级之间如何对接的呢🎮</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512105719292.png\" alt=\"image-20240512105719292\"></p>\n<p>+++</p>\n<h2 id=\"bsw分层\"><a class=\"anchor\" href=\"#bsw分层\">#</a> BSW 分层</h2>\n<ul>\n<li>服务层【服务层提供了基本的服务和功能，为应用层提供支持。这些服务包括诸如网络通信和管理服务、内存服务、诊断服务、ECU 状态管理、模式管理、时间管理、任务管理等】</li>\n<li>ECU 抽象层【提供了一些微控制器的驱动】</li>\n<li>微控制器抽象层【直接与硬件相关的层级，给上层提供标准化的接口来使上层脱离硬件的区别】</li>\n<li>复杂驱动层【未在 Autosar 定义内的内容以 CDD 的形式集成】</li>\n</ul>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240504123138493.png\" alt=\"image-20240504123138493\"></p>\n<p>具体来看看吧🤔</p>\n<ul>\n<li>Application Layer(SWC)</li>\n<li>Runtime Environment(RTE)</li>\n<li>Basic Software(BSW)\n<ul>\n<li>Services Layer 服务层\n<ul>\n<li>System Services 系统服务</li>\n<li>Memory Services 内存服务</li>\n<li>Crypto Services 加密服务</li>\n<li>Off-board Communication Services 片外通信服务</li>\n<li>Communication Services 通信服务</li>\n</ul>\n</li>\n<li>ECU Abstraction LayerECU 抽象层\n<ul>\n<li>Onboard Device Abstraction 片上设备抽象</li>\n<li>Memory Hardware Abstraction 内存硬件抽象</li>\n<li>Crypto Hardware Abstraction 加密硬件抽象</li>\n<li>Wireless Communication HW Abstraction 无线通信硬件抽象</li>\n<li>Communication HW Abstraction 通信硬件抽象</li>\n<li>I/O Hardware Abstraction I/O 硬件抽象</li>\n</ul>\n</li>\n<li>Microcontroller Abstraction Layer 微控制器抽象层\n<ul>\n<li>Microcontroller Drivers 微控制器驱动</li>\n<li>Memory Drivers 内存驱动</li>\n<li>Crypto Drivers 加密驱动</li>\n<li>Wireless Communication Drivers 无线通信驱动</li>\n<li>Communication Drivers 通信驱动</li>\n<li>I/O Drivers I/O 驱动</li>\n</ul>\n</li>\n<li>Complex Drivers 复杂驱动</li>\n</ul>\n</li>\n<li>Microcontroller</li>\n</ul>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240504123208031.png\" alt=\"image-20240504123208031\"></p>\n<p>坦白来讲呢就一句话层层分明，来细化各个模块。同时这也导致代码看起来极其不直观。</p>\n<p>+++</p>\n<h2 id=\"rte的作用\"><a class=\"anchor\" href=\"#rte的作用\">#</a> RTE 的作用</h2>\n<p>RTE（Runtime Environment）是 AUTOSAR 架构中的一个关键组件，主要用于管理和调度汽车电子系统中的软件组件（SWC）。其主要功能包括：</p>\n<ol>\n<li><strong>通信管理</strong>：RTE 负责管理和调度 SWC 之间的通信，包括数据传输、消息传递等，确保各个 SWC 之间能够正确地交换数据和信息。</li>\n<li><strong>调度和时间管理</strong>：RTE 根据预先定义的调度表，对各个 SWC 的任务进行调度和执行，确保各个任务按时完成，同时管理系统的时钟和时间，保证系统的时序性和实时性。</li>\n<li><strong>资源管理</strong>：RTE 负责管理系统中的资源，包括 CPU、内存、IO 等，确保各个 SWC 之间能够共享和竞争资源，并通过资源分配算法进行优化。</li>\n<li><strong>错误管理</strong>：RTE 提供错误检测和处理机制，监控系统运行过程中的错误和异常情况，采取相应的措施进行处理，保证系统的稳定性和可靠性。</li>\n</ol>\n<p>总的来说，RTE 层在 AUTOSAR 架构中扮演着系统级别的角色，负责管理和调度汽车电子系统中的各个软件组件，确保它们能够协同工作，实现整车的功能，并且保证系统的性能、稳定性和安全性。</p>\n<p>+++</p>\n<h2 id=\"分层结构举例\"><a class=\"anchor\" href=\"#分层结构举例\">#</a> 分层结构举例</h2>\n<h3 id=\"can\"><a class=\"anchor\" href=\"#can\">#</a> CAN</h3>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512095428803.png\" alt=\"image-20240512095428803\"></p>\n<p>CAN，即 Controller Area Network（控制器局域网），在车载软件上的作用可谓举足轻重。它不仅是一个通信协议，更是一个能够实现车辆内部各个控制单元之间高效、实时信息交互的桥梁。CAN 总线可以挂载多个 ECU 实现通信，一般可以接 10~100 个节点。</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512094630291.png\" alt=\"image-20240512094630291\"></p>\n<p>每层都有其自身的定位。😎</p>\n<h4 id=\"服务层\"><a class=\"anchor\" href=\"#服务层\">#</a> 服务层</h4>\n<p><strong>PDUR（Physical Data Unit Receiver）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：PDUR 负责接收来自 CAN 物理层的数据，并将其转换为服务层可以处理的格式。它处理数据的接收同步、解码以及错误检测等任务，确保数据的完整性和正确性。</li>\n</ul>\n<p><strong>CANTP（CAN Transport Protocol）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：CANTP 是一个传输协议，它提供了在 CAN 网络上可靠传输数据帧的机制。它负责将数据分割成合适大小的数据块，并在接收端进行数据重组，以支持长数据的传输，同时提供流量控制和错误恢复功能。</li>\n</ul>\n<p><strong>CANSM（CAN State Manager）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：CANSM 负责管理 CAN 通信的状态和生命周期。它监控 CAN 网络的连接状态，处理网络故障和恢复，确保 CAN 通信的稳定性和可靠性。此外，它还可能提供网络管理功能，如节点的加入、离开和配置等。</li>\n</ul>\n<p><strong>CANNM（CAN Network Management）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：CANNM 负责网络层面的管理和控制。它可能包括网络初始化、节点寻址、节点状态监控等功能，以确保 CAN 网络的整体性能和稳定性。此外，它还可能提供诊断和维护功能，帮助开发人员和维修人员快速定位和解决问题。</li>\n</ul>\n<h4 id=\"ecu抽象层\"><a class=\"anchor\" href=\"#ecu抽象层\">#</a> ECU 抽象层</h4>\n<p><strong>CANIf（CAN Interface）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：CANIf 是 ECU 与 CAN 网络之间的接口层。它提供了 ECU 访问 CAN 网络的统一接口，隐藏了底层通信的复杂性。CANIf 负责数据的封装和解封装，将 ECU 发送的数据转换为 CAN 帧格式，并将接收到的 CAN 帧解析为 ECU 可以理解的数据。</li>\n</ul>\n<p><strong>CANTrcv（CAN Receiver）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：CANTrcv 是 ECU 内部用于接收 CAN 数据的组件。它负责监听 CAN 网络上的数据，并将接收到的数据传递给相应的处理函数或模块。CANTrcv 可能还具备数据过滤功能，只接收特定类型或特定源地址的数据，以减少 ECU 的处理负担。</li>\n</ul>\n<h4 id=\"微控制器抽象层\"><a class=\"anchor\" href=\"#微控制器抽象层\">#</a> 微控制器抽象层</h4>\n<p><strong>CAN（Microcontroller Abstraction Layer）</strong>：</p>\n<ul>\n<li><strong>作用</strong>：这里的 CAN 指的是微控制器抽象层的 CAN 模块或驱动。它负责在微控制器和 CAN 硬件之间建立通信桥梁，使得微控制器能够通过软件控制 CAN 硬件的操作。这个抽象层通常提供了一组 API（应用程序接口），允许上层软件以统一的方式访问和操作 CAN 硬件，而无需关心具体的硬件细节。</li>\n</ul>\n<p>这些 CAN 相关的组件和层在 CAN 通信系统中各自扮演着重要的角色，它们协同工作以确保数据的可靠传输和系统的稳定运行。</p>\n<h3 id=\"lin\"><a class=\"anchor\" href=\"#lin\">#</a> LIN</h3>\n<p>分层都类似就不多说了，直接看图。</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512101904559.png\" alt=\"image-20240512101904559\"></p>\n<h3 id=\"flexray\"><a class=\"anchor\" href=\"#flexray\">#</a> FlexRay</h3>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512102454037.png\" alt=\"image-20240512102454037\"></p>\n<h3 id=\"ethernet\"><a class=\"anchor\" href=\"#ethernet\">#</a> Ethernet</h3>\n<p>以太网不用过多解释了吧，生活中已经无处不在！🚀</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512102531226.png\" alt=\"image-20240512102531226\"></p>\n<p>这里附上一个网络七层模型，相信大家就理解啦！</p>\n<p><strong>OSI 网络七层模型</strong></p>\n<table>\n<thead>\n<tr>\n<th>层级</th>\n<th>层</th>\n<th>英文全称</th>\n<th>常用协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7</td>\n<td>应用层</td>\n<td>Application Layer</td>\n<td>HTTP、FTP、SMTP、POP3、TELNET、NNTP、IMAP4、FINGER</td>\n</tr>\n<tr>\n<td>6</td>\n<td>表示层</td>\n<td>Prosentation Layer</td>\n<td>LPP’、BNBSSP</td>\n</tr>\n<tr>\n<td>5</td>\n<td>会话层</td>\n<td>Session Layer</td>\n<td>SSL、TLS、DAP、LDAP</td>\n</tr>\n<tr>\n<td>4</td>\n<td>传输层</td>\n<td>Transport Layer</td>\n<td>TCP、UDP</td>\n</tr>\n<tr>\n<td>3</td>\n<td>网络层</td>\n<td>Network Layer</td>\n<td>IP、ICMP、RIP、IGMP、OSPF</td>\n</tr>\n<tr>\n<td>2</td>\n<td>数据链路层</td>\n<td>Data Link Layer</td>\n<td>以太网、网卡、交换机、PPTP、L2TP、ARP、ATMP</td>\n</tr>\n<tr>\n<td>1</td>\n<td>物理层</td>\n<td>Physical Layer</td>\n<td>物理线路、光纤、中继器、集线器、双绞线</td>\n</tr>\n</tbody>\n</table>\n<p>+++</p>\n<h2 id=\"多核架构\"><a class=\"anchor\" href=\"#多核架构\">#</a> 多核架构</h2>\n<h3 id=\"autosar多核架构\"><a class=\"anchor\" href=\"#autosar多核架构\">#</a> Autosar 多核架构</h3>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512105228633.png\" alt=\"image-20240512105228633\"></p>\n<h3 id=\"rh850u2a多核架构\"><a class=\"anchor\" href=\"#rh850u2a多核架构\">#</a> RH850U2A 多核架构</h3>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110157172.png\" alt=\"image-20240512110157172\"></p>\n<p>+++</p>\n<h2 id=\"各模块之间的交互协作\"><a class=\"anchor\" href=\"#各模块之间的交互协作\">#</a> 各模块之间的交互协作</h2>\n<h3 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a> Memory</h3>\n<p>大家看图自己体会😜</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110445777.png\" alt=\"image-20240512110445777\"></p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110520195.png\" alt=\"image-20240512110520195\"></p>\n<h3 id=\"communication\"><a class=\"anchor\" href=\"#communication\">#</a> Communication</h3>\n<h4 id=\"整体看一下吧\"><a class=\"anchor\" href=\"#整体看一下吧\">#</a> 整体看一下吧😋</h4>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512111542154.png\" alt=\"image-20240512111542154\"></p>\n<h4 id=\"ethernet-2\"><a class=\"anchor\" href=\"#ethernet-2\">#</a> Ethernet</h4>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512111620314.png\" alt=\"image-20240512111620314\"></p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110922137.png\" alt=\"image-20240512110922137\"></p>\n<h4 id=\"整个过程用到了以下组件\"><a class=\"anchor\" href=\"#整个过程用到了以下组件\">#</a> 整个过程用到了以下组件</h4>\n<ul>\n<li>PDU Router\n<ul>\n<li>提供不同抽象通信控制器和上层之间 PDU 的路由</li>\n<li>路由器的规模是特定于 ECU 的（如果例如只有一个通信控制器，则缩小到无规模）</li>\n<li>提供动态 TP 路由。在缓冲完整的 TP 数据之前开始传输 TP 数据</li>\n</ul>\n</li>\n<li>COM\n<ul>\n<li>提供不同 I-PDU 之间单个信号或信号组的路由</li>\n</ul>\n</li>\n<li>NM Coordinator\n<ul>\n<li>通过 NM 协调员处理的网络管理，同步连接到 ECU 的不同通信信道的网络状态</li>\n</ul>\n</li>\n<li>Communication State Managers\n<ul>\n<li>通过接口启动和关闭通信系统的硬件单元</li>\n<li>控制 PDU 组</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"can-2\"><a class=\"anchor\" href=\"#can-2\">#</a> CAN</h4>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110716797.png\" alt=\"image-20240512110716797\"></p>\n<h4 id=\"还有一些层级命名的说明\"><a class=\"anchor\" href=\"#还有一些层级命名的说明\">#</a> 还有一些层级命名的说明</h4>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110800894.png\" alt=\"image-20240512110800894\"></p>\n<p>+++</p>\n<h2 id=\"autosar-cp集群\"><a class=\"anchor\" href=\"#autosar-cp集群\">#</a> Autosar CP 集群</h2>\n<p>不多描述了看图，明白这个思想就好</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112131906.png\" alt=\"image-20240512112131906\"></p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112155000.png\" alt=\"image-20240512112155000\"></p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112304469.png\" alt=\"image-20240512112304469\"></p>\n<p>+++</p>\n<h2 id=\"autosar配置\"><a class=\"anchor\" href=\"#autosar配置\">#</a> Autosar 配置</h2>\n<p>使用依赖注入的方式来配置【参考 https://zhuanlan.zhihu.com/p/681210703】🐷</p>\n<p>简单来说就是使用一个指针指向配置参数。上层只需要在使用时将指针指向自己的配置即可。具体看下图</p>\n<p><img data-src=\"../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112625716.png\" alt=\"image-20240512112625716\"></p>\n<p>+++</p>\n<h2 id=\"integration-and-runtime-aspects\"><a class=\"anchor\" href=\"#integration-and-runtime-aspects\">#</a> Integration and Runtime aspects</h2>\n<p>集成与运行这块大家想看也可以了解一下</p>\n<p>本文就不做介绍啦</p>\n<p>+++</p>\n<h2 id=\"结束\"><a class=\"anchor\" href=\"#结束\">#</a> 结束</h2>\n<p>经过上述的介绍，相信大家已经大概了解 Autosar 啦！</p>\n<p>接下来愉快的开始学习新的知识吧！</p>\n<p>感谢有你陪伴哦！😘</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构",
            "date_published": "2024-05-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h1 id=\"小柴带你学autosar系列一-基础知识篇2autosar架构\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇2autosar架构\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构</h1>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构",
            "date_published": "2024-05-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h1 id=\"小柴带你学autosar系列一-基础知识篇2autosar架构\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇2autosar架构\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构</h1>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构",
            "date_published": "2024-05-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h1 id=\"小柴带你学autosar系列一-基础知识篇2autosar架构\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇2autosar架构\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构</h1>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b20010d9.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b20010d9.html",
            "title": "小柴带你学AutoSar系列一、基础知识篇（1）概念和目标",
            "date_published": "2024-05-02T16:00:00.000Z",
            "content_html": "<html><head></head><body><p></p><div class=\"links\"><div class=\"item\" title=\"【知乎】flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">【知乎】flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"【CSDN】小柴带你学AutoSar总目录\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=\">【CSDN】小柴带你学AutoSar总目录</span>\n          <p class=\"desc\">https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501</p>\n          </div></div></div><p></p>\n<p>Autosar 系列教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==\">小柴带你学 AutoSar 总目录</span></p>\n<h1 id=\"小柴带你学autosar系列一-基础知识篇1概念和目标\"><a class=\"anchor\" href=\"#小柴带你学autosar系列一-基础知识篇1概念和目标\">#</a> 小柴带你学 AutoSar 系列一、基础知识篇（1）概念和目标</h1>\n<p>AUTOSAR（Automotive Open System Architecture）是一种开放式的汽车电子系统架构，旨在实现汽车电子系统的标准化、模块化和可重用性。</p>\n<p>其主要目标包括：</p>\n<ol>\n<li><strong>标准化</strong>：通过制定统一的标准和规范，实现汽车电子系统的软件和硬件之间的互操作性，降低系统集成和开发的复杂性。</li>\n<li><strong>模块化</strong>：将汽车电子系统划分为多个独立的模块，每个模块具有特定的功能和接口，可以独立设计、开发和测试，从而提高系统的灵活性和可维护性。</li>\n<li><strong>可重用性</strong>：通过定义通用的软件组件和接口，实现汽车电子系统的功能模块化和可重用性，减少重复开发工作，提高开发效率和质量。</li>\n<li><strong>安全性</strong>：提供安全性标准和机制，确保汽车电子系统的稳定性、可靠性和安全性，以应对日益复杂的汽车电子系统和网络攻击等安全威胁。</li>\n</ol>\n<p>总的来说，AUTOSAR 的概念和目标是为了推动汽车电子系统的标准化、模块化和可重用性，以满足现代汽车对于更高效、更安全和更智能的需求。</p>\n<p><strong>最后通过配置工具来生成代码，实现想要的功能！</strong></p>\n<blockquote>\n<p>小柴大白话：代码只想写一次，剩下的全部通过配置来设置！</p>\n</blockquote>\n<h1 id=\"autosar整体认知\"><a class=\"anchor\" href=\"#autosar整体认知\">#</a> Autosar 整体认知</h1>\n<p><img data-src=\"../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213254808.png\" alt=\"image-20240503213254808\"></p>\n<h2 id=\"aiapplication-interfaces\"><a class=\"anchor\" href=\"#aiapplication-interfaces\">#</a> AI(Application Interfaces)</h2>\n<p><img data-src=\"../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213642771.png\" alt=\"image-20240503213642771\"></p>\n<p>重点是已建立的<strong>应用程序的接口规范</strong>，以强调软件<strong>重用和交换</strong>，这被认为是 AUTOSAR 的主要要求之一。</p>\n<blockquote>\n<p><strong>标准化应用程序接口的部署是应用程序重用的一个关键因素。</strong></p>\n</blockquote>\n<p>应用程序接口描述包含由所有合作伙伴的专家标准化的丰富数据。</p>\n<p>这些标准化接口允许软件设计者和实施者在独立于特定硬件和 / 或电子控制单元 (ECU) 扩展或重用软件组件的情况下使用它们。</p>\n<p>一般来说，应用程序是 ECU 的竞争优势。AUTOSAR 不会标准化应用程序的内部功能行为，例如算法，而是应用程序之间交换的内容。</p>\n<blockquote>\n<p>典型应用包括电子稳定控制 (ESC)、转向、电子驻车制动、驻车距离控制、车外灯、防盗系统、遥控无钥匙进入等。</p>\n</blockquote>\n<h2 id=\"cpclassic-platform\"><a class=\"anchor\" href=\"#cpclassic-platform\">#</a> CP(Classic Platform)</h2>\n<p><img data-src=\"../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213443988.png\" alt=\"image-20240503213443988\"></p>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念：</h3>\n<p><strong>一个基本概念是虚拟功能总线 (VFB)。</strong></p>\n<blockquote>\n<p>这种虚拟总线将应用程序从基础设施中分离出来。它通过专用端口进行通信，这意味着应用软件的通信接口必须映射到这些端口。VFB 处理单个 ECU 内部以及 ECU 之间的通信。从应用程序的角度来看，不需要底层技术或依赖关系的详细知识。这支持应用软件的独立于硬件的开发和使用。</p>\n</blockquote>\n<p>AUTOSAR 分层架构提供了软件和硬件独立性所需的所有机制。</p>\n<p><strong>它区分了运行在微控制器 (µC) 上的三个主要软件层：应用层、运行时环境 (RTE) 和基础软件 (BSW)。</strong></p>\n<blockquote>\n<p>不同汽车领域的应用程序通过 RTE 与基本软件连接。</p>\n</blockquote>\n<p>除了定义架构和接口之外，AUTOSAR 还定义了一种方法，能够配置完整的 AUTOSAR 堆栈，并增强不同工具链之间的互操作能力。</p>\n<p><strong>一方面，这对于开发项目中的协作很重要，另一方面，这对于降低开发成本也很重要。</strong></p>\n<p>标准化 ECU 软件架构的主要概念是通过软件抽象层 RTE（运行时环境）将独立于硬件的应用软件和面向硬件的基础软件（BSW）分开。在 RTE 的上层，该抽象层支持开发特定于 OEM 且具有竞争力的软件应用程序。在 RTE 的低端，它支持基本软件的标准化和 OEM 独立性。AUTOSAR 软件架构的另一个特点是适用于多种车型的 ECU 软件的可扩展性、跨 ECU 分布应用程序（功能软件模块）的可能性以及集成不同来源软件模块的能力。</p>\n<p>**AUTOSAR 软件架构中的基本软件进一步分为以下几层：服务、ECU 抽象和微控制器抽象。** 通过 RTE 实现的应用层与基本软件的分离包括控制这些层之间的数据交换。这构成了应用程序级面向组件、独立于硬件的软件结构的基础，软件组件（SWC）是独立的单元。由于其硬件独立性，因此有可能在不了解所使用或计划的硬件的情况下开发软件控制系统，并在开发期间灵活地将现有软件控制系统重新定位到电子控制单元。</p>\n<h3 id=\"methodology\"><a class=\"anchor\" href=\"#methodology\">#</a> Method­ol­ogy</h3>\n<p>除了软件架构之外，AUTOSAR 还为汽车软件开发引入了统一的方法。这主要是由改善参与当今汽车项目的不同方之间的协作的需求所驱动的。</p>\n<p>AUTOSAR 提供了指定将软件组件集成到 ECU 上以及将不同 ECU 集成到各种不同总线系统上的整个网络通信所需的所有方面的方法。该方法定义了活动对工作产品的依赖关系，预计将支持 AUTOSAR 中的活动、描述和工具使用。</p>\n<p>描述（.arxml）基于 AUTOSAR 模板，该模板定义了正式的交换格式（AUTOSAR 模式）和伴随交换格式的语义约束。这些描述用于保存在 AUTOSAR 方法中生成或使用的信息。各种生成器可以利用描述中的信息来支持 RTE 和 AUTOSAR 基本软件（包括操作系统）的配置和生成。</p>\n<p>也就是说：Autosar 可以通过<strong>配置来实现功能</strong></p>\n<h2 id=\"apadaptive-platform\"><a class=\"anchor\" href=\"#apadaptive-platform\">#</a> AP(Adaptive Platform)</h2>\n<p><img data-src=\"../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213504790.png\" alt=\"image-20240503213504790\"></p>\n<p>AUTOSAR 扩展了现有的方法，能够为经典平台和自适应平台提供通用的方法。支持功能应用程序的分布式、独立和敏捷开发需要一种标准化的开发方法。</p>\n<p>AUTOSAR 自适应方法涉及工作产品及其各自任务的标准化。工作产品描述诸如服务、应用程序、机器及其配置之类的工件。各个任务定义了工作产品如何为基于自适应平台开发产品所需的活动交换设计信息。</p>\n<h2 id=\"foundation\"><a class=\"anchor\" href=\"#foundation\">#</a> Foundation</h2>\n<p><img data-src=\"../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503214800344.png\" alt=\"image-20240503214800344\"></p>\n<p>基础标准的目的是加强 AUTOSAR 平台之间的互操作能力。<br>\nFoundation 包含 AUTOSAR 平台之间共享的通用要求和技术规范 (例如协议)。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a3fde49a.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a3fde49a.html",
            "title": "职场的一些经验之谈木雁之间",
            "date_published": "2024-04-22T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起</h2>\n<p>今天领导让我修复一个 boot 的问题【我在公司干了一年 Ethernet 了车载以太网】，说要当天搞定？说是要参加展会。</p>\n<p>然后经过排查，是 ld 文件【链接脚本文件】没分配对，RH850 的 4 核有 3 个跑不起来，boot 跳转的地址也不对。</p>\n<p>花了 2 小时搞定。【这 boot 是 boot 组那边人搞的，本来不属于我的工作】</p>\n<p>结果跟他们说结果，他们竟然都不愿意去详细看你的验证过程，给我的感觉就像是他们对这个不负责，这个活直接到我头上？这不是你们的事情吗？我不是只帮忙吗？</p>\n<p>然后是这样的</p>\n<p>boot.hex 直接烧录进 RH850</p>\n<p>app.hex 转 vbf 通过 can 使用诊断 UDS 服务下载进 codeflash 后重启 boot 完成升级。</p>\n<p>然后我一个临时解决 boot 跳转起不来的，TM 的难道不是只让你起来就行了吗？</p>\n<p>还需要我管你这一套流程吗？这不是这个项目的负责人该干的事吗？</p>\n<p>TMD 气人</p>\n<p>加油吧！快要跑路了！</p>\n</body></html>",
            "tags": [
                "小世界✨",
                "自我提升",
                "自我提升"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/bee4fbea.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/bee4fbea.html",
            "title": "【热辣滚烫】You Only Live Once!",
            "date_published": "2024-04-20T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起</h2>\n<p>今天看了电影《热辣滚烫》</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/u=3197228552,228360321&amp;fm=30&amp;app=106&amp;f=JPEG.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>真的很励志。</p>\n</blockquote>\n<p>电影讲述的是乐莹（贾玲）毕业后在家宅十年后，遭受种种打击后励志打完一场拳击比赛，最终通过一年的努力完成蜕变的故事。</p>\n<h2 id=\"拼搏\"><a class=\"anchor\" href=\"#拼搏\">#</a> 拼搏</h2>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102618.png\" alt=\"微信截图_20240421102618\"></p>\n<p>看到这里我也在拷问自己：😭</p>\n<blockquote>\n<p>我赢过吗？</p>\n<p>哪怕一次！</p>\n</blockquote>\n<h2 id=\"绝望\"><a class=\"anchor\" href=\"#绝望\">#</a> 绝望</h2>\n<p>乐莹在</p>\n<blockquote>\n<p>男友劈腿闺蜜</p>\n<p>妹妹想要房产</p>\n<p>朋友欺骗利用</p>\n<p>拳击教练事后概不负责</p>\n</blockquote>\n<p>四重打击下彻底绝望，跳楼未果后，选择赢一次！💖</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103101.png\" alt=\"微信截图_20240421103101\"></p>\n<h2 id=\"汗水\"><a class=\"anchor\" href=\"#汗水\">#</a> 汗水</h2>\n<p>开启了自己热辣滚烫的奋斗！👟</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102655.png\" alt=\"微信截图_20240421102655\"></p>\n<h2 id=\"不弃\"><a class=\"anchor\" href=\"#不弃\">#</a> 不弃</h2>\n<p>经历春夏秋冬🍀🍁🍂🍃，四季变迁。这一天终于到来！</p>\n<p>乐莹迈向赛场，内心早已坚定，当初的乐莹不复存在。【泪目😭过往的经历，四季的汗水浮现】</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102809.png\" alt=\"微信截图_20240421102809\"></p>\n<p>面对职业拳击手，乐莹应声倒地。</p>\n<p>但！</p>\n<p>她并没输。</p>\n<p>因为只要完整打完拳击比赛，就已经赢了！【泪目😭】</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102958.png\" alt=\"微信截图_20240421102958\"></p>\n<h2 id=\"吸引\"><a class=\"anchor\" href=\"#吸引\">#</a> 吸引</h2>\n<p>打完比赛回家时，曾抛弃自己的健身教练又来约乐莹吃饭。</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103223.png\" alt=\"微信截图_20240421103223\"></p>\n<p>乐莹内心早已充盈。</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103303.png\" alt=\"微信截图_20240421103303\"></p>\n<p>不再是当初满眼是你的女孩。</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103349.png\" alt=\"微信截图_20240421103349\"></p>\n<h2 id=\"未来\"><a class=\"anchor\" href=\"#未来\">#</a> 未来</h2>\n<blockquote>\n<p>可是</p>\n<p>未来还有很多机会，对吗？</p>\n</blockquote>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103428.png\" alt=\"微信截图_20240421103428\"></p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103447-17136816056232.png\" alt=\"微信截图_20240421103447\"></p>\n<h2 id=\"撒花\"><a class=\"anchor\" href=\"#撒花\">#</a> 撒花</h2>\n<p>一年的历程历历在目，太佩服贾玲了。我也可以吗？</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103519.png\" alt=\"微信截图_20240421103519\"></p>\n<p>+++</p>\n<h2 id=\"yolo\"><a class=\"anchor\" href=\"#yolo\">#</a> YOLO</h2>\n<p>You Only Live Once!</p>\n<p>你只活一次！</p>\n<p>+++</p>\n<p>结束！大家可以返回文章了。</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/640.webp\" alt=\"640\"></p>\n<p>如果看到了这里：那么我想和你交个朋友！</p>\n<p><strong>未来规划：🎀</strong></p>\n<p>真的哭了。</p>\n<p>觉得自己又何尝不是之前的乐莹呢？</p>\n<blockquote>\n<p>喜欢的事没勇气去做</p>\n<p>喜欢的人不喜欢自己</p>\n<p>浑浑噩噩一年又一年</p>\n<p>下定的决心破了又破</p>\n<p>长相不出众邋里邋遢</p>\n<p>学习没学好普普通通</p>\n<p>玩也没玩明白不开朗</p>\n<p>程序员盯电脑要捉瞎</p>\n<p>久坐身体也每况日下</p>\n</blockquote>\n<p>今天是农历三月十三，真的刚好 24 年整。🎥</p>\n<p>回想过去 24 年的经历，我又何尝不是乐莹呢？</p>\n<p>唯一坚持下来的或许就是</p>\n<blockquote>\n<p>活着！</p>\n</blockquote>\n<p>可我真的甘心这样吗？</p>\n<p>渴望的爱情会到来吗？</p>\n<p>升职加薪会轮到我吗？</p>\n<p>😭</p>\n<p>+++</p>\n<p>看了《热辣滚烫》</p>\n<p>我想，一切都有了答案！🏮</p>\n<blockquote>\n<p>放弃那个很喜欢的人！</p>\n<p>丢掉那些坏习惯！</p>\n<p>不再管他升职加薪！</p>\n<p>内心坚定不再迷茫！</p>\n</blockquote>\n<p>我要做的只有一件事：</p>\n<p><strong>遇见更好的自己！🎖</strong></p>\n<blockquote>\n<p>不再去想如何讨好她</p>\n<p>只剩下提升自己</p>\n<p>不再去自我怀疑</p>\n<p>只是去做</p>\n<p>不再精神内耗</p>\n<p>都是 NPC</p>\n</blockquote>\n<p>乐莹可以一年蜕变！</p>\n<p><strong>我</strong></p>\n<p><strong>也可以！</strong></p>\n<p>因为我们，只活一次！</p>\n<p>+++</p>\n<p>写下这篇日记</p>\n<p>是为了当自己坚持不下去时，想要放弃时，来这里看看。</p>\n<p><strong>警醒自己，YOLO！</strong></p>\n<p>+++</p>\n<p><strong>规划：</strong>【不用太苛刻自己】</p>\n<ul>\n<li>英语：每天早上刷墨墨背单词</li>\n<li>舞蹈：每周三 &amp; 周日去舞蹈室学 Hiphop</li>\n<li>健身：每天晚上 7 点公园跑步 &amp; 21 点 keep</li>\n<li>护肤：早晚坚持护肤补水防晒</li>\n<li>穿搭：跟着舞蹈老师学穿搭</li>\n<li>饮食：戒辣，戒糖</li>\n<li>攒钱：每月攒下 3000</li>\n<li>文章：筹划一个 AutoSar 的专栏</li>\n<li>视频：哈哈哈等学会跳舞再说吧</li>\n<li>社交：每周都认识一些新朋友</li>\n</ul>\n<p>就这样了！【背英语断了一天就断了，没什么大不了的，明天继续背】</p>\n<p>放平心态才能长久！</p>\n<p>+++</p>\n<p>加油！柴林峰，You Only Live Once！去活出你想要的生活吧！</p>\n<p>相信，当我变成更好的自己后，终将邂逅属于自己的爱情！</p>\n<p><img data-src=\"../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/640%20(1).webp\" alt=\"640 (1)\"></p>\n<p>2025 年 4 月 21 日</p>\n<p>记得打开这篇文章。</p>\n<p>记得以一个全新的自己打开这篇文章。</p>\n<p><strong>我</strong></p>\n<p><strong>在未来等你！</strong></p>\n<p>-flechazo</p>\n</body></html>",
            "tags": [
                "小世界✨",
                "自我提升",
                "自我提升"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cbed58a6.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cbed58a6.html",
            "title": "小柴带你学AutoSar总目录",
            "date_published": "2024-04-20T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>工作了一段时间了，真的就发现网上没有一个系统一点的 AutoSar 讲解吗？</p>\n<p>算了，小柴自己来吧！当作整理知识啦～</p>\n<p>个人建议做嵌入式的都可以学习一下！不只是汽车行业！代码和思想真的不分行业！</p>\n<h2 id=\"小柴带你学autosar总目录\"><a class=\"anchor\" href=\"#小柴带你学autosar总目录\">#</a> 【小柴带你学 AutoSar】总目录</h2>\n<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>专栏目标：系列讲解车载软件 Autosar 的方方面面</p>\n<p>适合职业：嵌入式软件开发</p>\n<p>内容声明：此专栏内容仅供参考学习</p>\n<p>更新说明：工作较忙，内容不定期更新</p>\n<p>笔者笔名：flechazo / 柴大大学长</p>\n<h3 id=\"资料下载\"><a class=\"anchor\" href=\"#资料下载\">#</a> 资料下载</h3>\n<p>官网获取：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXV0b3Nhci5vcmcv\">https://www.autosar.org/</span></p>\n<p><img data-src=\"../../../img.assets/24-04-21%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E6%80%BB%E7%9B%AE%E5%BD%95.assets/image-20240423210242962.png\" alt=\"image-20240423210242962\"></p>\n<p>王子号获取：柴大大学长【私信：<strong>AutoSar</strong>】</p>\n<p>VVX 获取：18339963582</p>\n<p>可油可油👗获取：546305967</p>\n<h3 id=\"交流专区\"><a class=\"anchor\" href=\"#交流专区\">#</a> 交流专区</h3>\n<p>VVX👗：18339963582</p>\n<p>&lt;img src=\"../../../img.assets/24-04-21%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E6%80%BB%E7%9B%AE%E5%BD%95.assets/bbb80a90746ed3ed98bdc8bd3fa8e8d.jpg\" alt=\"bbb80a90746ed3ed98bdc8bd3fa8e8d\" style=\"zoom:25%;\" /&gt;</p>\n<p>可油可油👗：546305967</p>\n<h3 id=\"小柴带你学autosar一-基础知识篇\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇\">#</a> 【小柴带你学 AutoSar】一、基础知识篇</h3>\n<h5 id=\"小柴带你学autosar一-基础知识篇1概念和目标\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇1概念和目标\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82OTU4MzAzMjM=\">【小柴带你学 AutoSar】一、基础知识篇:（1）概念和目标</span></h5>\n<h5 id=\"小柴带你学autosar一-基础知识篇2autosar架构\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇2autosar架构\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82OTczMDE0NDg=\">【小柴带你学 AutoSar】一、基础知识篇:（2）AutoSar 架构</span></h5>\n<h5 id=\"小柴带你学autosar一-基础知识篇3c语言基础\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇3c语言基础\">#</a> 【小柴带你学 AutoSar】一、基础知识篇:（3）C 语言基础</h5>\n<h5 id=\"小柴带你学autosar一-基础知识篇4编译\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇4编译\">#</a> 【小柴带你学 AutoSar】一、基础知识篇:（4）编译</h5>\n<h5 id=\"小柴带你学autosar一-基础知识篇5cmake基础\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇5cmake基础\">#</a> 【小柴带你学 AutoSar】一、基础知识篇:（5）cmake 基础</h5>\n<h5 id=\"小柴带你学autosar一-基础知识篇6车规级mcu\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇6车规级mcu\">#</a> 【小柴带你学 AutoSar】一、基础知识篇:（6）车规级 MCU</h5>\n<h5 id=\"小柴带你学autosar一-基础知识篇7术语\"><a class=\"anchor\" href=\"#小柴带你学autosar一-基础知识篇7术语\">#</a> 【小柴带你学 AutoSar】一、基础知识篇:（7）术语</h5>\n<h3 id=\"小柴带你学autosar二-架构篇\"><a class=\"anchor\" href=\"#小柴带你学autosar二-架构篇\">#</a> 【小柴带你学 AutoSar】二、架构篇</h3>\n<h5 id=\"小柴带你学autosar二-架构篇1cpclassic-platform\"><a class=\"anchor\" href=\"#小柴带你学autosar二-架构篇1cpclassic-platform\">#</a> 【小柴带你学 AutoSar】二、架构篇:（1）CP (Classic Platform)</h5>\n<h5 id=\"小柴带你学autosar二-架构篇2apadaptive-platform\"><a class=\"anchor\" href=\"#小柴带你学autosar二-架构篇2apadaptive-platform\">#</a> 【小柴带你学 AutoSar】二、架构篇:（2）AP (Adaptive Platform)</h5>\n<h3 id=\"小柴带你学autosar三-标准和规范篇\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇</h3>\n<h5 id=\"小柴带你学autosar三-标准和规范篇1general\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇1general\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇:（1）General</h5>\n<h5 id=\"小柴带你学autosar三-标准和规范篇2bswgeneral\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇2bswgeneral\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇:（2）BSWGeneral</h5>\n<h5 id=\"小柴带你学autosar三-标准和规范篇3modemanagement\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇3modemanagement\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇:（3）ModeManagement</h5>\n<h5 id=\"小柴带你学autosar三-标准和规范篇4applicationinterfaces\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇4applicationinterfaces\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇:（4）ApplicationInterfaces</h5>\n<h5 id=\"小柴带你学autosar三-标准和规范篇5rte\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇5rte\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇:（5）RTE</h5>\n<h5 id=\"小柴带你学autosar三-标准和规范篇6basicsoftware\"><a class=\"anchor\" href=\"#小柴带你学autosar三-标准和规范篇6basicsoftware\">#</a> 【小柴带你学 AutoSar】三、标准和规范篇:（6）BasicSoftware</h5>\n<h3 id=\"小柴带你学autosar四-工具链篇\"><a class=\"anchor\" href=\"#小柴带你学autosar四-工具链篇\">#</a> 【小柴带你学 AutoSar】四、工具链篇</h3>\n<h5 id=\"小柴带你学autosar四-工具链篇1davinci\"><a class=\"anchor\" href=\"#小柴带你学autosar四-工具链篇1davinci\">#</a> 【小柴带你学 AutoSar】四、工具链篇:（1）Davinci</h5>\n<h5 id=\"小柴带你学autosar四-工具链篇2canoe\"><a class=\"anchor\" href=\"#小柴带你学autosar四-工具链篇2canoe\">#</a> 【小柴带你学 AutoSar】四、工具链篇:（2）Canoe</h5>\n<h5 id=\"小柴带你学autosar四-工具链篇3cvi\"><a class=\"anchor\" href=\"#小柴带你学autosar四-工具链篇3cvi\">#</a> 【小柴带你学 AutoSar】四、工具链篇:（3）CVI</h5>\n<h5 id=\"小柴带你学autosar四-工具链篇4matlab\"><a class=\"anchor\" href=\"#小柴带你学autosar四-工具链篇4matlab\">#</a> 【小柴带你学 AutoSar】四、工具链篇:（4）Matlab</h5>\n<h5 id=\"小柴带你学autosar四-工具链篇5etas\"><a class=\"anchor\" href=\"#小柴带你学autosar四-工具链篇5etas\">#</a> 【小柴带你学 AutoSar】四、工具链篇:（5）ETAS</h5>\n<h3 id=\"小柴带你学autosar五-进阶篇\"><a class=\"anchor\" href=\"#小柴带你学autosar五-进阶篇\">#</a> 【小柴带你学 AutoSar】五、进阶篇</h3>\n<h5 id=\"小柴带你学autosar五-进阶篇1c语言进阶\"><a class=\"anchor\" href=\"#小柴带你学autosar五-进阶篇1c语言进阶\">#</a> 【小柴带你学 AutoSar】五、进阶篇:（1）C 语言进阶</h5>\n<h5 id=\"小柴带你学autosar五-进阶篇2cmake进阶\"><a class=\"anchor\" href=\"#小柴带你学autosar五-进阶篇2cmake进阶\">#</a> 【小柴带你学 AutoSar】五、进阶篇:（2）cmake 进阶</h5>\n<h3 id=\"小柴带你学autosar六-应用和实践篇\"><a class=\"anchor\" href=\"#小柴带你学autosar六-应用和实践篇\">#</a> 【小柴带你学 AutoSar】六、应用和实践篇</h3>\n<h5 id=\"小柴带你学autosar六-应用和实践篇1团队协作\"><a class=\"anchor\" href=\"#小柴带你学autosar六-应用和实践篇1团队协作\">#</a> 【小柴带你学 AutoSar】六、应用和实践篇:（1）团队协作</h5>\n<h3 id=\"小柴带你学autosar更新ing\"><a class=\"anchor\" href=\"#小柴带你学autosar更新ing\">#</a> 【小柴带你学 AutoSar】更新 ing</h3>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1558dc78.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1558dc78.html",
            "title": "QT接收电脑串口的数据",
            "date_published": "2024-04-14T16:00:00.000Z",
            "content_html": "<html><head></head><body><h3 id=\"flechazo的小知乎欢迎大家造访啦\"><a class=\"anchor\" href=\"#flechazo的小知乎欢迎大家造访啦\">#</a> flechazo 的小知乎，欢迎大家造访啦😘</h3>\n<p></p><div class=\"links\"><div class=\"item\" title=\"flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p>书接上回 QT 使用定时器</p>\n<h3 id=\"使用-qt读取电脑串口数据\"><a class=\"anchor\" href=\"#使用-qt读取电脑串口数据\">#</a> 使用 Qt 读取电脑串口数据</h3>\n<pre><code class=\"language-c++\">#include &lt;QtSerialPort/QSerialPort&gt;\n#include &lt;QtSerialPort/QSerialPortInfo&gt;\n</code></pre>\n<h3 id=\"设置串口\"><a class=\"anchor\" href=\"#设置串口\">#</a> 设置串口</h3>\n<pre><code class=\"language-c++\">/* 搜索可用的串口，并添加到串口组合框 */\nvoid MainWindow::SearchSerialPorts()\n{\n    ui-&gt;comboBoxPort-&gt;clear();\n    foreach(const QSerialPortInfo &amp;info,QSerialPortInfo::availablePorts())\n    {\n        if(ui-&gt;comboBoxPort-&gt;count()&gt;0){\n            for(int idx=0; idx&lt;ui-&gt;comboBoxPort-&gt;count(); idx++){\n                QString itemName = ui-&gt;comboBoxPort-&gt;itemText(idx);\n                QString itemCode = ui-&gt;comboBoxPort-&gt;itemData(idx, Qt::UserRole).toString();\n                /*  do other things */\n                if(itemName!=info.portName()){\n                   ui-&gt;comboBoxPort-&gt;addItem(info.portName());//+info.description());\n                }\n            }\n        }else{\n            ui-&gt;comboBoxPort-&gt;addItem(info.portName());//+info.description());\n        }\n    }\n}\n\n/* 实现软件参变量的初始化设定 */\nvoid MainWindow::InitialSetting()\n{\n    /* 填充串口号组合框 */\n    SearchSerialPorts();\n\n    /* 填充串口波特率 */\n    ui-&gt;comboBoxBaud-&gt;addItem(\"9600\");\n    ui-&gt;comboBoxBaud-&gt;addItem(\"14400\");\n    ui-&gt;comboBoxBaud-&gt;addItem(\"19200\");\n    ui-&gt;comboBoxBaud-&gt;addItem(\"57600\");\n    ui-&gt;comboBoxBaud-&gt;addItem(\"115200\");\n    ui-&gt;comboBoxBaud-&gt;setCurrentIndex(4);\n\n    /* 填充串口数据位 */\n    ui-&gt;comboBoxData-&gt;addItem(\"7位\");\n    ui-&gt;comboBoxData-&gt;addItem(\"8位\");\n    ui-&gt;comboBoxData-&gt;addItem(\"9位\");\n    ui-&gt;comboBoxData-&gt;setCurrentIndex(1);\n\n    /* 填充串口校验位 */\n    ui-&gt;comboBoxParity-&gt;addItem(\"无校验\");\n    ui-&gt;comboBoxParity-&gt;addItem(\"奇校验\");\n    ui-&gt;comboBoxParity-&gt;addItem(\"偶校验\");\n\n    /* 填充串口停止位 */\n    ui-&gt;comboBoxStop-&gt;addItem(\"1位\");\n    ui-&gt;comboBoxStop-&gt;addItem(\"1.5位\");\n    ui-&gt;comboBoxStop-&gt;addItem(\"2位\");\n\n    /* 为变量赋初值 */\n    receivedBytes=0;\n    transmitBytes=0;\n}\n</code></pre>\n<h3 id=\"打开串口\"><a class=\"anchor\" href=\"#打开串口\">#</a> 打开串口</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 打开串口 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionConnect_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setPortName</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-&gt;</span>comboBoxPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">currentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>ReadWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/* 打开串口成功 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/* 设置波特率 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setBaudRate</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-&gt;</span>comboBoxBaud<span class=\"token operator\">-&gt;</span><span class=\"token function\">currentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/* 设置数据位数 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-&gt;</span>comboBoxData<span class=\"token operator\">-&gt;</span><span class=\"token function\">currentIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setDataBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>Data8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/* 设置奇偶校验 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-&gt;</span>comboBoxParity<span class=\"token operator\">-&gt;</span><span class=\"token function\">currentIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setParity</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>NoParity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/* 设置停止位 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ui<span class=\"token operator\">-&gt;</span>comboBoxStop<span class=\"token operator\">-&gt;</span><span class=\"token function\">currentIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>OneStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setStopBits</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>TwoStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/* 设置流控制 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        serialPort<span class=\"token operator\">-&gt;</span><span class=\"token function\">setFlowControl</span><span class=\"token punctuation\">(</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>NoFlowControl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/* 连接槽函数 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>serialPort<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QSerialPort<span class=\"token double-colon punctuation\">::</span>readyRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>ReadSerialData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">/* 设置控件可否使用 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        ui<span class=\"token operator\">-&gt;</span>actionConnect<span class=\"token operator\">-&gt;</span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        ui<span class=\"token operator\">-&gt;</span>actionClose<span class=\"token operator\">-&gt;</span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ui<span class=\"token operator\">-&gt;</span>actionRefresh<span class=\"token operator\">-&gt;</span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/* 打开失败提示 */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">QMessageBox</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token function\">tr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">tr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打开串口失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>QMessageBox<span class=\"token double-colon punctuation\">::</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h3 id=\"读取数据\"><a class=\"anchor\" href=\"#读取数据\">#</a> 读取数据</h3>\n<pre><code class=\"language-c++\">/* 从串口接收数据 */\nvoid MainWindow::ReadSerialData()\n{\n    /* 用于接收超时处理 */\n    flechazoTime_ms = 0;\n    receiveflag=true;\n    /* 先把接收到的数据存到这里 */\n    rxDatas+=serialPort-&gt;readAll();\n}\n</code></pre>\n<h3 id=\"超时处理\"><a class=\"anchor\" href=\"#超时处理\">#</a> 超时处理</h3>\n<pre><code class=\"language-c++\">/* 使用定时器定时处理哦https://zhuanlan.zhihu.com/p/690750411 */\nvoid MainWindow::recievedata()\n{\n    flechazoTime_ms++;\n    /* 检查是否接收到数据 并有2ms的超时 */\n    if((receiveflag)&amp;&amp;(flechazoTime_ms&gt;=2))\n    {\n        receiveflag=false;\n        if(ui-&gt;checkBoxRecieve-&gt;isChecked()) //十六进制显示\n        {\n             context = rxDatas.toHex();\n             context = context.toUpper();\n\n             QByteArray buffer,tmp, src;\n             buffer = QByteArray::fromHex(context.toLatin1());\n             for(int i=0;i&lt;rxDatas.size();i++){\n                cmdprotocolparsing.byte[i] = buffer[i];\n             }\n             vprotocolcmdparsing(\"\",rxDatas.size());\n\n             src = context.toLatin1();\n             for (int i = 0; i &lt; src.size(); i++ )\n             {\n                 tmp.append(src.at(i));\n                 if (i % 2) tmp.append(0x20);\n             }\n             context = tmp;\n        }\n        else    //ASCII显示\n        {\n            context = QString::fromLocal8Bit(rxDatas);\n        }\n\n        QString timeStrLine=\"[\"+QDateTime::currentDateTime().toString(\"hh:mm:ss\")+\"][接收]:🐬 \";\n        context = timeStrLine+context;//+\"\\n\\r\";\n\n        QString content = \"&lt;span style=\\\" color:blue;\\\"&gt;\"+context+\"&lt;/span&gt;\";\n        ui-&gt;textBrowser-&gt;append(content);\n\n        receivedBytes=receivedBytes+rxDatas.size();\n        ui-&gt;lcdNumberRecieve-&gt;display(receivedBytes);\n\n        ui-&gt;statusbar-&gt;showMessage(tr(\"成功读取%1字节数据\").arg(rxDatas.size()));\n        rxDatas.clear();\n    }\n}\n</code></pre>\n<h3 id=\"发送数据\"><a class=\"anchor\" href=\"#发送数据\">#</a> 发送数据</h3>\n<pre><code class=\"language-c++\">void MainWindow::WriteSerialData(QString qstring_context)\n{\n    /* 处理成16进制 */\n    QByteArray flechazoSend_buffer;\n    QString flechazoSend_msg=\"\";\n    if ( qstring_context.indexOf(\" \") &gt; 0)\n    {\n        bool ok;\n        char data;\n        QStringList list;\n        list = qstring_context.split(\" \");\n        for (int i = 0; i &lt; list.count(); i++)\n        {\n            if (list.at(i) == \" \")\n                continue;\n            if (list.at(i).isEmpty())\n                continue;\n            data = (char)list.at(i).toInt(&amp;ok, 16);\n            if (!ok)\n            {\n                QMessageBox::information(this, tr(\"提示消息\"), tr(\"输入的数据格式有错误！\"), QMessageBox::Ok);\n                return;\n            }\n            flechazoSend_buffer.append(data);\n        }\n        flechazoSend_msg = qstring_context.toUpper();\n    }\n    else\n    {\n        QByteArray tmp, src,myqsarraydata;\n        myqsarraydata=qstring_context.toLatin1();\n        flechazoSend_buffer = QByteArray::fromHex(myqsarraydata);\n        src = qstring_context.toLatin1();\n        for (int i = 0; i &lt; src.size(); i++ )\n        {\n            tmp.append(src.at(i));\n            if (i % 2) tmp.append(0x20);\n        }\n        flechazoSend_msg = tmp;\n    }\n\n    /* 发送数据 */\n    if (serialPort &amp;&amp; serialPort-&gt;isOpen() &amp;&amp; serialPort-&gt;isWritable())\n    {\n        qDebug()&lt;&lt;\"**************************buf : \"&lt;&lt;flechazoSend_buffer.toHex();\n        QString timeStrLine=\"[\"+QDateTime::currentDateTime().toString(\"hh:mm:ss\")+\"][发送]:🚀 \";\n        QString content = \"&lt;span style=\\\" color:red;\\\"&gt;\"+timeStrLine +flechazoSend_msg+\"\\n\\r&lt;/span&gt;\";\n        ui-&gt;textBrowser-&gt;append(content);\n\n        /* 向串口发送数据 */\n        serialPort-&gt;write(flechazoSend_buffer);\n        ui-&gt;statusbar-&gt;showMessage(tr(\"发送数据成功\"));\n\n        /* 界面控制 */\n        ui-&gt;textBrowser-&gt;setTextColor(Qt::red);\n        transmitBytes +=flechazoSend_buffer.size();\n        ui-&gt;lcdNumberSend-&gt;display(transmitBytes);\n    }\n}\n\n</code></pre>\n<h3 id=\"关闭串口\"><a class=\"anchor\" href=\"#关闭串口\">#</a> 关闭串口</h3>\n<pre><code class=\"language-c++\">/* 关闭串口 */\nvoid MainWindow::on_actionClose_triggered()\n{\n    serialPort-&gt;clear();\n    serialPort-&gt;close();\n\n    /* 设置控件可否使用 */\n    ui-&gt;actionConnect-&gt;setEnabled(true);\n    ui-&gt;actionClose-&gt;setEnabled(false);\n    ui-&gt;actionRefresh-&gt;setEnabled(true);\n}\n</code></pre>\n<p>完结撒花🍁</p>\n<p><strong>大家有问题欢迎向我提问哦！</strong></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/829c4b27.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/829c4b27.html",
            "title": "QT定时器的使用",
            "date_published": "2024-04-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><h3 id=\"flechazo的小知乎欢迎大家造访啦\"><a class=\"anchor\" href=\"#flechazo的小知乎欢迎大家造访啦\">#</a> flechazo 的小知乎，欢迎大家造访啦😘</h3>\n<p></p><div class=\"links\"><div class=\"item\" title=\"flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<h2 id=\"qt中使用定时器\"><a class=\"anchor\" href=\"#qt中使用定时器\">#</a> QT 中使用定时器</h2>\n<h3 id=\"初见\"><a class=\"anchor\" href=\"#初见\">#</a> 初见</h3>\n<p>为啥子要用定时器呢？因为喜欢哈哈哈！</p>\n<p>定时器在软件开发中有着广泛的应用，其主要作用包括但不限于以下几个方面：</p>\n<ol>\n<li><strong>执行周期性任务</strong>：定时器可以设置一个时间间隔，定时触发任务的执行。这种周期性的执行可以用于定期更新界面、定时采集数据、定时发送心跳包等场景。</li>\n<li><strong>延迟执行任务</strong>：定时器也可以用于延迟执行任务，即在一定的时间后触发任务的执行。这种延迟执行可以用于实现一些需要等待一段时间后才能执行的操作，比如启动动画、显示提示信息等。</li>\n<li><strong>实现超时处理</strong>：在网络通信、用户交互等场景中，经常需要设置超时时间来处理未在规定时间内完成的操作，定时器可以用于监测超时并执行相应的处理逻辑。</li>\n<li><strong>定时刷新数据</strong>：对于需要定时更新数据的应用，比如实时监控系统、股票行情等，定时器可以周期性地触发数据刷新操作，保持数据的实时性。</li>\n<li><strong>节省资源</strong>：定时器可以在需要执行任务时启动，任务执行完毕后自动停止，有效地节省了系统资源和能耗。</li>\n</ol>\n<p>总的来说，定时器是一种非常有用的工具，可以帮助我们实现各种时间相关的功能，提高程序的灵活性和用户体验。在软件开发中合理使用定时器能够提高系统的效率和性能。</p>\n<h3 id=\"了解\"><a class=\"anchor\" href=\"#了解\">#</a> 了解</h3>\n<p>先来看一哈思路</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个指向 QTimer 对象的指针 flechazoTimer_s</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>QTimer <span class=\"token operator\">*</span>flechazoTimer_s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在堆上分配一个新的 QTimer 对象，并将其地址赋给 flechazoTimer_s 指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flechazoTimer_s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> QTimer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 启动定时器，设置定时器的间隔为 1000 毫秒（1 秒）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flechazoTimer_s<span class=\"token operator\">-&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 连接定时器的 timeout 信号到 MainWindow 类的 vflechazo_s 槽函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 这意味着当定时器超时时，将调用 MainWindow 类的 vflechazo_s 函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>flechazoTimer_s<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>QTimer<span class=\"token double-colon punctuation\">::</span>timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>MainWindow<span class=\"token double-colon punctuation\">::</span>vflechazoTimerout_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// MainWindow 类的 vflechazo_s 槽函数的声明和实现</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">vflechazoTimerout_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 在这里执行定时任务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h3 id=\"熟悉\"><a class=\"anchor\" href=\"#熟悉\">#</a> 熟悉</h3>\n<p>经过上述的思路，我们就可以开始玩耍了。</p>\n<p>定时器用起来真的很方便。</p>\n<p>我最开始用的时候呢是因为超时中断。做单片机的都知道，UART 里的中断是可以设定超时中断的。但在第一次接触 QT 时竟然没找到这个设定。使用起来很是不舒服。</p>\n<p>下次出一篇文章仔细介绍</p>\n<h3 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码</h3>\n<p>mainwindow.h</p>\n<pre><code class=\"language-c++\">#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include &lt;QTime&gt;\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    MainWindow(QWidget *parent = nullptr);\n    ~MainWindow();\n    \n    QTimer *flechazoTimer_s;\n    void vflechazoTimerout_s(void);\n\nprivate slots:\n\nprivate:\n    Ui::MainWindow *ui;\n};\n\n#endif // MAINWINDOW_H\n</code></pre>\n<p>mainwindow.cpp</p>\n<pre><code class=\"language-c++\">#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui-&gt;setupUi(this);\n\n    flechazoTimer_s = new QTimer;\n    flechazoTimer_s-&gt;start(1000);\n\n    connect(flechazoTimer_s, &amp;QTimer::timeout,this,&amp;MainWindow::vflechazoTimerout_s);\n}\n\n//定时器中断-&gt;1s进入1次\nvoid MainWindow::vflechazoTimerout_s(void)\n{\n    // 在这里执行定时任务\n}\n\n</code></pre>\n<p>好啦！有了定时器想干嘛就干嘛了！熟悉的单片机的味道回来啦哈哈哈</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1a8fe83d.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1a8fe83d.html",
            "title": "QT实用工具之DOC转PDF",
            "date_published": "2024-03-18T16:00:00.000Z",
            "content_html": "<html><head></head><body><h3 id=\"flechazo的小知乎欢迎大家造访啦\"><a class=\"anchor\" href=\"#flechazo的小知乎欢迎大家造访啦\">#</a> flechazo 的小知乎，欢迎大家造访啦😘</h3>\n<p></p><div class=\"links\"><div class=\"item\" title=\"flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<h2 id=\"使用-qt-将-word-文档转换为-pdf\"><a class=\"anchor\" href=\"#使用-qt-将-word-文档转换为-pdf\">#</a> 使用 Qt 将 Word 文档转换为 PDF</h2>\n<p>在本教程中，我们将学习如何使用 Qt 框架将 Word 文档转换为 PDF 格式。这可以通过与 Microsoft Word 应用程序进行交互，利用其功能来实现。在本示例中，我们将演示如何使用 Qt 的相关类和 ActiveX 技术来完成这一任务。</p>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<h3 id=\"1-包含必要的头文件和创建-qapplication-对象\"><a class=\"anchor\" href=\"#1-包含必要的头文件和创建-qapplication-对象\">#</a> 1. 包含必要的头文件和创建 QApplication 对象</h3>\n<p>首先，我们需要包含必要的头文件并创建 QApplication 对象，以便使用 Qt 框架的功能。</p>\n<pre><code class=\"language-c++\">#include &lt;QAxObject&gt;\n#include &lt;QAxWidget&gt;\n#include &lt;QDebug&gt;\n#include &lt;QApplication&gt;\n#include &lt;QFile&gt;\n#include &lt;QDir&gt;\nint main(int argc, char *argv[]) {\n    QApplication a(argc, argv);\n\n    // 以下是后续的代码...\n}\n</code></pre>\n<h3 id=\"2-检查文件夹是否存在并获取文件列表\"><a class=\"anchor\" href=\"#2-检查文件夹是否存在并获取文件列表\">#</a> 2. 检查文件夹是否存在并获取文件列表</h3>\n<p>接下来，我们使用  <code>QDir</code>  类来检查指定路径下的文件夹是否存在，并获取该文件夹下的所有文件信息列表。</p>\n<pre><code class=\"language-c++\">QDir dir(\"D:\\\\your\\\\directory\\\\path\");\nif(!dir.exists()){\n    qDebug() &lt;&lt; \"Directory error\";\n    return 0;\n}\n\ndir.setFilter(QDir::Files | QDir::NoSymLinks);\nQFileInfoList list = dir.entryInfoList();\n</code></pre>\n<h3 id=\"3-逐个处理-word-文档并导出为-pdf\"><a class=\"anchor\" href=\"#3-逐个处理-word-文档并导出为-pdf\">#</a> 3. 逐个处理 Word 文档并导出为 PDF</h3>\n<p>现在，我们将逐个打开 Word 文档，并将其导出为 PDF 格式。</p>\n<pre><code class=\"language-c++\">for(int i = 0; i &lt; list.size(); i++){\n    QFileInfo fileInfo = list.at(i);\n    QString fileName = fileInfo.fileName();\n    QString filePath = fileInfo.absoluteFilePath();\n    QString dirName = dir.path();\n\n    QAxWidget word(\"Word.Application\");\n    word.setProperty(\"Visible\", false);\n    QAxObject * documents = word.querySubObject(\"Documents\");\n    QAxObject * document = documents-&gt;querySubObject(\"Open(QString)\", filePath);\n\n    QVariant OutputFileName(dirName + \"/\" + fileName.mid(0, fileName.lastIndexOf(\".\")) + \".pdf\");\n    QVariant ExportFormat(17);  // 17 表示 PDF 格式\n    QVariant OpenAfterExport(false);\n\n    document-&gt;querySubObject(\"ExportAsFixedFormat(const QVariant&amp;,const QVariant&amp;,const QVariant&amp;)\",\n                             OutputFileName,\n                             ExportFormat,\n                             OpenAfterExport);\n\n    document-&gt;dynamicCall(\"Close(boolean)\",false);\n    word.dynamicCall(\"Quit (void)\");\n\n    qDebug() &lt;&lt; filePath + \" to PDF success\";\n}\n</code></pre>\n<h3 id=\"4-完成\"><a class=\"anchor\" href=\"#4-完成\">#</a> 4. 完成</h3>\n<p>最后，我们调用  <code>a.exec()</code>  来运行应用程序。</p>\n<pre><code class=\"language-c++\">return a.exec();\n</code></pre>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过本教程，我们学习了如何使用 Qt 框架和 ActiveX 技术将 Word 文档转换为 PDF 格式。这种方法可以轻松地集成到您的 Qt 项目中，并为用户提供方便的文档转换功能。</p>\n<p>希望本教程对您有所帮助，如果您有任何问题或疑问，请随时联系我哦。</p>\n<hr>\n<p>这样的教程可以帮助读者了解如何在 Qt 中使用 ActiveX 技术与 Word 进行交互，从而实现 Word 文档转换为 PDF 的功能。如果您需要对某些部分进行进一步解释或添加其他内容，请随时告诉我。</p>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<pre><code class=\"language-c++\">#include &lt;QAxObject&gt;\n#include &lt;QAxWidget&gt;\n#include &lt;QDebug&gt;\n#include &lt;QApplication&gt;\n#include &lt;QFile&gt;\n#include &lt;QDir&gt;\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    QDir dir(\"D:\\\\flechazo\\\\ProgramSourceCode\\\\flechazo\\\\25QTexample\\\\Qt\\\\DocxToPdfDemo\\\\doc\");\n    if(!dir.exists()){\n\n        qDebug() &lt;&lt; \"dir error\";\n        return 0;\n    }\n\n    dir.setFilter(QDir::Files | QDir::NoSymLinks);\n    QFileInfoList list = dir.entryInfoList();\n    for(int i = 0; i &lt; list.size(); i++){\n\n        QFileInfo fileInfo = list.at(i);\n        QString fileName = fileInfo.fileName();\n        QString filePath = fileInfo.absoluteFilePath();\n        QString dirName = dir.path();\n\n        QAxWidget word(\"Word.Application\");\n        word.setProperty(\"Visible\", false);\n        QAxObject * documents = word.querySubObject(\"Documents\");\n        QAxObject * document = documents-&gt;querySubObject(\"Open(QString)\", filePath);\n\n        QVariant OutputFileName(dirName + \"/\" + fileName.mid(0, fileName.lastIndexOf(\".\")) + \".pdf\");\n        QVariant ExportFormat(17);\n        QVariant OpenAfterExport(false);\n\n        document-&gt;querySubObject(\"ExportAsFixedFormat(const QVariant&amp;,const QVariant&amp;,const QVariant&amp;)\",\n                                 OutputFileName,\n                                 ExportFormat,\n                                 OpenAfterExport);\n\n        document-&gt;dynamicCall(\"Close(boolean)\",false);\n        word.dynamicCall(\"Quit (void)\");\n\n        qDebug() &lt;&lt; filePath + \" to pdf success\";\n    }\n\n    return a.exec();\n}\n\n</code></pre>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8be44650.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8be44650.html",
            "title": "编码技巧之dowhile的高级用法",
            "date_published": "2024-03-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><h3 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起</h3>\n<p>在 C 语言编程中，要将代码写的更高级一点，代码的逻辑更清晰，执行效率更高。在阅读 Autosar 的 EthSwt 模块时学到了一招。跟大家分分享一下！</p>\n<p>在 C 语言中， <code>do-while</code>  循环是一种常见的循环结构，与  <code>while</code>  循环不同之处在于它先执行循环体，然后再判断条件是否成立。这使得  <code>do-while</code>  循环特别适用于需要至少执行一次循环体的情况。本文将介绍  <code>do-while</code>  循环的多种高级用法，包括菜单选择、输入验证、游戏循环和提前退出等。</p>\n<h3 id=\"菜单选择\"><a class=\"anchor\" href=\"#菜单选择\">#</a> 菜单选择</h3>\n<p><code>do-while</code>  循环经常被用于实现菜单选择功能。通过在循环体内展示菜单选项，要求用户输入选择，并根据用户输入执行相应操作，直到用户选择退出为止。以下是一个简单的菜单选择示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> choice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 展示菜单</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1. Option 1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2. Option 2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3. Quit\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 用户选择</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your choice: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 根据选择执行相应操作</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 执行选项 1 对应的操作</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 执行选项 2 对应的操作</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 退出循环</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid choice, please try again.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>choice <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h3 id=\"输入验证\"><a class=\"anchor\" href=\"#输入验证\">#</a> 输入验证</h3>\n<p>利用  <code>do-while</code>  循环进行输入验证是另一个常见的用法。可以要求用户输入内容，并进行验证，直到输入符合要求为止。以下是一个输入正数的验证示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a positive number: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input. Please try again.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h3 id=\"游戏循环\"><a class=\"anchor\" href=\"#游戏循环\">#</a> 游戏循环</h3>\n<p>在游戏开发中， <code>do-while</code>  循环通常用于游戏主循环，确保游戏循环至少执行一次，并在每次迭代结束后检查退出条件。以下是一个简单的游戏循环示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> playAgain<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 游戏逻辑</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Do you want to play again? (y/n): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>playAgain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>playAgain <span class=\"token operator\">==</span> <span class=\"token char\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h3 id=\"提前退出\"><a class=\"anchor\" href=\"#提前退出\">#</a> 提前退出</h3>\n<p>通过结合  <code>do-while</code>  循环和  <code>continue</code>  语句，我们可以在代码执行出错时提前跳出当前迭代，优化代码执行的效率。以下是一个示例，演示了在  <code>do-while</code>  循环中遇到错误时使用  <code>continue</code>  来提前结束当前迭代：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 模拟需要输入并验证的操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a positive number: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> input <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input. Skipping to next iteration.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 提前结束当前迭代</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 条件二提前跳出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input. Skipping to next iteration.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 提前结束当前迭代</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 正确处理输入的情况</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input is valid: %d\\n\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 在这里可以继续添加其他需要执行的代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里使用 -1 作为退出条件示例</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>以上是  <code>do-while</code>  循环在 C 语言中多种用法的介绍，希望能帮助您更好地理解和应用这一循环结构。</p>\n<h3 id=\"autosar代码示例\"><a class=\"anchor\" href=\"#autosar代码示例\">#</a> Autosar 代码示例</h3>\n<p>说一下提前退出啦</p>\n<p>这里截取一段 Autosar 中的代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 用宏定义来优化代码结构 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">CHK_FUN_CONTINUE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>             </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">{</span>                                      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>int32<span class=\"token punctuation\">)</span>RT_ERR_OK <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">{</span>                                  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token expression\"><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>                      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">}</span>                                  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 可以使用 do {} while () 来优化代码执行效率 如果中间有一项执行失败就提前返回 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>RtkApiRet <span class=\"token function\">rtk_mirror_disable</span><span class=\"token punctuation\">(</span>uint32 unit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    RtkApiRet rtkRet <span class=\"token operator\">=</span> RT_ERR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">AUTOSAR_DEBUG_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PORT_MIRRORING_DISABLED\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/* Reset to the HW’s default values */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">CHK_FUN_CONTINUE</span><span class=\"token punctuation\">(</span>rtkRet<span class=\"token punctuation\">,</span> <span class=\"token function\">rtk_mirror_reset</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">CHK_FUN_CONTINUE</span><span class=\"token punctuation\">(</span>rtkRet<span class=\"token punctuation\">,</span> <span class=\"token function\">reg_write</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">,</span> TRAFFIC_MIRROR0_CONTROL2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">CHK_FUN_CONTINUE</span><span class=\"token punctuation\">(</span>rtkRet<span class=\"token punctuation\">,</span> <span class=\"token function\">reg_write</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">,</span> MIRROR0_PORT_EGRESS_FILTER_CONTROL<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">CHK_FUN_CONTINUE</span><span class=\"token punctuation\">(</span>rtkRet<span class=\"token punctuation\">,</span> <span class=\"token function\">reg_write</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">,</span> TRAFFIC_MIRROR0_SAMPLE_CONTROL<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u</span> <span class=\"token operator\">==</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> rtkRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>学会了嘛😜</p>\n<p>谢谢可爱的你能看到最后呢！</p>\n<p>爱你呀😍</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a0e7ce99.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a0e7ce99.html",
            "title": "编码技巧之如何高效地遍历",
            "date_published": "2024-02-25T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>缘起： 在 C 语言编程中，经常需要对数组进行遍历操作。</p>\n<p>通常有两种常见的方式：<strong>一种是使用索引进行遍历</strong>，<strong>另一种是使用指针进行遍历</strong>。</p>\n<p>本文将聚焦于比较这两种方式的效率差异，并阐述为什么指针遍历方式在大多数情况下更高效。</p>\n<p>+++</p>\n<p>首先看个例子吧：</p>\n<p>EfficiencyOfCodeExecution.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* file : EfficiencyOfCodeExecution.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>* Global Type Declaration</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">}</span> foo_struct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>* Global Function Implement</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/* 1. 声明结构体数组 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    foo_struct foo<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/* 2. 第一种遍历方式 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        foo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>a<span class=\"token operator\">=</span><span class=\"token number\">77</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        foo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>b<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        foo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/* 3. 第二种遍历方式 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    foo_struct <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    foo_struct <span class=\"token operator\">*</span>fend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    fend <span class=\"token operator\">=</span> foo <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>fp<span class=\"token operator\">=</span>foo<span class=\"token punctuation\">;</span>fp<span class=\"token operator\">!=</span>fend<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        fp<span class=\"token operator\">-&gt;</span>a <span class=\"token operator\">=</span> <span class=\"token number\">77</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        fp<span class=\"token operator\">-&gt;</span>b <span class=\"token operator\">=</span> <span class=\"token number\">88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        fp<span class=\"token operator\">-&gt;</span>c <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>* file : EfficiencyOfCodeExecution.c end!</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>****************************************************/</pre></td></tr></tbody></table></figure><p>上述的第二种指针的方式又高级又效率！</p>\n<p>主打一个高级感🚎</p>\n<p>还不用起来🎀</p>\n<p>那 为什么呢？</p>\n<p>索引遍历方式需要通过索引值来访问数组元素。每次迭代都需要进行索引值的计算，然后根据索引值进行内存地址的访问。</p>\n<p>这涉及到了额外的计算操作，增加了代码的复杂度和执行时间。</p>\n<p>相比之下，指针遍历方式直接通过指针进行内存地址的访问，无需进行额外的索引计算。</p>\n<p>指针递增操作由编译器自动完成，减少了不必要的计算开销。</p>\n<p>这使得指针遍历方式能够更快速地访问数组元素，提高了代码的执行效率。</p>\n<p>当然啦！这也不是绝对滴，在某些特殊情况下，索引遍历方式可能会更适合。</p>\n<p>例如，需要随机访问数组元素或具有特定的索引模式时，索引遍历方式可能更具优势。</p>\n<p>学会了嘛😜</p>\n<p>谢谢可爱的你能看到最后呢！</p>\n<p>爱你呀😍</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/563afaa7.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/563afaa7.html",
            "title": "编码技巧之如何优雅的解耦",
            "date_published": "2024-02-02T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>缘起： 在软件开发中，代码解耦是一项至关重要的技术。解耦意味着将相互依赖的模块或组件之间的耦合度降到最低，使得系统更加灵活、可扩展和易于维护。本文将介绍代码解耦的概念和重要性，并提供一些实用的解耦技巧。</p>\n<p>+++</p>\n<p>码代码就像盖楼！</p>\n<p>需要打地基打地基打地基！</p>\n<p>需要好框架，做好分层才能分工明确，条理不乱，容易维护！</p>\n<p>下面就来举个例子讲一下我单身 24 年悟出的经验吧！</p>\n<p>🍕🍔🍟🌭</p>\n<ol>\n<li>什么是代码耦合？ 代码耦合是指模块或组件之间的依赖程度。当一个模块直接依赖于另一个模块的具体实现细节时，就存在高耦合度。高耦合度会导致代码难以修改、测试和重用，增加了系统的复杂性。</li>\n<li>为什么要解耦代码？</li>\n</ol>\n<ul>\n<li>灵活性：解耦代码可以使系统更加灵活，当需求变化时，只需修改少量代码而不会对整个系统产生过大的影响。</li>\n<li>可扩展性：解耦代码可以降低模块之间的依赖关系，使得添加新功能或模块更加容易。</li>\n<li>可维护性：解耦代码可以使代码结构更清晰，易于理解和维护。同时，解耦也有助于减少错误的传播范围，提高代码的可靠性。</li>\n<li>可测试性：解耦代码使得单元测试和集成测试更加容易，通过独立测试每个模块，可以更准确地定位和修复问题。</li>\n</ul>\n<ol>\n<li>解耦技巧：</li>\n</ol>\n<ul>\n<li>使用接口或抽象类：将具体实现与接口或抽象类分离，其他模块只依赖于接口而不依赖于具体实现。这样，当需要修改实现时，只需修改实现类而无需修改依赖它的模块。</li>\n<li>事件驱动架构：使用事件机制来解耦模块之间的通信。一个模块触发事件，其他模块根据需要订阅并响应这些事件，从而实现模块之间的解耦。</li>\n<li>依赖注入：通过将依赖对象从外部传递给模块，使得模块不需要关心对象如何创建和管理。这种方式可以减少模块之间的直接依赖，提高可替换性和可测试性。</li>\n<li>领域驱动设计（DDD）：将代码组织为领域模型，将业务逻辑封装在领域对象中。这种方式可以使代码更加解耦、可读性更好，并且更贴近实际业务需求。</li>\n</ul>\n<p>结论： 代码解耦是构建灵活、可维护的软件的关键技术之一。通过使用接口、事件驱动架构、依赖注入和领域驱动设计等技巧，我们可以降低代码耦合度，提高系统的灵活性、可扩展性、可维护性和可测试性。在开发过程中，我们应该始终关注代码解耦，并将其视为提高软件质量和开发效率的重要手段。</p>\n<p>来看看例子吧</p>\n<p>main.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * file : main.c start!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"uart.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"processdata.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * main()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/* 分离之后，接口可以随意切换，更加具有兼容性！这样写一份代码就可以方便的复用啦！！！</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       processdata: 作为数据的整理</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       uart: 作为数据的发送接口 */</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Processdata_InterfaceInit_t Processdata_InterfaceInit_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Processdata_InterfaceInit_t<span class=\"token punctuation\">.</span>SendData <span class=\"token operator\">=</span> Uart_Send<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Processdata_InterfaceInit_t<span class=\"token punctuation\">.</span>RecieveData <span class=\"token operator\">=</span> Uart_Recieve<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">Processdata_InterfaceInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Processdata_InterfaceInit_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/* 这样将接口对过去就可以啦！</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       今后想换接口：ethernet/SPI/IIC 等等就直接将函数传入就行啦 */</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/* your code */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * file : main.c end!</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>****************************************************/</pre></td></tr></tbody></table></figure><p>processdata.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * file : processdata.h start!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_PROCESSDATA_H</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_PROCESSDATA_H</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * Global Type Declaration</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Processdata_SendType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Processdata_RecieveType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Processdata_SendType SendData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Processdata_RecieveType RecieveData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span>Processdata_InterfaceInit_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Global Function Declaration</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token function\">Processdata_InterfaceInit</span><span class=\"token punctuation\">(</span>Processdata_InterfaceInit_t <span class=\"token operator\">*</span>InterfaceInit_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* _PROCESSDATA_H */</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * file : processdata.h end!</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>****************************************************/</pre></td></tr></tbody></table></figure><p>processdata.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * file : processdata.c start!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"uart.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"processdata.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * Global Variable</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>bool processdata_InerfaceInit_Flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Processdata_SendType Processdata_SendData <span class=\"token operator\">=</span> NULL_PTR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Processdata_RecieveType Processdata_RecieveData <span class=\"token operator\">=</span> NULL_PTR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * Global Function Implement</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Processdata_InterfaceInit()</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token function\">Processdata_InterfaceInit</span><span class=\"token punctuation\">(</span>Processdata_InterfaceInit_t <span class=\"token operator\">*</span>InterfaceInit_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/* check */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>InterfaceInit_t<span class=\"token operator\">-&gt;</span>SendData<span class=\"token operator\">==</span>NULL_PTR<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>\\</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>InterfaceInit_t<span class=\"token operator\">-&gt;</span>RecieveData<span class=\"token operator\">==</span>NULL_PTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/* init function API */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        Processdata_SendData <span class=\"token operator\">=</span> InterfaceInit_t<span class=\"token operator\">-&gt;</span>SendData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        Processdata_RecieveData <span class=\"token operator\">=</span> InterfaceInit_t<span class=\"token operator\">-&gt;</span>RecieveData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        processdata_InerfaceInit_Flag <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">0u</span> <span class=\"token operator\">==</span> <span class=\"token number\">1u</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/* OK | NOT_OK */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> * file : processdata.c end!</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>****************************************************/</pre></td></tr></tbody></table></figure><p>uart.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * file : uart.h</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_UART_H</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_UART_H</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * Global Function Declaration</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token function\">Uart_Send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token function\">Uart_Recieve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* _UART_H */</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * file end!</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>****************************************************/</pre></td></tr></tbody></table></figure><p>uart.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * file : uart.c start!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * Global Function Implement</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Uart_Send()</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token function\">Uart_Send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/* Uart Driver */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/* OK | NOT_OK */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Uart_Recieve()</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>****************************************************/</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token function\">Uart_Recieve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/* Uart Driver */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/* OK | NOT_OK */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/****************************************************</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * file : uart.c end!</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>****************************************************/</pre></td></tr></tbody></table></figure><p>学会了嘛😜</p>\n<p>谢谢可爱的你能看到最后呢！</p>\n<p>爱你呀😍</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7f90a610.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7f90a610.html",
            "title": "QT中信号与槽的连接",
            "date_published": "2024-01-27T16:00:00.000Z",
            "content_html": "<html><head></head><body><h3 id=\"flechazo的小知乎欢迎大家造访啦\"><a class=\"anchor\" href=\"#flechazo的小知乎欢迎大家造访啦\">#</a> flechazo 的小知乎，欢迎大家造访啦😘</h3>\n<p></p><div class=\"links\"><div class=\"item\" title=\"flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p>当使用 Qt 进行应用程序开发时，QObject::connect 是一个非常重要的函数，它被用于将信号与槽函数连接起来，实现对象之间的通信。通过这种机制，可以实现模块之间的解耦和灵活的交互。本文将详细介绍 QObject::connect 的用法。</p>\n<h3 id=\"1-qobjectconnect-函数的基本语法\"><a class=\"anchor\" href=\"#1-qobjectconnect-函数的基本语法\">#</a> 1. QObject::connect 函数的基本语法</h3>\n<p>QObject::connect 的基本语法如下：</p>\n<pre><code>bool QObject::connect(const QObject *sender, const char *signal,\n                      const QObject *receiver, const char *method,\n                      Qt::ConnectionType type = Qt::AutoConnection);\n</code></pre>\n<p>其中各参数的含义如下：</p>\n<ul>\n<li><code>sender</code> ：发出信号的对象。</li>\n<li><code>signal</code> ：信号的名称。</li>\n<li><code>receiver</code> ：接收信号的对象。</li>\n<li><code>method</code> ：槽函数的名称。</li>\n<li><code>type</code> ：连接类型，默认为 Qt::AutoConnection。</li>\n</ul>\n<h3 id=\"2-信号与槽函数的声明\"><a class=\"anchor\" href=\"#2-信号与槽函数的声明\">#</a> 2. 信号与槽函数的声明</h3>\n<p>在使用 QObject::connect 进行连接之前，需要确保信号和槽函数在相应的类中进行了正确的声明。信号和槽函数的声明遵循特定的规则：</p>\n<ul>\n<li>\n<p>信号的声明：在信号所属的类中使用  <code>signals</code>  关键字进行声明，通常在类的头文件中。例如：</p>\n<pre><code>signals:\n    void mySignal();\n</code></pre>\n</li>\n<li>\n<p>槽函数的声明：在槽函数所属的类中进行声明，通常在类的头文件中，并且需要使用  <code>slots</code>  关键字进行修饰。例如：</p>\n<pre><code>public slots:\n    void mySlot();\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-连接信号与槽函数\"><a class=\"anchor\" href=\"#3-连接信号与槽函数\">#</a> 3. 连接信号与槽函数</h3>\n<p>连接信号与槽函数是通过 QObject::connect 函数来实现的。该函数会根据参数指定的发送者、接收者、信号和槽函数进行连接。例如，以下代码将一个对象的信号连接到另一个对象的槽函数：</p>\n<pre><code>QObject::connect(senderObj, SIGNAL(mySignal()), receiverObj, SLOT(mySlot()));\n</code></pre>\n<p>在上述代码中，senderObj 是发出信号的对象，mySignal 是该对象的信号，receiverObj 是接收信号的对象，mySlot 是该对象的槽函数。当 senderObj 发出 mySignal 信号时，receiverObj 将自动执行 mySlot 槽函数的逻辑。</p>\n<h3 id=\"4-信号与槽函数参数的匹配\"><a class=\"anchor\" href=\"#4-信号与槽函数参数的匹配\">#</a> 4. 信号与槽函数参数的匹配</h3>\n<p>在进行信号与槽函数的连接时，需要确保它们的参数类型和个数是匹配的。如果不匹配，编译器会发出警告，但并不会导致程序崩溃或出错。因此，在进行连接时，务必要确保信号与槽函数的参数类型和个数匹配，以避免意外错误的发生。</p>\n<h3 id=\"5-连接类型\"><a class=\"anchor\" href=\"#5-连接类型\">#</a> 5. 连接类型</h3>\n<p>QObject::connect 函数还支持不同的连接类型，可以通过第五个参数  <code>type</code>  来指定。常用的连接类型有：</p>\n<ul>\n<li><code>Qt::AutoConnection</code> （默认）：自动选择连接类型，如果发送者和接收者在同一线程，则使用  <code>Qt::DirectConnection</code> ，否则使用  <code>Qt::QueuedConnection</code> 。</li>\n<li><code>Qt::DirectConnection</code> ：直接连接，信号发出时会立即调用槽函数，无论发送者和接收者是否在同一线程。</li>\n<li><code>Qt::QueuedConnection</code> ：队列连接，信号发出时将事件放入接收者所在线程的事件队列中，在接收者线程的事件循环处理完当前事件后再调用槽函数。</li>\n<li><code>Qt::BlockingQueuedConnection</code> ：阻塞队列连接，与  <code>Qt::QueuedConnection</code>  类似，但是信号发出者会等待槽函数执行完毕之后才继续执行。</li>\n</ul>\n<h3 id=\"6-多线程连接\"><a class=\"anchor\" href=\"#6-多线程连接\">#</a> 6. 多线程连接</h3>\n<p>QObject::connect 函数还可以用于多线程连接。使用不同的连接类型可以实现跨线程的信号与槽函数通信。当发送者和接收者位于不同的线程时，一般使用  <code>Qt::QueuedConnection</code>  连接类型。具体的使用方法和注意事项，请参考 Qt 文档中关于多线程编程的部分。</p>\n<p>以上就是 QObject::connect 函数的基本用法介绍。通过合理地使用信号与槽机制，可以实现模块之间的松耦合和高度可维护的代码结构。在实际开发中，建议详细阅读 Qt 文档，并根据具体的需求选择合适的连接类型和参数。</p>\n<h3 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h3>\n<p><img data-src=\"../../../img.assets/24-01-28QT%E4%B8%AD%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD%E7%9A%84%E8%BF%9E%E6%8E%A5.assets/image-20240128210411902.png\" alt=\"image-20240128210411902\"></p>\n<p>main.cpp</p>\n<pre><code class=\"language-c++\">#include &lt;QCoreApplication&gt;\n#include \"Demo1.h\"\n#include \"ReceClass.h\"\n#include &lt;QDebug&gt;\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n\n    //init\n    ReceClass receClass;\n    Demo1 demo1;\n    Demo1 demo2;\n\n    //bind\n    qDebug() &lt;&lt; QObject::connect(&amp;demo1, &amp;Demo1::sendMsg, &amp;receClass, &amp;ReceClass::receMsg, static_cast&lt;Qt::ConnectionType&gt;(Qt::QueuedConnection | Qt::UniqueConnection));\n    qDebug() &lt;&lt; QObject::connect(&amp;demo2, &amp;Demo1::sendMsg, &amp;receClass, &amp;ReceClass::receMsg, static_cast&lt;Qt::ConnectionType&gt;(Qt::QueuedConnection | Qt::UniqueConnection));\n\n    //run\n    demo1.setMsg(\"我爱你!\");\n    demo2.setMsg(\"滚!\");\n\n    demo1.start();\n    demo2.start();\n\n    return a.exec();\n}\n</code></pre>\n<p>Demo1.cpp</p>\n<pre><code class=\"language-c++\">#include \"Demo1.h\"\n#include &lt;QDebug&gt;\n\n\nvoid Demo1::run()\n{\n    for(int i = 0; i &lt; 2; i++){\n\n        emit sendMsg(this-&gt;m_msg);\n        qDebug() &lt;&lt; \"emit \" &lt;&lt; this-&gt;m_msg &lt;&lt; \" over\";\n    }\n    qDebug() &lt;&lt; \"msg:\" &lt;&lt; this-&gt;m_msg &lt;&lt; \" over\";\n}\n\nvoid Demo1::setMsg(const QString &amp;msg)\n{\n    this-&gt;m_msg = msg;\n}\n</code></pre>\n<p>Demo1.h</p>\n<pre><code class=\"language-c++\">#ifndef DEMO1_H\n#define DEMO1_H\n\n#include &lt;QThread&gt;\n\nclass Demo1 : public QThread\n{\n    Q_OBJECT\n    void run() override;\n\npublic:\n    void setMsg(const QString &amp;msg);\n\nsignals:\n    void sendMsg(QString msg);\n\nprivate:\n    QString m_msg;\n};\n\n#endif // DEMO1_H\n</code></pre>\n<p>ReceClass.cpp</p>\n<pre><code class=\"language-c++\">#include \"ReceClass.h\"\n#include &lt;QDebug&gt;\n#include &lt;QThread&gt;\n\nReceClass::ReceClass(QObject *parent) : QObject(parent)\n{\n\n}\n\nvoid ReceClass::receMsg(QString msg)\n{\n    qDebug() &lt;&lt; \"Get msg: \" +  msg;\n    QThread::sleep(1);\n}\n</code></pre>\n<p>ReceClass.h</p>\n<pre><code class=\"language-c++\">#ifndef RECECLASS_H\n#define RECECLASS_H\n\n#include &lt;QObject&gt;\n\nclass ReceClass : public QObject\n{\n    Q_OBJECT\npublic:\n    explicit ReceClass(QObject *parent = nullptr);\n\npublic slots:\n    void receMsg(QString msg);\n};\n\n#endif // RECECLASS_H\n</code></pre>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/dec6794a.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/dec6794a.html",
            "title": "QT给输入框添加自动补全提示词",
            "date_published": "2024-01-21T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>QT 读取 bin 文件</p>\n<h2 id=\"flechazo的小知乎欢迎大家造访啦\"><a class=\"anchor\" href=\"#flechazo的小知乎欢迎大家造访啦\">#</a> flechazo 的小知乎，欢迎大家造访啦😘</h2>\n<p></p><div class=\"links\"><div class=\"item\" title=\"flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n<p>在 QT 中，可以使用 setCompleter () 函数设置自动完成功能，该函数可以将一个 QCompleter 对象与一个输入框（如 QLineEdit 或 QPlainTextEdit）关联起来，从而实现自动完成的功能。</p>\n<p>QCompleter 对象是用来提供自动完成功能的，它可以通过 QStringList 或模型类作为数据源。下面分别介绍这两种方式的使用方法：</p>\n<h2 id=\"使用-qstringlist-作为数据源\"><a class=\"anchor\" href=\"#使用-qstringlist-作为数据源\">#</a> 使用 QStringList 作为数据源</h2>\n<p>效果展示：</p>\n<p><img data-src=\"../../../img.assets/24-01-23QT%E7%BB%99%E8%BE%93%E5%85%A5%E6%A1%86%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA%E8%AF%8D.assets/image-20240122180359905.png\" alt=\"image-20240122180359905\"></p>\n<p>QStringList 是 QT 中常用的字符串列表类型，它可以作为 QCompleter 的数据源，提供自动完成功能。以下是一个示例代码，展示了如何使用 QStringList 设置自动完成功能：</p>\n<pre><code class=\"language-c++\">#include &lt;QApplication&gt;\n#include &lt;QLineEdit&gt;\n#include &lt;QCompleter&gt;\n\n//为了能使用ui控件，记得将这个函数声明在Widget类里哦！\nvoid Widget::vflechazoAutoCompleter(void)\n{\n    // 创建一个字符串列表作为自动完成的数据源\n    QStringList wordList;\n    wordList &lt;&lt; \"apple🍎\" &lt;&lt; \"banana🍌\" &lt;&lt; \"cherry🧀\" &lt;&lt; \"grape🍇\" &lt;&lt; \"orange🍊\" &lt;&lt; \"flechazo🌸\" &lt;&lt; \"欢迎大家造访flechazo的小窝🍬\";\n    wordList &lt;&lt; \" flechazo🍭\";\n    wordList &lt;&lt; \" 喜欢大家😘\";\n    wordList &lt;&lt; \" 欢迎大家来捧场哦🎊\";\n    wordList &lt;&lt; \" 我的小窝🎃flechazo.mba\";\n    wordList &lt;&lt; \" flechazo一枚可可爱爱的程序员🌸\";\n\n    // 创建了一个 QCompleter 对象 completer1，并将其与 wordList 数据源关联起来。在构造 QCompleter 对象时，将 wordList 作为参数传入。同时，使用 setCaseSensitivity() 函数设置 QCompleter 的大小写不敏感性，即 Qt::CaseInsensitive，这样在自动匹配时不区分大小写。\n    QCompleter *completer1 = new QCompleter(wordList, this);\n    completer1-&gt;setCaseSensitivity(Qt::CaseInsensitive);\n\n    // 使用 setCompleter() 函数将 completer1 设置为 ui-&gt;lineEdit 的自动完成器，从而实现在该输入框中输入部分字符时的自动匹配功能。\n    ui-&gt;lineEdit-&gt;setCompleter(completer1);\n\n}\n</code></pre>\n<p>在上面的示例中，我们创建了一个字符串列表 wordList 作为自动完成的数据源。然后，我们创建了一个 QCompleter 对象并将其与数据源关联起来。最后，我们创建了一个 QLineEdit 对象，并使用 setCompleter () 函数将自动完成器设置为 lineEdit 的自动完成器。</p>\n<p>当用户在 lineEdit 输入框中输入字符时，QCompleter 会根据输入的内容自动匹配并显示可能的完成选项供用户选择。</p>\n<h2 id=\"使用模型类作为数据源\"><a class=\"anchor\" href=\"#使用模型类作为数据源\">#</a> 使用模型类作为数据源</h2>\n<p>效果展示：</p>\n<p><img data-src=\"../../../img.assets/24-01-23QT%E7%BB%99%E8%BE%93%E5%85%A5%E6%A1%86%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA%E8%AF%8D.assets/image-20240122180513930.png\" alt=\"image-20240122180513930\"></p>\n<p>除了 QStringList，还可以使用 QT 内置的模型类作为 QCompleter 的数据源。例如，可以使用 QDirModel 访问文件系统中的文件和目录列表，作为自动完成的数据源。以下是一个示例代码，展示了如何使用 QDirModel 设置自动完成功能：</p>\n<pre><code class=\"language-c++\">#include &lt;QApplication&gt;\n#include &lt;QLineEdit&gt;\n#include &lt;QCompleter&gt;\n#include &lt;QDirModel&gt;\n\nvoid Widget::vflechazoAutoCompleterDir(void)\n{\n    // 创建一个 QCompleter 对象，并将其与 QDirModel 模型关联起来\n    QCompleter *completerDir = new QCompleter(this);\n    completerDir-&gt;setModel(new QDirModel(completerDir));\n\n    // 创建一个 QLineEdit 对象，并设置自动完成器\n    ui-&gt;lineEdit_2-&gt;setCompleter(completerDir);\n}\n\n</code></pre>\n<p>在上面的示例中，我们创建了一个 QCompleter 对象，并将其与 QDirModel 模型关联起来。然后，我们创建了一个 QLineEdit 对象，并使用 setCompleter () 函数将自动完成器设置为 lineEdit 的自动完成器。</p>\n<p>当用户在 lineEdit 输入框中输入部分文件或目录名时，QCompleter 会根据输入的内容自动匹配并显示可能的选项供用户选择。需要注意的是，QDirModel 可以访问整个文件系统，因此在使用时要小心，确保只提供需要的目录和文件列表，避免意外泄露敏感信息。</p>\n<p>除了数据源的设置，还可以通过 setCaseSensitivity () 函数设置 QCompleter 的大小写敏感性。默认情况下，QCompleter 是大小写敏感的，但可以通过设置 Qt::CaseInsensitive 选项来忽略大小写。例如：</p>\n<pre><code class=\"language-c++\">Codecompleter-&gt;setCaseSensitivity(Qt::CaseInsensitive);\n</code></pre>\n<p>最后，使用 setCompleter () 函数将 QCompleter 设置为输入框的自动完成器，就可以实现自动完成功能了。</p>\n<p>谢谢耐心看完的大家啦！</p>\n<p>给个小心心吧❤</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a1c393ed.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a1c393ed.html",
            "title": "【自我提升】我的MBTI人格测试",
            "date_published": "2024-01-08T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起：</h2>\n<p>我来啦〰！想要<strong>自我提升</strong>的<strong>宝子</strong>们一定要看一看哇💖！</p>\n<p>先认清自己再做出改变！冲锋🌏</p>\n<p>我也浑浑噩噩地度过啦<strong> 23</strong> 年啦！说起来还有点小伤感呢，打住！积极一点啦，<strong>人生只有一次</strong>。何不<strong>洒脱自信</strong>一点呢😄？笑一笑➰</p>\n<p>那 24 年祝愿自己：<strong>积极</strong>，<strong>自律</strong>，<strong>勇敢</strong>，<strong>自信</strong>💮！</p>\n<p>等等，还有脱单。哈哈哈！</p>\n<hr>\n<p>我是个<strong>建筑师</strong>呢，哈哈哈。每个人都是世界上<strong>独一无二</strong>的存在！</p>\n<p><img data-src=\"../../../img.assets/24-01-09%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E4%B9%8BMBTI%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95.assets/image-20240109143952301.png\" alt=\"image-20240109143952301\"></p>\n<p>看看全世界独一无二的 <strong>flechazo</strong> ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTZwZXJzb25hbGl0aWVzLmNvbS9jaC9pbnRqLSVFNCVCQSVCQSVFNiVBMCVCQw==\">我的人格</span></p>\n<p><img data-src=\"../../../img.assets/24-01-09%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E4%B9%8BMBTI%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95.assets/image-20240109150401655.png\" alt=\"image-20240109150401655\"></p>\n<h3 id=\"照妖镜\"><a class=\"anchor\" href=\"#照妖镜\">#</a> 照妖镜：</h3>\n<blockquote>\n<p>建筑师，从内心深处与独立牢牢绑定，想要摆脱别人的期望，追求自己的想法。</p>\n</blockquote>\n<p>答：时而独立，时而孤僻。</p>\n<blockquote>\n<p>建筑师既可以是最大胆的梦想家，也可以是最悲观的人。</p>\n</blockquote>\n<p>答：之前比较悲观啦！但是想明白啦：人生只有一次。何不大胆一点？精彩一点？</p>\n<blockquote>\n<p>建筑师不只是为了炫耀而学习新事物 -- 他们从内心喜欢扩大自己的知识范围。</p>\n</blockquote>\n<p>答：真的想静下心来做好一件事情【比如想认真写好一个文章，想学会一个才艺】</p>\n<blockquote>\n<p>有时，建筑师可能会怀疑与他人打交道是否值得为此受挫。</p>\n</blockquote>\n<p>答：我真的会被这个问题困扰。24 年目标：生活精彩丰富、一个人也要有仪式感、鉴定、果断！</p>\n<blockquote>\n<p>建筑师充满了矛盾。他们富有想象力但果断，雄心勃勃但秘而不宣，好奇但专注。</p>\n</blockquote>\n<p>答：24 年要果断哦！别犹豫啦 /~</p>\n<blockquote>\n<p>建筑师质疑一切。</p>\n</blockquote>\n<p>答：哈哈理工男特性！</p>\n<hr>\n<h2 id=\"mbti\"><a class=\"anchor\" href=\"#mbti\">#</a> MBTI：</h2>\n<p><strong>MBTI16</strong> 型人格测试是一种基于心理学理论的人格评估工具。</p>\n<p>MBTI 代表迈尔斯 - 布里格斯类型指标，它最初由凯瑟琳・布里格斯和伊莎贝尔・迈尔斯开发，旨在帮助人们更好地了解自己的个性特点和偏好。</p>\n<p>MBTI16 型人格测试基于卡尔・荣格的心理学理论，即个体有不同的心理取向和行为模式。测试通过测量个体在四个维度上的偏好。包括：</p>\n<ul>\n<li>外向（E）与内向（I）</li>\n<li>感觉（S）与直觉（N）</li>\n<li>思考（T）与情感（F）</li>\n<li>判断（J）与知觉（P）</li>\n</ul>\n<p>来确定个体的人格类型。</p>\n<p>每个维度都代表了两种相对的偏好，例如外向与内向代表了个体获取能量的方式，感觉与直觉代表了个体获取信息的方式，思考与情感代表了个体做决策的方式，判断与知觉代表了个体对待生活的方式。通过将这些偏好组合起来，MBTI16 型人格测试可以给出 16 种不同的人格类型，如 ISTJ、ENFP 等。</p>\n<p>MBTI16 型人格测试的<strong>意义在于</strong>帮助人们更好地了解自己的个性特点和偏好，从而提高自我认知和发展。它可以帮助人们认识到自己的优势和弱点，理解自己在与他人互动、做决策和工作方式上的倾向。通过了解自己的人格类型，人们可以更好地选择适合自己的职业，改善人际关系，提高团队合作效果，并在个人成长和发展方面有所启发。</p>\n<p>需要明确的是，MBTI16 型人格测试并不是对人格的绝对定义，而只是一种评估工具。人格是多维的，受到多个因素的影响，包括遗传、环境和个人经历等。因此，测试结果只是参考，不能将其视为人格的全部或定论。</p>\n<h2 id=\"路漫漫\"><a class=\"anchor\" href=\"#路漫漫\">#</a> 路漫漫：</h2>\n<p>人生路漫漫：认识自己！改变自己！提升自己！</p>\n<p>时刻提醒自己：<strong>拿出小本本！</strong></p>\n<blockquote>\n<p>大家都是<strong>第一次</strong>来人间，我凭什么让着你！</p>\n<p><strong>自信</strong>一点，你没有那么多观众。</p>\n<p>不要因为别人的看法而改变自己，因为真正重要的是你自己对自己的看法。</p>\n<p>有时候我们需要<strong>跳出舒适区</strong>，才能发现更广阔的世界。</p>\n<p>成功是由行动而不是愿望实现的。</p>\n</blockquote>\n<p>成长的路上或许有些孤单：但那又如何呢？努力绽放出自己的<strong>翅膀</strong>，然后飞向那个你爱的人吧！</p>\n<p>希望对大家有所帮助🎈</p>\n<p>【我自己也是才刚刚意识到这些，还有很多不足。欢迎大家来探讨。🛰：18339963582】</p>\n<hr>\n<p>最后的最后；要自信的活出自己哦！</p>\n</body></html>",
            "tags": [
                "小世界✨",
                "自我提升",
                "自我提升"
            ]
        }
    ]
}
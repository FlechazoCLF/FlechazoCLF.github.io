{
    "version": "https://jsonfeed.org/version/1",
    "title": "我在人间贩卖黄昏，只为收集世间温柔遇见你.",
    "subtitle": "有幸来到人间的旅人",
    "icon": "https://flechazoclf.github.io/FlechazoCLF.github.io/images/favicon.ico",
    "description": "我在人间贩卖星光",
    "home_page_url": "https://FlechazoCLF.github.io/FlechazoCLF.github.io",
    "items": [
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b189bf4.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b189bf4.html",
            "title": "用python实现批量post请求",
            "date_published": "2023-08-21T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>需求：</p>\n<p>最近项目到了一定阶段了，需要搞测试。</p>\n<p>要求添加一定数量的设备，和定时任务。大概能有百十来个。</p>\n<p>那么看了大概的流程，基本上就是往服务器提交 post 请求就可以实现。</p>\n<p>那么我们开始吧。</p>\n<h2 id=\"包含库\"><a class=\"anchor\" href=\"#包含库\">#</a> 包含库</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># http 请求库，用于 get 和 post 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># json 的库，用来发送和解析 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 别发送太快，用来延时</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr></tbody></table></figure><h2 id=\"准备数据\"><a class=\"anchor\" href=\"#准备数据\">#</a> 准备数据</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 准备数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Authorization 和 Cookie 经常变动，所以提出来</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Authorization <span class=\"token operator\">=</span> <span class=\"token string\">'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Cookie <span class=\"token operator\">=</span> <span class=\"token string\">'Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A; sidebarStatus=0'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 很离谱 NULL 竟然提示我未定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>NULL<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 定义一个时和分，先随便初始化一哈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hour <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 获取你想要的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getinputrule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">global</span> start_h</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">global</span> inv_m</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    start_h <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入起始的时间，时\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    inv_m <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入间隔的时间，分钟\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># post 请求的链接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://139.196.207.98/prod-api/tms/task/group\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># post 请求需要的 json 格式的数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"manageId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"217\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">\"taskType\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cycle\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">\"taskCycle\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,3,2,4,5,6,7\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token string\">\"roomGkPath\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8,21,22,23,24|8,21,22,23,25|8,21,22,23,26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token string\">\"createBy\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token string\">\"updateBy\"</span><span class=\"token punctuation\">:</span> NULL</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 设置请求头 Authorization 是登录认证，Cookie 是辨别你身份的这两个每次登录都是会变的</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json, text/plain, */*'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">'Accept-Encoding'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'gzip, deflate'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">'Accept-Language'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'zh-CN,zh;q=0.9,en;q=0.8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">'Connection'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'keep-alive'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json;charset=UTF-8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span>Cookie<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string\">'Host'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'http://139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把数字转为时间并前补 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">timeformcheck</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    time_str <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>time_str<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> time_str <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token operator\">+</span>time_str</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> time_str</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 打印拼接的串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printtimelist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 发送 post 请求</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sendpost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始发送：\"</span><span class=\"token operator\">+</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\"># 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\"># 打印响应结果</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h2 id=\"发送\"><a class=\"anchor\" href=\"#发送\">#</a> 发送</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开始吧</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 第一步，获取输入的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        getinputrule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> start_h<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-24\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> inv_m<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-60\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 第二步，打印出组合的队列</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        printtimelist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续？输入N退出。其他任意键继续！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 第三步，发送</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        sendpost<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\"># 第四步，是否继续</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n发送完毕!是否继续？N/n退出,任意键继续\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></tbody></table></figure><h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">###########################---1---###################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># http 请求库，用于 get 和 post 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># json 的库，用来发送和解析 json 数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 别发送太快，用来延时</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">###########################---2---###################################</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 准备数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Authorization 和 Cookie 经常变动，所以提出来</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Authorization <span class=\"token operator\">=</span> <span class=\"token string\">'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Cookie <span class=\"token operator\">=</span> <span class=\"token string\">'Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A; sidebarStatus=0'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 很离谱 NULL 竟然提示我未定义</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>NULL<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 定义一个时和分，先随便初始化一哈</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>hour <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 获取你想要的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getinputrule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">global</span> start_h</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">global</span> inv_m</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    start_h <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入起始的时间，时\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    inv_m <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入间隔的时间，分钟\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># post 请求的链接</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://139.196.207.98/prod-api/tms/task/group\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># post 请求需要的 json 格式的数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">\"manageId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"217\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">\"taskType\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cycle\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">\"taskCycle\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,3,2,4,5,6,7\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">\"roomGkPath\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8,21,22,23,24|8,21,22,23,25|8,21,22,23,26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">\"createBy\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">\"updateBy\"</span><span class=\"token punctuation\">:</span> NULL</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 设置请求头 Authorization 是登录认证，Cookie 是辨别你身份的这两个每次登录都是会变的</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json, text/plain, */*'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token string\">'Accept-Encoding'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'gzip, deflate'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token string\">'Accept-Language'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'zh-CN,zh;q=0.9,en;q=0.8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token string\">'Connection'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'keep-alive'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json;charset=UTF-8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span>Cookie<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token string\">'Host'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'http://139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">##########################---3---#####################################</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># 把数字转为时间并前补 0</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">timeformcheck</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    time_str <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>time_str<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> time_str <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token operator\">+</span>time_str</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> time_str</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># 打印拼接的串</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printtimelist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\"># 发送 post 请求</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sendpost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始发送：\"</span><span class=\"token operator\">+</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\"># 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\"># 打印响应结果</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">##########################---4---#####################################</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\"># 开始吧</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\"># 第一步，获取输入的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        getinputrule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> start_h<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-24\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">if</span> inv_m<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-60\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\"># 第二步，打印出组合的队列</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        printtimelist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续？输入N退出。其他任意键继续！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\"># 第三步，发送</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        sendpost<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\"># 第四步，是否继续</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n发送完毕!是否继续？N/n退出,任意键继续\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "python",
                "python"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3c0c5a78.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3c0c5a78.html",
            "title": "即将开启的沪漂生涯",
            "date_published": "2023-08-20T16:00:00.000Z",
            "content_html": "<html><head></head><body><p><strong>兄弟们！</strong></p>\n<p>最近不是换工作了吗，要去上海租房子了。有要合租的嘛？</p>\n<p>本人首次租房，唯恐被骗，于是乎便做了这期租房攻略，希望对要去上海张江附近租房的朋友有所帮助。</p>\n<p>大概分了这几块攻略</p>\n<ul>\n<li>市场</li>\n<li>需求</li>\n<li>预算</li>\n<li>房源</li>\n<li>看房</li>\n<li>合同</li>\n</ul>\n<p>开始吧</p>\n<h2 id=\"一-市场主要参考某如\"><a class=\"anchor\" href=\"#一-市场主要参考某如\">#</a> 一、市场【主要参考某如】</h2>\n<p>大家自行找中介了解房价，某如是线上签约，感觉比中介要贵，但好歹真实。那某如的价格作为自己找房的底线。</p>\n<p>如果中介的房源还不如某如，那为什么要在中介那定呢？</p>\n<p>我的新工作是在张江高科附近。看图</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820180013222.png\" alt=\"image-20230820180013222\"></p>\n<p>图中有 6 块区域供选择：</p>\n<h3 id=\"区域1龙沟新苑2160-3160\"><a class=\"anchor\" href=\"#区域1龙沟新苑2160-3160\">#</a> 区域 1【龙沟新苑：2160-3160】</h3>\n<p>通勤：骑行 11 分钟、公交 46 分钟、步行 38 分钟。</p>\n<p>芳芯苑、芳佳苑、申波苑、龙沟新苑、聚龙家园这些。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820180151335.png\" alt=\"image-20230820180151335\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820180718209.png\" alt=\"image-20230820180718209\"></p>\n<p>某如上 2660 可以租到一个 17 平的。中介可能便宜。大家自行判断。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820181058161.png\" alt=\"image-20230820181058161\"></p>\n<h3 id=\"区域2汤臣豪园2677-3990\"><a class=\"anchor\" href=\"#区域2汤臣豪园2677-3990\">#</a> 区域 2【汤臣豪园：2677-3990】</h3>\n<p>通勤：骑行 5 分钟、步行 20 分钟</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820181752277.png\" alt=\"image-20230820181752277\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820181851585.png\" alt=\"image-20230820181851585\"></p>\n<p>在这住这属实有些豪横了。2600 一个 8 平小屋。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820182307296.png\" alt=\"image-20230820182307296\"></p>\n<h3 id=\"区域3古铜1960-2590\"><a class=\"anchor\" href=\"#区域3古铜1960-2590\">#</a> 区域 3【古铜：1960-2590】</h3>\n<p>通勤：骑行 12 分钟、公交 32 分钟、步行 42 分钟</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820184013826.png\" alt=\"image-20230820184013826\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820184121289.png\" alt=\"image-20230820184121289\"></p>\n<p>这个价格大概就是附近的均价了。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191258286.png\" alt=\"image-20230820191258286\"></p>\n<h3 id=\"区域4玉兰1960-2760\"><a class=\"anchor\" href=\"#区域4玉兰1960-2760\">#</a> 区域 4【玉兰：1960-2760】</h3>\n<p>通勤：骑行 17 分钟、公交 54 分钟、步行 65 分钟。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820190909453.png\" alt=\"image-20230820190909453\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191418561.png\" alt=\"image-20230820191418561\"></p>\n<p>​\t<img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191501375.png\" alt=\"image-20230820191501375\"></p>\n<h3 id=\"区域5川杨1930-3360\"><a class=\"anchor\" href=\"#区域5川杨1930-3360\">#</a> 区域 5【川杨：1930-3360】</h3>\n<p>通勤：骑行 19 分钟、公交 47 分钟、步行 70 分钟。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191836729.png\" alt=\"image-20230820191836729\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191608547.png\" alt=\"image-20230820191608547\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191916751.png\" alt=\"image-20230820191916751\"></p>\n<h3 id=\"区域6申城1890-2990\"><a class=\"anchor\" href=\"#区域6申城1890-2990\">#</a> 区域 6【申城：1890-2990】</h3>\n<p>通勤：骑行 26 分钟、公交 68 分钟、步行 86 分钟。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191957406.png\" alt=\"image-20230820191957406\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820192136911.png\" alt=\"image-20230820192136911\"></p>\n<p>好啦，这就是大概的几个区域了。</p>\n<p>价格上就汤臣豪园比其他的贵一些。</p>\n<h2 id=\"二-需求\"><a class=\"anchor\" href=\"#二-需求\">#</a> 二、需求</h2>\n<p>那么看了大概的价格区间，我内心也有了一定的需求了。</p>\n<p>我的需求是：独厨独卫。厨：喜欢自己做饭。卫：方便。骑行：想买个自行车或者小电车 20-30 分钟的通勤即可。</p>\n<p>如果近的，贵 300 以内可以接受。</p>\n<h2 id=\"三-预算\"><a class=\"anchor\" href=\"#三-预算\">#</a> 三、预算</h2>\n<p>我的预算是 2000-3000。这点的话根据大家的薪资情况，我是税前 12 试用期打 8 折。</p>\n<p>不过最近瞅了瞅民房，1400 和 1600 的价格还是很心动的。就是稍微远一点，买小电车 30 分钟通勤。</p>\n<h2 id=\"四-房源\"><a class=\"anchor\" href=\"#四-房源\">#</a> 四、房源</h2>\n<h3 id=\"1-自如链家-贝壳-自如是一家\"><a class=\"anchor\" href=\"#1-自如链家-贝壳-自如是一家\">#</a> 1、自如【链家、贝壳、自如是一家】</h3>\n<h3 id=\"2-中介\"><a class=\"anchor\" href=\"#2-中介\">#</a> 2、中介</h3>\n<p>按照我希望的看房顺序</p>\n<h4 id=\"1汤臣豪园2500左右这个如果真的2500那我就要这个了\"><a class=\"anchor\" href=\"#1汤臣豪园2500左右这个如果真的2500那我就要这个了\">#</a> 【1】汤臣豪园【2500 左右】这个如果真的 2500 那我就要这个了。</h4>\n<p>主卧、无物业费、电 1、押一付一、燃气做饭、独立卫生间。</p>\n<p>联系人：微信上都改了备注的</p>\n<p>通勤：步行 5 分钟。真香</p>\n<p>本来是有视频的，但是由于这 github page 的 blog 实在是不敢恭维。</p>\n<h4 id=\"2玉兰二期2500这个真的大\"><a class=\"anchor\" href=\"#2玉兰二期2500这个真的大\">#</a> 【2】玉兰二期【2500】这个真的大</h4>\n<p>北一室一厅、电 1、水月 30、网包、35% 中介费。</p>\n<p>通勤：要买小电车了。电车 20 分钟。</p>\n<h4 id=\"3民房唐家宅孙桥环东16001400\"><a class=\"anchor\" href=\"#3民房唐家宅孙桥环东16001400\">#</a> 【3】民房唐家宅 / 孙桥环东【1600/1400】</h4>\n<p>如果上面的两个都不行，那就没必要租贵的了。直接上民房，便宜。</p>\n<p>唐家宅：二楼一室户，看着一般，卧室和厨房之间有层玻璃门。</p>\n<p>孙桥环东：开放厨房、大小和上面差不多。</p>\n<h4 id=\"4自如2200左右实在不行就直接自如吧省心\"><a class=\"anchor\" href=\"#4自如2200左右实在不行就直接自如吧省心\">#</a> 【4】自如【2200 左右】实在不行就直接自如吧，省心</h4>\n<h2 id=\"五-看房\"><a class=\"anchor\" href=\"#五-看房\">#</a> 五、看房</h2>\n<h3 id=\"中介\"><a class=\"anchor\" href=\"#中介\">#</a> 中介</h3>\n<p>1、酬劳：半个月房租<br>\n 2、与中介交流时要将预算压低<br>\n 3、对租房的要求：地段、户型、厨房<br>\n 4、至少沟通三家中介，对比价格房型</p>\n<h3 id=\"线下看房\"><a class=\"anchor\" href=\"#线下看房\">#</a> 线下看房</h3>\n<p>1、室内采光（10：00-16：00）<br>\n2、通风情况<br>\n 3、隔音效果（咨询其他住户）<br>\n4、户外噪音（车流、学校、商户、装修）<br>\n5、周边快递站、购物场所<br>\n 6、马桶水压<br>\n 7、水电表位置（缴费方式：个人交，还是房东收租时一起交）<br>\n8、房内拉网装宽带的方式<br>\n 9、是否有物业费（确定租住了解物业联系方式）<br>\n10、水槽漏水情况、深浅<br>\n 11、冰箱制冷<br>\n 12、空调制冷<br>\n 13、油烟机<br>\n 14、床板床架是否损坏<br>\n 15、灯泡是否正常亮<br>\n 16、洗衣机是否正常使用<br>\n 17、上述情况需提前询问是否换新或者维修，归责于出租人房东</p>\n<h2 id=\"六-合同\"><a class=\"anchor\" href=\"#六-合同\">#</a> 六、合同</h2>\n<p>1、合同注明入住时间，从入住之时开始核算租金<br>\n 2、注明家具明细，损坏赔偿，维修责任<br>\n 3、退还押金约定时间，并注明是否会扣除家具损耗费清洁费等<br>\n 4、合同期限，半年或者一年，提前收房违约金多少<br>\n 5、水电费初始刻度写明在合同上，并标明水电单位收费价格<br>\n 6、签订合同时，需房东出具房产证和身份证复印件</p>\n<p>1、入住前，需全屋拍照留取相关证据，后期若有损坏追责避免纠纷<br>\n 2、有需要维修的家具家电需维修好才入住交付租金；后期若有相关维修物品，若房东不予解决，沟通完毕后自行维修保留票据，扣除下月房租内<br>\n 3、民法典 731 条，出租人对租赁物有维修义务</p>\n</body></html>",
            "tags": [
                "小世界✨",
                "租房",
                "随想"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7870ba02.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7870ba02.html",
            "title": "QT读取bin文件",
            "date_published": "2023-08-17T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>QT 读取 bin 文件</p>\n<p>书接上回，bootloader 升级都做了，自然要用 QT 实现一下啦</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"Bootloader开发流程\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDcxMjg5MDM=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDcxMjg5MDM=\">Bootloader开发流程</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/647128903</p>\n          </div></div></div><p></p>\n<h2 id=\"选择文件\"><a class=\"anchor\" href=\"#选择文件\">#</a> 选择文件</h2>\n<p>拿到路径</p>\n<pre><code class=\"language-c++\">QString updatafilepath;\n\nvoid MainWindow::on_pushButton_updata_seletbin_clicked()\n{\n    QString filename = QFileDialog::getOpenFileName(\n           this,\n           tr(\"请选择升级包的Bin文件\"),\n           QDir::currentPath(),\n           \"Bin files (*.bin);;All files(*.*)\");\n    updatafilepath=getFileInfo(filename);\n}\n\n\n</code></pre>\n<h2 id=\"获取信息\"><a class=\"anchor\" href=\"#获取信息\">#</a> 获取信息</h2>\n<p>获得文件基本信息</p>\n<pre><code class=\"language-c++\">QString MainWindow::getFileInfo(const QString fileFullName)\n{\n    QStringList slFileInfo;\n    if(!fileFullName.isEmpty())\n    {\n        QFileInfo fileInfo(fileFullName);\n\n        slFileInfo&lt;&lt; tr(\"File Path: \") + fileInfo.absolutePath();\n        slFileInfo&lt;&lt; tr(\"File Full Name: \") + fileInfo.fileName();\n        ui-&gt;textBrowser-&gt;append(\"File Path: \"+fileInfo.absolutePath()+\"/\"+fileInfo.fileName()+\"\\n\");\n        //---------------拿到文件的路径-----------------------------------\n        updatafilepath=fileInfo.absolutePath()+\"/\"+fileInfo.fileName();\n        ui-&gt;lineEdit_updata-&gt;setText(updatafilepath);\n        //---------------拿到文件的路径-----------------------------------\n        slFileInfo&lt;&lt; tr(\"File Base Name: \") + fileInfo.baseName();\n        slFileInfo&lt;&lt; tr(\"File Type: \") + fileInfo.suffix();\n        qint64 size = fileInfo.size();\n        size = size / 1024;\n        slFileInfo&lt;&lt; tr(\"File Size: \") + QString::number(size) + \"KB\";\n        ui-&gt;textBrowser-&gt;append(\"File Size: \"+QString::number(size) + \"KB\"+\"\\n\");\n        QDateTime timeInfo = fileInfo.created();\n        slFileInfo&lt;&lt; tr(\"Create Time: \") + timeInfo.toString(\"yyyy-MM-dd hh:mm:ss\");\n        slFileInfo&lt;&lt;   tr(\"Modifed Time: \") + fileInfo.lastModified().toString(\"yyyy-MM-dd hh:mm:ss\");\n        slFileInfo&lt;&lt;  tr(\"Latest Read: \") + fileInfo.lastRead().toString(\"yyyy-MM-dd hh:mm:ss\");\n\n        QString strInfo = slFileInfo.join('\\n');\n        QMessageBox::information(this,tr(\"File Info\"),strInfo);\n    }\n\t//读取文件\n    OnReadBin(updatafilepath);\n    return updatafilepath;\n}\n</code></pre>\n<h2 id=\"读取数据\"><a class=\"anchor\" href=\"#读取数据\">#</a> 读取数据</h2>\n<pre><code class=\"language-c++\">QFile updatafile;\nlong lastLen,fileLen,sendCnt;\nvolatile uint8_t myupdatafilepBuf[64*1024];\n\nconst int PACKET_SIZE = 768;//每次发送的字节数\n\nvoid MainWindow::OnReadBin(QString filepathstr)\n{\n    if(filepathstr==\"\"){\n        QMessageBox::information(this, tr(\"提示消息\"), tr(\"请先选择正确的Bin文件！\"), QMessageBox::Ok);\n        return;\n    }\n    QString filePath(filepathstr);\n    updatafile.setFileName(filePath);\n    QFileInfo fileInfo(filePath);\n    //数据信息计算\n    fileLen = fileInfo.size();//待发送文件大小\n    sendCnt = (int)ceil(fileLen / (PACKET_SIZE * 1.0));//发送次数\n    lastLen = fileLen % PACKET_SIZE;//最后一次发送的大小\n    if (0 == lastLen) {//恰巧是PACKET_SIZE的整数倍\n        lastLen = PACKET_SIZE;\n    }\n    qDebug() &lt;&lt; \"fileLen,lastLen,sendCnt:\" &lt;&lt; fileLen &lt;&lt; lastLen &lt;&lt; sendCnt;\n\n\t//----------------------------读取---------------------------------\n    if (updatafile.open(QIODevice::ReadOnly)){\n        QDataStream dataStream(&amp;updatafile);\n        dataStream.readRawData((char *)myupdatafilepBuf, fileLen);\n    }\n    updatafile.close();\n}\n</code></pre>\n<p>读出来之后就靠大家的发挥啦，我的业务场景是：读出来后拆包，每 768 字节是一包，分包发送给下位机。下位机接收完成后进行升级。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3e5d1178.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3e5d1178.html",
            "title": "用C语言实现键值对-键->函数",
            "date_published": "2023-08-15T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>高级语言中有键值对的概念，那么 c 语言也可以有！！</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"QT键值对的妙用\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDMxODEwMDQ=\" data-background-image=\"https://pic1.zhimg.com/70/v2-f12af2365f885012a67c1df821123667_1440w.avis?source=172ae18b&amp;biz_tag=Post\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDMxODEwMDQ=\">QT键值对的妙用</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/643181004</p>\n          </div></div></div><p></p>\n<p>初衷是想要实现这样的代码框架，优化代码的思路。</p>\n<p>【理念】：所有的功能模块都封装进一个结构体 FlechazokeyValue</p>\n<h2 id=\"食用步骤\"><a class=\"anchor\" href=\"#食用步骤\">#</a> 食用步骤：</h2>\n<p>1、vfkeyvalueInit ()；// 初始化</p>\n<p>2、FlechazokeyValue.addkv ();// 添加键值对</p>\n<p>3、FlechazokeyValue.getvalue ();// 可以创建一个函数指针，指向这个函数，然后执行</p>\n<p>核心就是一个数据对应着一个函数。</p>\n<p>获取 key 对应函数：【getvalue 本身是个函数指针，他的返回值也是一个函数指针】</p>\n<p>void *(*getvalue)(const F_KEY_TYPE *key,const uint32_t keylen);</p>\n<p>那么上代码吧</p>\n<h2 id=\"fkeyvalueh\"><a class=\"anchor\" href=\"#fkeyvalueh\">#</a> fkeyvalue.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__FKEYVALUE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__FKEYVALUE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdlib.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdbool.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"gd32f30x.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义键值对 --&gt;&gt; 键的类型 ---&gt;&gt;&gt; 键的长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">F_KEY_TYPE</span> <span class=\"token expression\"><span class=\"token class-name\">uint8_t</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLECHAZO_KEY_LEN</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 目前值为函数指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 定义键值对 --&gt;&gt; 值的类型 ---&gt;&gt;&gt; 值的长度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// #define F_VALUE_TYPE (void *)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// #define FLECHAZO_VALUE_LEN 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLECHAZO_KEYVALUE_GROUP</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 键值对数据结构体</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 键值对</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1、键 是一个 uint8_t 类型的数组，元素 key keylen </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//2、值 为一个函数指针 指向你的函数，元素 函数名 value 参数 info</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span>keyValueData_S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 键值对操作结构体</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//1、增</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>addkv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//2、删</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>delkv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//3、改</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>changekv_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>skey<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>tkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>changekv_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//4、获取 根据键 key 获取其对应的值 value</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>getvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">}</span>keyValueControl_S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    keyValueData_S <span class=\"token operator\">*</span>kvdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    keyValueControl_S kvctr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">}</span>FlechazokeyValue_S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vfkeyvalueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueAddkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueDelkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_k</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>skey<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>tkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_v</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">pvfkeyvalueGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetFreeAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>bool <span class=\"token function\">bflechazoCheckItemInArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> value<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//__FKEYVALUE_H</span></span></pre></td></tr></tbody></table></figure><h2 id=\"fkeyvaluec\"><a class=\"anchor\" href=\"#fkeyvaluec\">#</a> fkeyvalue.c</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fkeyvalue.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"string.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 所有的键值对存放在这，通过指针去查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>keyValueData_S kvdata<span class=\"token punctuation\">[</span>FLECHAZO_KEYVALUE_GROUP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 理念：所有的功能都封装为一个结构体</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FlechazokeyValue_S FlechazokeyValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vfkeyvalueTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThis is flechazo keyvalue test.%d\\n\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//1、初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vfkeyvalueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token operator\">=</span>kvdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 初始化函数指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>addkv <span class=\"token operator\">=</span> bfkeyvalueAddkv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>delkv <span class=\"token operator\">=</span> bfkeyvalueDelkv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>changekv_k <span class=\"token operator\">=</span> bfkeyvalueChangekv_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>changekv_v <span class=\"token operator\">=</span> bfkeyvalueChangekv_v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>getvalue <span class=\"token operator\">=</span> pvfkeyvalueGetValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span><span class=\"token function\">addkv</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">,</span>FLECHAZO_KEY_LEN<span class=\"token punctuation\">,</span>vfkeyvalueTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//1、增</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//bool (*addkv)(const uint8_t *key,const uint32_t keylen,void *func);</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueAddkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 获取空闲地址</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetFreeAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//num!=0    group=0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token comment\">// 说明存储控件满了</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 保存键</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 保存值</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 计数 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//2、删</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//bool (*delkv)(const uint8_t *key,const uint32_t keylen);</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueDelkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 根据键获取组号</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 清除 key</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 计数 - 1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//3、改</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//bool (*changekv_k)(const uint8_t *skey,const uint32_t keylen,const uint8_t *tkey);</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_k</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>skey<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>tkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 找到 key</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>skey<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>tkey<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">//bool (*changekv_v)(const uint8_t *key,const uint32_t keylen,void *func);</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_v</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 找到 key</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tFlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">//4、获取 根据键 key 获取其对应的值 value</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">//void *(*getvalue)(uint8_t *key,uint32_t keylen);</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">pvfkeyvalueGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 找到 key</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">// 根据 key 获取存储数组中的组号</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>FLECHAZO_KEYVALUE_GROUP<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">// 获取新增键值对地址 [返回值为第 x 组键值对]</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetFreeAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>FLECHAZO_KEYVALUE_GROUP<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bflechazoCheckItemInArr</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>FLECHAZO_KEY_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 检查数组中的每个元素的值</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>bool <span class=\"token function\">bflechazoCheckItemInArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> value<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>l<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "STM32",
                "STM32"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e52cfcec.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e52cfcec.html",
            "title": "QT读写word文档",
            "date_published": "2023-08-13T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>需求：有朋友找我说要改代码，而且量很大，但是只有一部分数字要改动。</p>\n<p>提取需求：固定文本，规律递增，保持格式</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810093103531.png\" alt=\"image-20230810093103531\"></p>\n<p>像这样，只有这 3 个 0 是一次递增的，需要写 80 多遍。于是便问我有没有什么好方法。</p>\n<p>开玩笑，我堂堂一个码农。</p>\n<p>刚好最近在学 QT，那就随便用一下吧。</p>\n<p>1、添加 QT += axcontainer</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810094017001.png\" alt=\"image-20230810094017001\"></p>\n<p>2、整几个控件</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095452666.png\" alt=\"image-20230810095452666\"></p>\n<p>3、代码</p>\n<pre><code class=\"language-c++\">//点击写入按钮触发\nvoid MainWindow::on_pushButton_word_write_clicked()\n{\n    QAxObject *myword;//Word应用程序指针\n    QAxObject *mydocs;//文档集指针\n    QAxObject *document;//文档指针\n    QAxObject *paragraph;//文本段指针\n\n    //创建 Word 进程\n    myword = new QAxObject(\"Word.Application\");\n    myword-&gt;dynamicCall(\"SetVisible(bool Visible)\", \"false\");//隐藏不显示文档窗体\n    myword-&gt;setProperty(\"DisplayAlerts\", false); //屏蔽文档的警告消息\n\n    //获取文档集\n    mydocs = myword-&gt;querySubObject(\"Documents\");\n    mydocs-&gt;dynamicCall(\"Add(void)\");//添加一个文档\n    document= myword-&gt;querySubObject(\"ActiveDocument\");//指向当前活动文档\n    paragraph = myword-&gt;querySubObject (\"Selection\");//指向当前选中文本\n    //拿到开始的数值\n    int startnumber = ui-&gt;lineEdit_word_startnumber-&gt;text().toInt();\n    //拿到写多长\n    int writenumber = ui-&gt;lineEdit_word_writelen-&gt;text().toInt();\n\n    //拼凑字符串\n    QString writewoldstr=\"\";\n    QString writewoldstrt1=\"\\n&lt;DOI desc=\\\"\";\n    QString writewoldstrt2=\"号密度表温度\\\" name=\\\"Temp\";\n    QString writewoldstrt3=\"\\\"&gt;\\n\\t&lt;DAI name=\\\"dU\\\"&gt;\\n\\t\\t&lt;Val&gt;\";\n    QString writewoldstrt4=\"号密度表温度&lt;/Val&gt;\\n\\t&lt;/DAI&gt;\\n&lt;/DOI&gt;\";\n    for(int c=0;c&lt;writenumber;c++){\n        QString n = QString::number(startnumber+c);\n        writewoldstr.append(writewoldstrt1);\n        writewoldstr.append(n);\n        writewoldstr.append(writewoldstrt2);\n        writewoldstr.append(n);\n        writewoldstr.append(writewoldstrt3);\n        writewoldstr.append(n);\n        writewoldstr.append(writewoldstrt4);\n    }\n    //写入从界面文本框获取的文本\n    paragraph-&gt;dynamicCall(\"TypeText(const QString&amp;)\", writewoldstr);\n    //保存文档\n    document-&gt;dynamicCall(\"SaveAs(const QString&amp;)\",\"D:\\\\Qt5.doc\");\n    //关闭\n    delete paragraph;\n    paragraph= nullptr;\n    document-&gt;dynamicCall(\"Close()\");\n    myword-&gt;dynamicCall(\"Quit()\");\n    QMessageBox::information(this, tr(\"完毕\") , tr(\"Word 文档己保存\")) ;\n}\n</code></pre>\n<p>4、效果</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095623866.png\" alt=\"image-20230810095623866\"></p>\n<p>代码中保存文档路径中找到文档</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095717214.png\" alt=\"image-20230810095717214\"></p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095659859.png\" alt=\"image-20230810095659859\"></p>\n<p>好啦，完事</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a4f9153.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a4f9153.html",
            "title": "QT数据库的基本使用",
            "date_published": "2023-08-12T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>用 QT 实现数据库的增删改查</p>\n<p>QT 随便整几个控件 + 4 个按钮</p>\n<p><img data-src=\"../../../img.assets/23-8-13QT%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets/image-20230810085904644.png\" alt=\"image-20230810085904644\"></p>\n<p>可以用 navicat 打开看一下</p>\n<p><img data-src=\"../../../img.assets/23-8-13QT%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets/image-20230810092510251.png\" alt=\"image-20230810092510251\"></p>\n<p>数据库初始化</p>\n<pre><code class=\"language-c++\">//初始化\nbool bmysqlInit(){\n    //1、打印驱动列表\n    qDebug()&lt;&lt;QSqlDatabase::drivers();\n    //2、检测已连接的方式 - 默认连接名\n    if(QSqlDatabase::contains(\"qt_sql_default_connection\")){\n        mydb = QSqlDatabase::database(\"qt_sql_default_connection\");\n    }\n    else{\n        mydb = QSqlDatabase::addDatabase(\"QSQLITE\");\n    }\n    //3、设置数据库路径，不存在则创建\n    mydb.setDatabaseName(\"flechazo.db\");\n    //4、测试打开\n    if(mydb.open()){\n        qDebug()&lt;&lt;\"open success\";\n        bmysqlcreattable();\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;mydb.lastError();\n        return false;\n    }\n    return true;\n}\n\nbool bmysqlcreattable(){\n    //sql语句不熟悉的推荐《sql必知必会》，轻松入门\n    //如果不存在则创建my_table表\n    //id自增,name唯一\n    const QString sql=R\"(\n                      CREATE TABLE IF NOT EXISTS  my_table (\n                      id   INTEGER   PRIMARY KEY AUTOINCREMENT NOT NULL,\n                      name CHAR (50) UNIQUE NOT NULL,\n                      age  INTEGER\n                      );)\";\n    //QSqlQuery构造前，需要mydb已打开并连接\n    //未指定mydb或者mydb无效时使用默认连接进行操作\n    QSqlQuery query;\n\n    if(query.exec(sql)){\n        qDebug()&lt;&lt;\"init table success\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n</code></pre>\n<p>增删改查</p>\n<pre><code class=\"language-c++\">//插入数据\nbool bmysqlinsert(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(INSERT INTO my_table(name,age) VALUES(?,?);)\");\n    query.addBindValue(name);\n    query.addBindValue(age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//删除数据\nbool bmysqldelete(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.prepare(R\"(DELETE FROM my_table WHERE name=?;)\");\n    query.addBindValue(name);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//更新数据\nbool vmysqlupdate(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(UPDATE my_table SET age=:age WHERE name=:name;)\");\n    query.bindValue(\":name\",name);//通过自定义的别名来替代\n    query.bindValue(\":age\",age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//查询数据\nint imysqlsearch(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.exec(QString(R\"(SELECT age FROM my_table WHERE name='%1';)\")\n               .arg(name));\n\n    //获取查询结果的第0个值，\n    //如果结果是多行数据，可用while(query.next()){}遍历每一行\n    int ageValue=-1;\n    if(query.next()){\n        ageValue=query.value(0).toInt();\n    }\n    qDebug()&lt;&lt;ageValue;\n    return ageValue;\n}\n</code></pre>\n<p>完整的代码，具体的项目很乱没有整理</p>\n<pre><code class=\"language-c++\">#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include &lt;QSqlDatabase&gt;\n#include &lt;QDebug&gt;\n#include &lt;QSqlError&gt;\n#include &lt;QSqlQuery&gt;\n#include &lt;QSqlRecord&gt;\n#include &lt;QMessageBox&gt;\n\nstatic QSqlDatabase mydb;\n\nbool bmysqlcreattable();\n\n//初始化\nbool bmysqlInit(){\n    //1、打印驱动列表\n    qDebug()&lt;&lt;QSqlDatabase::drivers();\n    //2、检测已连接的方式 - 默认连接名\n    if(QSqlDatabase::contains(\"qt_sql_default_connection\")){\n        mydb = QSqlDatabase::database(\"qt_sql_default_connection\");\n    }\n    else{\n        mydb = QSqlDatabase::addDatabase(\"QSQLITE\");\n    }\n    //3、设置数据库路径，不存在则创建\n    mydb.setDatabaseName(\"flechazo.db\");\n    //4、测试打开\n    if(mydb.open()){\n        qDebug()&lt;&lt;\"open success\";\n        bmysqlcreattable();\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;mydb.lastError();\n        return false;\n    }\n    return true;\n}\n\n\nbool bmysqlcreattable(){\n    //sql语句不熟悉的推荐《sql必知必会》，轻松入门\n    //如果不存在则创建my_table表\n    //id自增,name唯一\n    const QString sql=R\"(\n                      CREATE TABLE IF NOT EXISTS  my_table (\n                      id   INTEGER   PRIMARY KEY AUTOINCREMENT NOT NULL,\n                      name CHAR (50) UNIQUE NOT NULL,\n                      age  INTEGER\n                      );)\";\n    //QSqlQuery构造前，需要mydb已打开并连接\n    //未指定mydb或者mydb无效时使用默认连接进行操作\n    QSqlQuery query;\n\n    if(query.exec(sql)){\n        qDebug()&lt;&lt;\"init table success\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n\n\n//插入数据\nbool bmysqlinsert(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(INSERT INTO my_table(name,age) VALUES(?,?);)\");\n    query.addBindValue(name);\n    query.addBindValue(age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//删除数据\nbool bmysqldelete(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.prepare(R\"(DELETE FROM my_table WHERE name=?;)\");\n    query.addBindValue(name);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//更新数据\nbool vmysqlupdate(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(UPDATE my_table SET age=:age WHERE name=:name;)\");\n    query.bindValue(\":name\",name);//通过自定义的别名来替代\n    query.bindValue(\":age\",age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//查询数据\nint imysqlsearch(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.exec(QString(R\"(SELECT age FROM my_table WHERE name='%1';)\")\n               .arg(name));\n\n    //获取查询结果的第0个值，\n    //如果结果是多行数据，可用while(query.next()){}遍历每一行\n    int ageValue=-1;\n    if(query.next()){\n        ageValue=query.value(0).toInt();\n    }\n    qDebug()&lt;&lt;ageValue;\n    return ageValue;\n}\n\nvoid MainWindow::on_pushButton_mysql_open_clicked()\n{\n\n    //检测已连接的方式 - 自定义连接名\n    if(QSqlDatabase::contains(\"flechazo_mysql\"))\n        mydb = QSqlDatabase::database(\"flechazo_mysql\");\n    else\n        mydb = QSqlDatabase::addDatabase(\"QSQLITE\",\"flechazo_mysql\");\n    //设置数据库路径，不存在则创建\n    mydb.setDatabaseName(\"flechazo.db\");\n    //SQLite不需要用户名和密码\n    //mydb.setUserName(\"flechazo\");\n    //mydb.setPassword(\"unique\");\n\n    //打开数据库\n    if(mydb.open()){\n        qDebug()&lt;&lt;\"open success\";\n    }\n}\n\nvoid MainWindow::on_pushButton_mysql_close_clicked()\n{\n    //关闭数据库\n    mydb.close();\n}\n\nvoid MainWindow::on_pushButton_add_clicked()\n{\n    QString name = ui-&gt;lineEdit_mysql_creat_excel_number-&gt;text();\n    int age = ui-&gt;lineEdit_mysql_creat_excel_time-&gt;text().toInt();\n    bmysqlinsert(name,age);\n    qDebug()&lt;&lt;\"insert successful!\";\n}\n\n\nvoid MainWindow::on_pushButton_read_clicked()\n{\n    //读出数据库\n    QString name=ui-&gt;lineEdit_mysql_creat_excel_number-&gt;text();\n    ui-&gt;lineEdit_mysql_creat_excel_time-&gt;setText(QString::number(imysqlsearch(name)));\n    qDebug()&lt;&lt;\"read successful!\";\n}\n\n</code></pre>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e3153979.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e3153979.html",
            "title": "一文彻底理解原码反码和补码",
            "date_published": "2023-08-08T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>一文彻底理解原码反码和补码</p>\n<p>记得大学学计算机时，被这三个玩意折腾了很久，本人又是个钢铁直男，理解不透就没法继续，老师又只说记住就行了。</p>\n<p>烦恼我许久，于是便整理了一下</p>\n<p>直接开始吧</p>\n<p>首先举个例子，通过这个例子来思考补码的意义</p>\n<h2 id=\"原码\"><a class=\"anchor\" href=\"#原码\">#</a> 原码</h2>\n<p>咱们来算一下 （+6）+（-6）= 0</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230803172545752.png\" alt=\"image-20230803172545752\"></p>\n<p>这个大家都可以理解</p>\n<p>因为这个符号位，所以有这样</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230804085418540.png\" alt=\"image-20230804085418540\"></p>\n<p>分成了两块</p>\n<ul>\n<li>0-127</li>\n<li>（-0）-（-127）</li>\n</ul>\n<p>这个时候（+6）+（-6）= （-12）</p>\n<p>即：</p>\n<p>0 000 0110</p>\n<ul>\n<li></li>\n</ul>\n<p>1 000 0110</p>\n<p>=</p>\n<p>1 000 1100（-12）显然错误</p>\n<h2 id=\"反码\"><a class=\"anchor\" href=\"#反码\">#</a> 反码</h2>\n<p>正数 = 原码      负数 = 除符号位，其余按位取反</p>\n<p>0 000 0110      =》      +6\t\t【6】</p>\n<p>1 111 1001       =》      -6\t\t【249】</p>\n<p>我们都知道（+6）+（-6）= 0，但是【6】+【249】=【255】</p>\n<p>而【255：<strong>1111 1111</strong> + <strong>1</strong> = 1 <strong>0000 0000</strong>】也算是等于零了，所以我们就是要想一个合理的办法凑出正确的答案</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230804091617821.png\" alt=\"image-20230804091617821\"></p>\n<p>那么为什么要取反呢</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230804092353973.png\" alt=\"image-20230804092353973\"></p>\n<p>因为这个范围【0-127】【-0--127】</p>\n<p>出现了 - 0，而事实上没有这个 - 0，所以负数运算时需要偏移 1 位。</p>\n<p>正数 = 原码      负数 = 除符号位，其余按位取反。像这样的句子，本人是最烦背这个了😒</p>\n<h2 id=\"补码\"><a class=\"anchor\" href=\"#补码\">#</a> 补码：</h2>\n<p>正数 = 原码      负数 =+1</p>\n<p>有了上述的思考，那么这个补码就可以理解了吧！</p>\n<p>0 000 0110      =》      +6</p>\n<p>1 111 1010       =》      -6</p>\n<h2 id=\"意义\"><a class=\"anchor\" href=\"#意义\">#</a> 意义：</h2>\n<p>有了这一系列的操作，终于明白补码的意义了吧。</p>\n<p>就是为了解决计算机中的减法问题。</p>\n<p>巧妙地把【减法】换算成了【加法】</p>\n<p>那么为啥不直接用减法呢？</p>\n<p>因为一位加法器实现：是用异或门来实现相加，与门来进位。</p>\n<p>异或：^</p>\n<p>可以参考</p>\n<p>与：&amp;</p>\n<p>0&amp;0=0</p>\n<p>0&amp;1=0</p>\n<p>1&amp;0=0</p>\n<p>1&amp;1=1</p>\n<p>减法实现起来比加法器复杂不少，所以就只有加法就可以了。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html",
            "title": "",
            "date_published": "2023-08-07T14:09:07.150Z",
            "content_html": "<html><head></head><body></body></html>",
            "tags": []
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cd721bd1.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cd721bd1.html",
            "title": "QTsocket连接",
            "date_published": "2023-08-06T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"qt的socket服务端连接\"><a class=\"anchor\" href=\"#qt的socket服务端连接\">#</a> QT 的 socket 服务端连接</h2>\n<p>对于一个联网的设备，socket 长连接再熟悉不过了。那么下位机的 demo 待我整理后给大家分享出来。</p>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境：</h2>\n<ul>\n<li>下位机：\n<ul>\n<li>GD32F303（工作中用的）\n<ul>\n<li>CAT14G 模块配合工作使用</li>\n<li>CAT1 配置为 socket 连接</li>\n</ul>\n</li>\n<li>ESP32S3（个人的小爱好，做了一个小手表）\n<ul>\n<li>wifi 连接，http 配网</li>\n<li>socket 连接</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>上位机：\n<ul>\n<li>QT（平时改动比较大，所以界面很丑，大家不要介意哈）</li>\n<li>串口连接</li>\n<li>socket 连接</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"../../../img.assets/23-8-7QTSocket%E8%BF%9E%E6%8E%A5.assets/image-20230802090240217.png\" alt=\"image-20230802090240217\"></p>\n<p>那么我们开始吧</p>\n<h2 id=\"1-下位机\"><a class=\"anchor\" href=\"#1-下位机\">#</a> 1、下位机</h2>\n<h3 id=\"gd32f303cat1模组\"><a class=\"anchor\" href=\"#gd32f303cat1模组\">#</a> GD32F303+CAT1 模组</h3>\n<p>请参考：CAT1 模组 AT 指令自动配置</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"通过AT指令配置CAT1 4G模组\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDY3Nzk0MTc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDY3Nzk0MTc=\">通过AT指令配置CAT1 4G模组</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/646779417</p>\n          </div></div></div><p></p>\n<h3 id=\"esp32s3\"><a class=\"anchor\" href=\"#esp32s3\">#</a> ESP32S3</h3>\n<p>后期整理好啦再更新到这</p>\n<h2 id=\"2-上位机\"><a class=\"anchor\" href=\"#2-上位机\">#</a> 2、上位机</h2>\n<h3 id=\"首先你需要有这个界面\"><a class=\"anchor\" href=\"#首先你需要有这个界面\">#</a> 首先你需要有这个界面</h3>\n<p>&lt;img src=\"../../../img.assets/23-8-7QTSocket%E8%BF%9E%E6%8E%A5.assets/image-20230802093630566.png\" alt=\"image-20230802093630566\" style=\"zoom:50%;\" /&gt;</p>\n<h4 id=\"本地ip地址\"><a class=\"anchor\" href=\"#本地ip地址\">#</a> 本地 IP 地址</h4>\n<p>用于 socket 连接</p>\n<h4 id=\"本地端口\"><a class=\"anchor\" href=\"#本地端口\">#</a> 本地端口</h4>\n<p>用于 socket 连接</p>\n<h4 id=\"侦听按钮\"><a class=\"anchor\" href=\"#侦听按钮\">#</a> 侦听按钮</h4>\n<p>触发侦听事件</p>\n<h4 id=\"消息发送接收\"><a class=\"anchor\" href=\"#消息发送接收\">#</a> 消息发送接收</h4>\n<p>那么开始愉快的码代码吧！</p>\n<p>项目中的.pro 文件中需要添加这个哦</p>\n<pre><code class=\"language-c++\">QT += network\n</code></pre>\n<p><img data-src=\"../../../img.assets/23-8-7QTSocket%E8%BF%9E%E6%8E%A5.assets/image-20230802095121964.png\" alt=\"image-20230802095121964\"></p>\n<h3 id=\"初始化socke\"><a class=\"anchor\" href=\"#初始化socke\">#</a> 初始化 socke</h3>\n<pre><code class=\"language-c++\">//头文件要加上这三个\n#include &lt;QTcpserver&gt;\n#include &lt;QTcpSocket&gt;\n#include &lt;QNetworkInterface&gt;\n\nvoid MainWindow::vsocketserverInit(void){\n    //客户端\n    socket = new QTcpSocket();\n    //服务端\n    server = new QTcpServer();\n    //UDP可以广播的，实际没有使用\n    m_pUdpSocket = new QUdpSocket();\n\n    // 获取本地的IP\n    for (int i = 0; i &lt; QNetworkInterface().allAddresses().length(); ++i) {\n        ui-&gt;comboBoxData_Socket_Server_IP-&gt;addItem(QNetworkInterface().allAddresses().at(i).toString());\n    }\n    ui-&gt;comboBoxData_Socket_Server_IP-&gt;setCurrentText(\"127.0.0.1\");\n    ui-&gt;comboBoxData_Socket_Server_COM-&gt;addItem(\"8090\");\n    ui-&gt;comboBoxData_Socket_Server_Select_Mode-&gt;addItem(\"指定模式\");\n    ui-&gt;comboBoxData_Socket_Server_Select_Mode-&gt;addItem(\"广播模式\");\n\n    QPalette pe;\n    pe.setColor(QPalette::WindowText, Qt::blue);\n    ui-&gt;label_Socket_Server_Status-&gt;setPalette(pe);\n    ui-&gt;label_Socket_Server_Status-&gt;setText(\"服务器未打开\");\n\n    // 关联客户端连接信号newConnection\n    connect(server, &amp;QTcpServer::newConnection, this, &amp;MainWindow::server_New_Connect);\n\n    //创建一个查询的定时器\n    GetControllerID_Timer = new QTimer;\n\n    connect(GetControllerID_Timer, &amp;QTimer::timeout,this,&amp;MainWindow::vsocketGetControllerID_Send_timer);\n    GetControllerID_Timer-&gt;stop();\n}\n</code></pre>\n<h3 id=\"侦听按键\"><a class=\"anchor\" href=\"#侦听按键\">#</a> 侦听按键</h3>\n<pre><code class=\"language-c++\">void MainWindow::on_pushButton_Socket_Server_Connect_clicked()\n{\n    if (ui-&gt;pushButton_Socket_Server_Connect-&gt;text() == tr(\"侦听\")) {\n        // 从输入端获取端口号\n        int port = ui-&gt;comboBoxData_Socket_Server_COM-&gt;currentText().toInt();\n\n        // 侦听指定的端口\n        if(!server-&gt;listen(QHostAddress::Any, port)) {\n            // 若出错，则输出错误信息\n            QMessageBox::information(this, tr(\"错误\"), server-&gt;errorString(), QMessageBox::Yes);\n            return;\n        }\n        else {\n            // 修改按键文字\n            ui-&gt;pushButton_Socket_Server_Connect-&gt;setText(\"取消侦听\");\n            QPalette pe;\n            pe.setColor(QPalette::WindowText, Qt::red);\n            ui-&gt;label_Socket_Server_Status-&gt;setPalette(pe);\n            ui-&gt;label_Socket_Server_Status-&gt;setText(\"服务器运行中...\");\n        }\n\n        //-----------------------------启动FRPS-----------------------------\n        //这里我是自己搭建了内网穿透，将本地端口映射到服务器的公网上，相当于可以联网控制了\n        bfrpsstart(true);\n    }\n    else {\n        // 如果正在连接......\n        if(socket-&gt;state() == QAbstractSocket::ConnectedState) {\n            // 关闭连接\n            socket-&gt;disconnectFromHost();\n        }\n        // 取消侦听\n        server-&gt;close();\n        // 修改按键文字\n        ui-&gt;pushButton_Socket_Server_Connect-&gt;setText(\"侦听\");\n        QPalette pe;\n        pe.setColor(QPalette::WindowText, Qt::blue);\n        ui-&gt;label_Socket_Server_Status-&gt;setPalette(pe);\n        ui-&gt;label_Socket_Server_Status-&gt;setText(\"服务器未打开\");\n\n        ui-&gt;tableWidget_Socket_Server-&gt;clear();\n        //-----------------------------关闭FRPS-----------------------------\n        bfrpsstart(false);\n    }\n}\n</code></pre>\n<h3 id=\"新客户端连接\"><a class=\"anchor\" href=\"#新客户端连接\">#</a> 新客户端连接</h3>\n<pre><code class=\"language-c++\">//连接\nvoid MainWindow::server_New_Connect()\n{\n    // 获取客户端连接\n    socket = server-&gt;nextPendingConnection();\n    clientSocket.append(socket);\n\n    // 把连接到的客户端添加入tableWidget中\n    int currentRow = ui-&gt;tableWidget_Socket_Server-&gt;rowCount();\n    ui-&gt;tableWidget_Socket_Server-&gt;insertRow(currentRow);\n\n    QTableWidgetItem *item = new QTableWidgetItem();\n    QTableWidgetItem *item_2 = new QTableWidgetItem();\n    QTableWidgetItem *item_3 = new QTableWidgetItem();\n    QTableWidgetItem *item_4 = new QTableWidgetItem();\n    QTableWidgetItem *item_5 = new QTableWidgetItem();\n\n    item-&gt;setText(tr(\"%1\").arg(QString::number(ui-&gt;tableWidget_Socket_Server-&gt;rowCount())));\n    item_2-&gt;setText(clientSocket[currentRow]-&gt;peerAddress().toString().mid(7));\n    item_3-&gt;setText(QString::number(clientSocket[currentRow]-&gt;peerPort()));\n    item_4-&gt;setText(\"00000000\");\n    item_5-&gt;setText(\"在线\");\n\n    ui-&gt;tableWidget_Socket_Server-&gt;setItem(currentRow, 0, item);\n    ui-&gt;tableWidget_Socket_Server-&gt;setItem(currentRow, 1, item_2);\n    ui-&gt;tableWidget_Socket_Server-&gt;setItem(currentRow, 2, item_3);\n    ui-&gt;tableWidget_Socket_Server-&gt;setItem(currentRow, 3, item_4);\n    ui-&gt;tableWidget_Socket_Server-&gt;setItem(currentRow, 4, item_5);\n\n    // 连接QTcpSocket的信号槽，以读取新数据\n    connect(socket, SIGNAL(readyRead()), this, SLOT(Socket_Server_Recieve_Data()));\n    connect(socket, SIGNAL(disconnected()), this, SLOT(Socket_Server_Dis_Connected()));\n\n    //--------------------------根据自己的需求添加------------------------------\n    //连接上之后发配置时间，我这里是业务需要\n    QString checktimedata = \"000000000000000000000000\";\n    checktimedata.append(checktime());\n    checktimedata.append(qstrCrcCalc(checktimedata));\n    checktimedata.append(\"FE\");\n    checktimedata.insert(0,\"FB\");\n    vSocket_Server_Send(checktimedata);\n    //----------------------------------------------------------------------\n}\n\n//取消连接\nvoid MainWindow::Socket_Server_Dis_Connected()\n{\n    // 遍历寻找断开连接的是哪一个客户端\n    for(int i = 0; i &lt; clientSocket.length(); ++i) {\n        //判断连接状态\n        if(clientSocket[i]-&gt;state() == QAbstractSocket::UnconnectedState)\n        {\n            // 删除存储在tableWidget中的该客户端信息\n            for (int j = 0; j &lt; ui-&gt;tableWidget_Socket_Server-&gt;rowCount(); ++j) {\n                //判断IP是否和显示数据的IP一致\n                if (clientSocket[i]-&gt;peerAddress().toString().mid(7) == ui-&gt;tableWidget_Socket_Server-&gt;item(j, 1)-&gt;text()) {\n                    //判断端口是否一致，一致说明断开连接的就是这个客户端\n                    QString socketport = QString::number(clientSocket[i]-&gt;peerPort());\n                    if(socketport==ui-&gt;tableWidget_Socket_Server-&gt;item(j, 2)-&gt;text()){\n                        ui-&gt;tableWidget_Socket_Server-&gt;removeRow(j);\n                    }\n                }\n            }\n            // 删除存储在clientSocket列表中的客户端信息\n            clientSocket[i]-&gt;destroyed();\n            clientSocket.removeAt(i);\n        }\n    }\n}\n</code></pre>\n<h3 id=\"处理发送\"><a class=\"anchor\" href=\"#处理发送\">#</a> 处理发送</h3>\n<pre><code class=\"language-c++\">//发送,我这里有自己的业务需求，根据控制器的ID来找到所对应的IP和端口，去发送\nvoid MainWindow::vSocket_Server_Send_Flechazo(QString sendstr)\n{\n    QString data = sendstr;\n    if (data.isEmpty()) {\n        QMessageBox::information(this, \"提示\", \"请输入发送内容！\", QMessageBox::Yes);\n    }\n    else {\n        if(ui-&gt;comboBoxData_Socket_Server_Select_Mode-&gt;currentText()==\"指定模式\"){\n\n            //获取控制器ID\n            QString ControllerID = ui-&gt;comboBox_ControlID-&gt;currentText();\n            //找控制器对应的端口\n            QString socketPort=\"\";\n            QString socketIP=\"\";\n            for(int i=0;i&lt;ui-&gt;tableWidget_Socket_Server-&gt;rowCount();i++){\n                if(ControllerID == ui-&gt;tableWidget_Socket_Server-&gt;item(i, 3)-&gt;text()){\n                    socketPort = ui-&gt;tableWidget_Socket_Server-&gt;item(i, 2)-&gt;text();\n                    socketIP = ui-&gt;tableWidget_Socket_Server-&gt;item(i, 1)-&gt;text();\n                    break;\n                }\n            }\n            if(socketPort==\"\"){\n                QMessageBox::information(this, tr(\"提示消息\"), tr(\"没有找到该控制器对应的socket端口！\"), QMessageBox::Ok);\n                return;\n            }\n            //拿到端口后去找，因为服务器分配的端口是唯一的，所以就不判断IP啦，懒😎\n            for (int i = 0; i &lt; clientSocket.length(); ++i) {\n                if (QString::number(clientSocket[i]-&gt;peerPort()) == socketPort) {\n                    //以ASCII码形式发送文本框内容\n                    clientSocket[i]-&gt;write(qstring_to_qbytearray(data));\n\n                    //显示数据流\n                    QString timeStrLine=\"[\"+QDateTime::currentDateTime().toString(\"hh:mm:ss\")+\"][发送]:🚀 \";\n                    QString content_l = \"&lt;span style=\\\" color:red;\\\"&gt;\"+timeStrLine +data+\"\\n\\r&lt;/span&gt;\";\n                    ui-&gt;textBrowser-&gt;append(content_l);\n                }\n            }\n\n        }else if(ui-&gt;comboBoxData_Socket_Server_Select_Mode-&gt;currentText()==\"广播模式\"){\n            for (int i = 0; i &lt; clientSocket.length(); ++i) {\n                    //以ASCII码形式发送文本框内容\n                    clientSocket[i]-&gt;write(qstring_to_qbytearray(data));\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"处理接收\"><a class=\"anchor\" href=\"#处理接收\">#</a> 处理接收</h3>\n<pre><code class=\"language-c++\">//接收\nvoid MainWindow::Socket_Server_Recieve_Data()\n{\n    // 由于readyRead信号并未提供SocketDecriptor，所以需要遍历所有客户端\n    for (int i = 0; i &lt; clientSocket.length(); ++i) {\n        // 读取缓冲区数据\n        QByteArray buffer = clientSocket[i]-&gt;readAll();\n        if(buffer.isEmpty()) {\n            continue;\n        }\n\n        static QString IP_Port, IP_Port_Pre;\n        IP_Port = tr(\"[%1:%2]:\").arg(clientSocket[i]-&gt;peerAddress().toString().mid(7)).arg(clientSocket[i]-&gt;peerPort());\n\n        // 若此次消息的地址与上次不同，则需显示此次消息的客户端地址\n        if (IP_Port != IP_Port_Pre) {\n            ui-&gt;textEdit_Socket_Server_RecvData-&gt;append(IP_Port);\n        }\n\n        //---------------------根据需要来处理接收-------------------------------\n\t\t//buffer\n\t\t\n        //---------------------根据需要来处理接收-------------------------------\n\n        // 更新ip_port\n        IP_Port_Pre = IP_Port;\n    }\n}\n</code></pre>\n<p>那么到这基本就结束了！</p>\n<p>有了 socket，自己的小产品才有了灵魂好吧。随时随地，都可以远程控制它了！</p>\n<h2 id=\"关于frp内网穿透\"><a class=\"anchor\" href=\"#关于frp内网穿透\">#</a> 关于 frp 内网穿透</h2>\n<p>教程请看云服务器搭建内网穿透</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"云服务器搭建Frps实现内网穿透\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MzU0NjI5MjA=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MzU0NjI5MjA=\">云服务器搭建Frps实现内网穿透</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/635462920</p>\n          </div></div></div><p></p>\n<p>QT 对应的部分后期会整理成《QT 一键启动 frpc 内网穿透》</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/d989430a.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/d989430a.html",
            "title": "一种flash的存储方式,基于GD25Q64",
            "date_published": "2023-08-03T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>大家在使用 GD25Q64 存储东西时，如果没有移植现有文件系统。那是怎么存储的呢？</p>\n<p>这里给大家推荐一种方式。动态链表存储。写的还不太完善，最近太累了，没时间完善了。</p>\n<h2 id=\"理念\"><a class=\"anchor\" href=\"#理念\">#</a> 理念</h2>\n<p><img data-src=\"../../../img.assets/23-8%E4%B8%80%E7%A7%8Dflash%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F,%E5%9F%BA%E4%BA%8EGD25Q64.assets/image-20230803210004549.png\" alt=\"image-20230803210004549\"></p>\n<p>如果一块控件不够存储了，可以再创建一块</p>\n<p><img data-src=\"../../../img.assets/23-8%E4%B8%80%E7%A7%8Dflash%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F,%E5%9F%BA%E4%BA%8EGD25Q64.assets/image-20230803210045390.png\" alt=\"image-20230803210045390\"></p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p>memory.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__MEMORYMANAGEMENT_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__MEMORYMANAGEMENT_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"gd32f30x.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 起始地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYSTARTADD</span>\t\t\t<span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 内存大小</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYSIZE</span>\t\t\t\t<span class=\"token expression\"><span class=\"token number\">2048</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 每一块的大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYCHUNKINGSIZE</span>\t\t<span class=\"token expression\"><span class=\"token number\">256</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 块内每一组数据的长度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYEACHGROUPDATALENGTH</span> <span class=\"token expression\"><span class=\"token number\">16</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 读出内存数据的缓存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYREADBUFFERSIZE</span>      <span class=\"token expression\"><span class=\"token number\">256</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 内存管理初始化结构体</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> memorysize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> memorystartaddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> memorychunkingsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> Datalengthforeachgroup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span> chunkinghead<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span> chunkingtail<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FlashWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FlashRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FlashErase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">}</span> MemoryInit_struct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 每一块可以存储多少组数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EACHCHUNKINGDATAGROUP</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>MEMORYCHUNKINGSIZE<span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> index<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">}</span> Info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">}</span> Memoryinfomation_union<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 块内元素的定位</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tPOS_DATA_chunkinghead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tPOS_DATA_infomation <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tPOS_DATA_datalength <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tPOS_DATA_storagenum <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tPOS_DATA_data <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tPOS_DATA_previouspageadd <span class=\"token operator\">=</span> MEMORYCHUNKINGSIZE<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tPOS_DATA_currentpageadd <span class=\"token operator\">=</span> MEMORYCHUNKINGSIZE<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tPOS_DATA_nextpageadd <span class=\"token operator\">=</span> MEMORYCHUNKINGSIZE<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tPOS_DATA_chunkingtail <span class=\"token operator\">=</span> MEMORYCHUNKINGSIZE<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 内存读出缓存共用体</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token comment\">// 块头</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> chunkinghead<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token comment\">// 块信息</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tMemoryinfomation_union infomation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token comment\">// 块存储的数据组数（总数，这个是真实存储的数量）删除后减少</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> datanum<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token comment\">// 当前块的存储数据组数（存储数量，这个删除后不减少，继续往后写入）</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> storagenum<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token comment\">// 数据主体</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> data<span class=\"token punctuation\">[</span>EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token comment\">// 地址索引</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> previouspageadd<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一页</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> currentpageadd<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前页</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> nextpageadd<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一页</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token comment\">// 块尾</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> chunkingtail<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">}</span> Info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> Byte<span class=\"token punctuation\">[</span>MEMORYCHUNKINGSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">}</span> MemoryData_union<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 内存块索引结构体</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> infomation<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> currentpageadd<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">}</span> Info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">}</span> MemoryIndex_union<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 内存管理控制结构体</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>CreatChunking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>InquiryChunking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>DeleteChunking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Insert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Inquiry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">}</span>Memory_Control<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">// 存储块的首地址</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYINDEX_CHUNKINGINDEX_FIRSTADDRESS</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>MEMORYSTARTADD<span class=\"token operator\">+</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">// 用来存储块的索引的页数</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYINDEX_CHUNKINGINDEX_NUM</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>MEMORYSIZE<span class=\"token operator\">/</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 块索引的大小</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYINDEX_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>MEMORYINDEX_CHUNKINGINDEX_NUM<span class=\"token operator\">*</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">// 块索引数量的最大值</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYINDEX_CHUNKINGINFO_NUM</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>MEMORYINDEX_SIZE<span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">// 用来存储数据的块的个数（总大小 - 首页存储数量 - 存储索引）/ 每一块的大小</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYDATA_CHUNKING_NUMBER</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>MEMORYSIZE<span class=\"token operator\">-</span><span class=\"token number\">256</span><span class=\"token operator\">-</span>MEMORYINDEX_SIZE<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\">// 存储数据区的起始地址</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEMORYDATA_CHUNKING_STARTADDRESS</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>MEMORYSTARTADD<span class=\"token operator\">+</span><span class=\"token number\">256</span><span class=\"token operator\">+</span>MEMORYINDEX_SIZE<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">// 内存管理结构体</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\tMemoryInit_struct config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\tMemory_Control control<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\tMemoryData_union data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tMemoryIndex_union index<span class=\"token punctuation\">[</span>MEMORYINDEX_CHUNKINGINFO_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">}</span>Memory_Struct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\">// 向存储块中插入数据</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>bool <span class=\"token function\">bmemoryInsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\">// 删除存储块中的数据</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryDelete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token comment\">// 获取基本信息 地址 存储数据数量</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryInquiry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token comment\">// 复制数组</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token comment\">// 判断两个数组是否相同</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>bool <span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>sourcearray<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>targetarray<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">// 二分法获取存储数据的地址，拿到的是数据后的第一个 FF 的地址</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> Startaddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">// 获取一个空闲存储块</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetFreeAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\">// 清空数组</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemorymamagementClearArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token comment\">// 输入 uint32_t 类型，输出一个 uint8_t 数组</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span> <span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token comment\">// 获取块索引的地址</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">vmemorymamagementGetChunkingnumberAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> chunkingnumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token comment\">//uint8_t 数组转 uint32_t</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">// 获取块首地址</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vMemoryControlInit</span><span class=\"token punctuation\">(</span>MemoryInit_struct <span class=\"token operator\">*</span>Config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token comment\">// 创建一个新的块并完成初始化</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryChunkingCreatBase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> creataddress<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> chunkingnumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token comment\">// 获取块的 Index 下的所有存储 data-&gt; 读取到 bymemoryreadbuffer</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryInquiryList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token comment\">// 获取块下数据的添加地址</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetChunkAddDataAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token comment\">// 根据块索引和当前块地址，创建下一块</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token function\">pmemoryCreatNextChunk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//__MEMORYMANAGEMENT_H</span></span></pre></td></tr></tbody></table></figure><p>memory.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"MemoryManagement.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 内存管理结构体</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Memory_Struct Memory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 读取数据的缓存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">uint8_t</span> bymemoryreadbuffer<span class=\"token punctuation\">[</span>MEMORYREADBUFFERSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 空白数据比较数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">uint8_t</span> bycheckarray<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*@fuction\t:vmemorymamagementInit</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*@brief\t\t: 初始化内存管理系统的 demo</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*@date\t\t:2023-05-23</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemorymamagementInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 创建一个初始化结构体</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    MemoryInit_struct memoryinitstruct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置内存大小</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>memorysize <span class=\"token operator\">=</span> MEMORYSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 设置起始地址</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>memorystartaddress <span class=\"token operator\">=</span> MEMORYSTARTADD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 设置每一块的大小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>memorychunkingsize <span class=\"token operator\">=</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 存储块内每一组数据的长度</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>Datalengthforeachgroup <span class=\"token operator\">=</span> MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 块起始的定位值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> datahead<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0xBB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBB</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span>datahead<span class=\"token punctuation\">,</span> memoryinitstruct<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 块结束的值</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> datatail<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0xEE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span>datatail<span class=\"token punctuation\">,</span> memoryinitstruct<span class=\"token punctuation\">.</span>chunkingtail<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 传递函数指针作为接口</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>FlashErase <span class=\"token operator\">=</span> vgd25q64FlushDel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>FlashRead <span class=\"token operator\">=</span> vgd25q64ReadData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    memoryinitstruct<span class=\"token punctuation\">.</span>FlashWrite <span class=\"token operator\">=</span> vgd25q64FlushWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">vMemoryControlInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>memoryinitstruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>*@fuction\t:vMemoryControlInit</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>*@brief\t\t: 初始化结构体，配置信息和接口调用</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>*@param\t\t:MemoryInit_struct</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>*@date\t\t:2023-05-23</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vMemoryControlInit</span><span class=\"token punctuation\">(</span>MemoryInit_struct <span class=\"token operator\">*</span>Config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 配置起始地址</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorystartaddress <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>memorystartaddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 配置内存大小</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorysize <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>memorysize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 配置内存管理分配的每一块内存的大小</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorychunkingsize <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>memorychunkingsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 写入数据的接口</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>FlashWrite <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>FlashWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 读取数据的接口</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>FlashRead <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>FlashRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 擦除数据的接口</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>FlashErase <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>FlashErase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 存储块内每一组数据的长度</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>Datalengthforeachgroup <span class=\"token operator\">=</span> Config<span class=\"token operator\">-&gt;</span>Datalengthforeachgroup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 每一块的起始值</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span>Config<span class=\"token operator\">-&gt;</span>chunkinghead<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 每一块的结尾的值</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span>Config<span class=\"token operator\">-&gt;</span>chunkingtail<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkingtail<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 内存管理的外部调用函数</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span>Delete <span class=\"token operator\">=</span> vmemoryDelete<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 查询</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span>Inquiry <span class=\"token operator\">=</span> vmemoryInquiry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span>Insert <span class=\"token operator\">=</span> bmemoryInsert<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>*@fuction\t:vmemoryChunkingCreat</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>*@brief\t\t: 创建一个存储块</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>*@date\t\t:2023-05-23</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryChunkingCreat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>info<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">// 创建一个变量读出有多少个块</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> chunkingnumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">// 用二分查找法定位第一页存储的块数量的信息</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>chunkingnumber<span class=\"token punctuation\">,</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorystartaddress<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">// 如果块是 FF，一块也没有 -&gt; 初始化为 0</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>chunkingnumber <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        chunkingnumber <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>chunkingnumber<span class=\"token punctuation\">,</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorystartaddress<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">// 读出块索引的信息，index 重复了</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">// 获取一个空闲的块地址</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> creataddress <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetFreeAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>creataddress <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// 没有空闲块了</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 创建块</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token function\">vmemoryChunkingCreatBase</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> creataddress<span class=\"token punctuation\">,</span> chunkingnumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>*@fuction\t:vmemoryChunkingCreatBase</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>*@date\t\t:2023-07-28</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryChunkingCreatBase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> creataddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> chunkingnumber<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token comment\">// 写入块头</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处标识为首块</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">,</span> creataddress<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">// 写入块信息</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token function\">vmemorymamagementClearArray</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>infomation<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>infomation<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>infomation<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> creataddress<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 写入当前页地址</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span>creataddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> creataddress <span class=\"token operator\">+</span> POS_DATA_currentpageadd<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token comment\">// 写入块尾</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkingtail<span class=\"token punctuation\">,</span> creataddress <span class=\"token operator\">+</span> POS_DATA_chunkingtail<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">// 写入索引表</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>infomation<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>chunkingnumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>infomation<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span>creataddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>chunkingnumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span>chunkingnumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> <span class=\"token function\">vmemorymamagementGetChunkingnumberAddress</span><span class=\"token punctuation\">(</span>chunkingnumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token comment\">// 写入数量</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>chunkingnumber<span class=\"token punctuation\">,</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span>MEMORYSTARTADD<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>*@fuction\t:vmemoryChunkingDelete</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>*@date\t\t:2023-05-23</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryChunkingDelete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>info<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token comment\">//1、找块地址</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> delChunkadd <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token comment\">// 没找到</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>delChunkadd <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token comment\">//2、遍历删除</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token comment\">//1、读当前页</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> delChunkadd<span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token comment\">//2、获取下一页地址</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token class-name\">uint32_t</span> nextpageadd <span class=\"token operator\">=</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>nextpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\">//3、循环</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nextpageadd <span class=\"token operator\">!=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nextpageadd <span class=\"token operator\">!=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token comment\">//4、删除</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashErase</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token comment\">//5、读取下一页</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>nextpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token comment\">//6、删除当前页，最后一页</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashErase</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token comment\">//3、写入数量</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token comment\">// 创建一个变量读出有多少个块</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> chunkingnumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token comment\">// 用二分查找法定位第一页存储的块数量的信息</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>chunkingnumber<span class=\"token punctuation\">,</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorystartaddress<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    chunkingnumber<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>chunkingnumber<span class=\"token punctuation\">,</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorystartaddress<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>*@fuction\t:bmemoryInsert</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>*@return\t:bool</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>*@date\t\t:2023-05-23</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>bool <span class=\"token function\">bmemoryInsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> group<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token comment\">//1、获取存储空间首地址</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> storageStartAdd <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>storageStartAdd <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token comment\">// 查无此块</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token comment\">//2、获取空间内存储地址</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> storageStartAdd<span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> current_datanum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token comment\">// 这里可以高级一点 --&gt;&gt; 但是需要注意，存储与读取要注意 &amp; lt;&lt; 小端模式 &gt;&gt;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token comment\">//uint16_t current_datanum = *(uint16_t *)Memory.data.Info.datanum;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token comment\">//3、判断重复，拿到块下所有数据</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token function\">vmemoryInquiryList</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>group<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;</span>current_datanum<span class=\"token punctuation\">;</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span>g<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>bymemoryreadbuffer<span class=\"token operator\">+</span>n<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token comment\">//4、计算插入数据</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token comment\">// 计算需要添加多少新页</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> current_data_shift <span class=\"token operator\">=</span> current_datanum<span class=\"token operator\">%</span>EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> needpage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>group <span class=\"token operator\">+</span> current_data_shift<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>EACHCHUNKINGDATAGROUP <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> needaddpage <span class=\"token operator\">=</span> needpage<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token comment\">// 获取添加的首地址</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> firstaddress <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetChunkAddDataAdd</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>    <span class=\"token comment\">//5、循环存入并更新计数值</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> writedatanum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token comment\">// 包括第一页，一共有 needpage 页需要写入</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>needpage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        needpage<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>needaddpage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>            <span class=\"token comment\">//!0 = 1 如果不需要创建新的块 -------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>writedatanum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>                <span class=\"token comment\">// 第一次写入</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>                <span class=\"token comment\">//write one by one</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> group<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>                                             firstaddress<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>current_data_shift<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>                                             MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>                <span class=\"token comment\">//change currentpage devnum</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>                writedatanum <span class=\"token operator\">+=</span> group<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>                <span class=\"token comment\">// 不会到这的、因为只会写入一次</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>            <span class=\"token comment\">// 需要创建新块 ----------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>writedatanum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>                <span class=\"token comment\">// 第一次写入，写入第一页剩余的个数的数据 页 - 数据 % 页 </span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>                <span class=\"token class-name\">uint32_t</span> firstpageresiduenum <span class=\"token operator\">=</span> EACHCHUNKINGDATAGROUP <span class=\"token operator\">-</span> current_datanum<span class=\"token operator\">%</span>EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> firstpageresiduenum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>                                             firstaddress<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>current_data_shift<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>                                             MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>                writedatanum <span class=\"token operator\">+=</span> firstpageresiduenum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>                <span class=\"token comment\">// 创建下一页</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>                <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>nextpageadd <span class=\"token operator\">=</span> <span class=\"token function\">pmemoryCreatNextChunk</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span><span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span>firstaddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>                <span class=\"token comment\">// 读取下一页</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>                Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>nextpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>                <span class=\"token comment\">// 后续写入</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>needpage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>                    <span class=\"token comment\">// 写中间的多页 --&gt; 因为创建完新页之后读出了新页 ， 所以直接取出的新页中的地址</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>                        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>writedatanum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>                                                 <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> POS_DATA_data <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span>\\</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>                                                 MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>                    writedatanum <span class=\"token operator\">+=</span> EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>                    <span class=\"token comment\">// 创建下一页</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>                    <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>nextpageadd <span class=\"token operator\">=</span> <span class=\"token function\">pmemoryCreatNextChunk</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>                    <span class=\"token comment\">// 读取下一页</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>nextpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>                        </pre></td></tr><tr><td data-num=\"295\"></td><td><pre>                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>                    <span class=\"token comment\">// 写最后一页</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>                    <span class=\"token comment\">// 计算最后一页剩余多少没写入</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>                    <span class=\"token class-name\">uint32_t</span> lastpageaddnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_data_shift <span class=\"token operator\">+</span> group<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lastpageaddnum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>                    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>                        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>writedatanum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>                                                 <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> POS_DATA_data <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span>\\</pre></td></tr><tr><td data-num=\"304\"></td><td><pre>                                                 MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    </pre></td></tr><tr><td data-num=\"305\"></td><td><pre>                    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>                    writedatanum <span class=\"token operator\">+=</span> lastpageaddnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token comment\">// 还需要写入数据计数信息</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>current_datanum<span class=\"token operator\">+</span>group<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>current_datanum<span class=\"token operator\">+</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">,</span>firstaddress<span class=\"token operator\">+</span>POS_DATA_datalength<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre></pre></td></tr><tr><td data-num=\"320\"></td><td><pre></pre></td></tr><tr><td data-num=\"321\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>*@fuction\t:*pmemoryCreatNextChunk</pre></td></tr><tr><td data-num=\"323\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"324\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"329\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token function\">pmemoryCreatNextChunk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>    <span class=\"token comment\">// 创建下一块</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>    <span class=\"token comment\">//1、拿到空闲地址</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> nextchunkadd <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetFreeAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>    <span class=\"token comment\">//2、写入块头</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处标识为非首块</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">,</span> nextchunkadd<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>    <span class=\"token comment\">//3、写入当前块的下一页地址</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span>nextchunkadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>POS_DATA_nextpageadd<span class=\"token punctuation\">,</span>  <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>    <span class=\"token comment\">//4、写入下一页的前一页</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span>nextchunkadd<span class=\"token operator\">+</span>POS_DATA_previouspageadd<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>    <span class=\"token comment\">//5、写入下一页的当前页</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span>nextchunkadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>nextchunkadd<span class=\"token operator\">+</span>POS_DATA_currentpageadd<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>    <span class=\"token comment\">//6、写入下一页的 Index</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>nextchunkadd<span class=\"token operator\">+</span>POS_DATA_infomation<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span>nextchunkadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre></pre></td></tr><tr><td data-num=\"349\"></td><td><pre></pre></td></tr><tr><td data-num=\"350\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>*@fuction\t:uimemoryGetChunkAddDataAdd</pre></td></tr><tr><td data-num=\"352\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"353\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"354\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"356\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"357\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"358\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetChunkAddDataAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>    <span class=\"token comment\">//1、获取编号首地址</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> storageStartAdd <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>    <span class=\"token comment\">//2、读取首页信息</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> storageStartAdd<span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>    <span class=\"token comment\">//3、循环迭代下一页</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>nextpageadd<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>nextpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>    <span class=\"token comment\">//4、返回地址</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre></pre></td></tr><tr><td data-num=\"374\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryDelete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> group<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>    <span class=\"token comment\">//1、获取存储控件首地址</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> storageStartAdd <span class=\"token operator\">=</span> <span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>    <span class=\"token comment\">//2、遍历删除数据</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>    <span class=\"token comment\">// 读取首页信息</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> storageStartAdd<span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>    <span class=\"token comment\">// 读取块的存储数据数量信息</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> datanum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> storagedatanum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>storagenum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>storagenum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>    <span class=\"token comment\">// 遍历删除的数据</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> deldatanum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>group<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>        <span class=\"token comment\">// 遍历当前页数据</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>            <span class=\"token comment\">// 如果相同就删除</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>                Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashErase</span><span class=\"token punctuation\">(</span>storageStartAdd<span class=\"token operator\">+</span>POS_DATA_data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>                deldatanum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>    <span class=\"token punctuation\">}</span>    </pre></td></tr><tr><td data-num=\"396\"></td><td><pre>    <span class=\"token comment\">// 循环迭代下一页</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>nextpageadd<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>nextpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>        <span class=\"token comment\">// 遍历删除的数据</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>group<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>            <span class=\"token comment\">// 遍历当前页数据</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>EACHCHUNKINGDATAGROUP<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>                <span class=\"token comment\">// 如果相同就删除</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>                    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashErase</span><span class=\"token punctuation\">(</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>POS_DATA_data<span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">,</span>MEMORYEACHGROUPDATALENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>                    deldatanum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>        <span class=\"token comment\">// 如果当前块没有存储数据了，删除</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>    <span class=\"token comment\">//3、更新计数值</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>    datanum<span class=\"token operator\">-=</span>deldatanum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>datanum<span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>datanum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>    Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashWrite</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>datanum<span class=\"token punctuation\">,</span>storageStartAdd<span class=\"token operator\">+</span>POS_DATA_datalength<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre></pre></td></tr><tr><td data-num=\"421\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryInquiryList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>    <span class=\"token comment\">//1、获取块的 Index 下的所有存储 data-&gt; 读取到 bymemoryreadbuffer</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre></pre></td></tr><tr><td data-num=\"425\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre></pre></td></tr><tr><td data-num=\"427\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemoryInquiry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>    <span class=\"token comment\">//1、获取基本信息 地址 存储数据数量</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre></pre></td></tr><tr><td data-num=\"431\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre></pre></td></tr><tr><td data-num=\"433\"></td><td><pre></pre></td></tr><tr><td data-num=\"434\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryInquiryChunking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>    <span class=\"token comment\">//1、获取所有存储块列表</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>    <span class=\"token comment\">//2、返回存储块数量</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"441\"></td><td><pre></pre></td></tr><tr><td data-num=\"442\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>*@fuction\t:uimemoryGetChunkAdd</pre></td></tr><tr><td data-num=\"444\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"445\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"446\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"447\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"448\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"449\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"450\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetChunkAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre>    <span class=\"token comment\">// 读出块索引的信息</span></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> indexnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> indexnum <span class=\"token operator\">&lt;</span> MEMORYINDEX_CHUNKINGINDEX_NUM<span class=\"token punctuation\">;</span> indexnum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>        <span class=\"token comment\">// 读出 第一块是数量所以跳过 + 256</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Byte<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>memorystartaddress <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>indexnum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>        <span class=\"token comment\">// 判断每一块信息索引中是否有重复的块 index</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> MEMORYINDEX_CHUNKINGINFO_NUM<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>            <span class=\"token comment\">// 如果块索引号一致，块索引信息重复、创建块失败</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>infomation<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>currentpageadd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"469\"></td><td><pre></pre></td></tr><tr><td data-num=\"470\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre>*@fuction\t:uimemoryGetDataPos</pre></td></tr><tr><td data-num=\"472\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"473\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"474\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"475\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"476\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"477\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"478\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetDataPos</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> Startaddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"480\"></td><td><pre>    <span class=\"token comment\">// 定位数据</span></pre></td></tr><tr><td data-num=\"481\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tempPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"482\"></td><td><pre>    <span class=\"token comment\">// 计算一次读出多少组</span></pre></td></tr><tr><td data-num=\"483\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> buffergroup <span class=\"token operator\">=</span> length <span class=\"token operator\">/</span> MEMORYREADBUFFERSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"484\"></td><td><pre>    <span class=\"token comment\">// 根据给定的长度计算偏移量</span></pre></td></tr><tr><td data-num=\"485\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> buffershifting <span class=\"token operator\">=</span> length <span class=\"token operator\">%</span> MEMORYREADBUFFERSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre>    <span class=\"token comment\">// 方向 -&gt; 增</span></pre></td></tr><tr><td data-num=\"487\"></td><td><pre>    bool direction <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"488\"></td><td><pre>    <span class=\"token comment\">// 查询组计数</span></pre></td></tr><tr><td data-num=\"489\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> groupcount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre></pre></td></tr><tr><td data-num=\"491\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> g <span class=\"token operator\">&lt;=</span> buffergroup<span class=\"token punctuation\">;</span> g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"493\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g <span class=\"token operator\">!=</span> buffergroup<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"494\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"495\"></td><td><pre>            <span class=\"token comment\">// 如果不是最后一组</span></pre></td></tr><tr><td data-num=\"496\"></td><td><pre>            Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>bymemoryreadbuffer<span class=\"token punctuation\">,</span> Startaddress <span class=\"token operator\">+</span> MEMORYREADBUFFERSIZE <span class=\"token operator\">*</span> g<span class=\"token punctuation\">,</span> MEMORYREADBUFFERSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>            tempPos <span class=\"token operator\">=</span> MEMORYREADBUFFERSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"498\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"499\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"500\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"501\"></td><td><pre>            <span class=\"token comment\">// 最后一组，只需要读取偏移量大小的数据</span></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>            Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>bymemoryreadbuffer<span class=\"token punctuation\">,</span> Startaddress <span class=\"token operator\">+</span> MEMORYREADBUFFERSIZE <span class=\"token operator\">*</span> g<span class=\"token punctuation\">,</span> buffershifting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"503\"></td><td><pre>            tempPos <span class=\"token operator\">=</span> buffershifting<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"505\"></td><td><pre>        <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"506\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>            <span class=\"token comment\">// 计算每组数据的中间位置，为 0 时退出循环</span></pre></td></tr><tr><td data-num=\"508\"></td><td><pre>            tempPos <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre>            <span class=\"token comment\">// 根据方向 增 / 减</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>            direction <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">-=</span> tempPos<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">+=</span> tempPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"511\"></td><td><pre>            <span class=\"token comment\">// 判断数据是否为空（ 如果为空，数据在前面 / 如果不为空，数据在后面 ）</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre>            <span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span>bycheckarray<span class=\"token punctuation\">,</span> bymemoryreadbuffer <span class=\"token operator\">+</span> position<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">=</span> true<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">=</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"513\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"514\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tempPos <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"515\"></td><td><pre>        <span class=\"token comment\">// 如果得到的数据在当前块内</span></pre></td></tr><tr><td data-num=\"516\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>MEMORYREADBUFFERSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"517\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre>            <span class=\"token comment\">// 拿到当前组</span></pre></td></tr><tr><td data-num=\"519\"></td><td><pre>            groupcount <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"520\"></td><td><pre>            <span class=\"token comment\">// 退出循环</span></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"522\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"524\"></td><td><pre>    <span class=\"token comment\">// 计算最后的定位</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>    position <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre>    <span class=\"token comment\">// 这里做最后的校准</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bymemoryreadbuffer<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"528\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>        position<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"531\"></td><td><pre>    <span class=\"token comment\">// 得到 FF 所在的位置</span></pre></td></tr><tr><td data-num=\"532\"></td><td><pre>    position <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>groupcount <span class=\"token operator\">*</span> MEMORYREADBUFFERSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"533\"></td><td><pre></pre></td></tr><tr><td data-num=\"534\"></td><td><pre>    <span class=\"token comment\">// 根据给定的起始地址得出数据最终的地址</span></pre></td></tr><tr><td data-num=\"535\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">+</span> Startaddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"536\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre></pre></td></tr><tr><td data-num=\"538\"></td><td><pre></pre></td></tr><tr><td data-num=\"539\"></td><td><pre></pre></td></tr><tr><td data-num=\"540\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"541\"></td><td><pre>*@fuction\t:uimemoryGetFreeAddress</pre></td></tr><tr><td data-num=\"542\"></td><td><pre>*@brief\t\t: 获取一块空闲的块地址</pre></td></tr><tr><td data-num=\"543\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"544\"></td><td><pre>*@return\t: uint32_t 空闲块的地址</pre></td></tr><tr><td data-num=\"545\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"546\"></td><td><pre>*@date\t\t:2023-05-23</pre></td></tr><tr><td data-num=\"547\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"548\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uimemoryGetFreeAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"549\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"550\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MEMORYDATA_CHUNKING_NUMBER<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"551\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"552\"></td><td><pre>        <span class=\"token comment\">// 地址 = 存储信息的首地址 + 第几块 * 每一块的大小</span></pre></td></tr><tr><td data-num=\"553\"></td><td><pre>        <span class=\"token class-name\">uint32_t</span> currentaddress <span class=\"token operator\">=</span> MEMORYDATA_CHUNKING_STARTADDRESS <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> MEMORYCHUNKINGSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"554\"></td><td><pre>        <span class=\"token comment\">// 读出块头</span></pre></td></tr><tr><td data-num=\"555\"></td><td><pre>        Memory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">FlashRead</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">,</span> currentaddress<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"556\"></td><td><pre>        <span class=\"token comment\">// 如果块头为 FF</span></pre></td></tr><tr><td data-num=\"557\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span>bycheckarray<span class=\"token punctuation\">,</span> Memory<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Info<span class=\"token punctuation\">.</span>chunkinghead<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"558\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"559\"></td><td><pre>            <span class=\"token comment\">// 返回块的地址</span></pre></td></tr><tr><td data-num=\"560\"></td><td><pre>            <span class=\"token keyword\">return</span> currentaddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"561\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"562\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"563\"></td><td><pre>    <span class=\"token comment\">// 到这里就说明存储满了</span></pre></td></tr><tr><td data-num=\"564\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"565\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"566\"></td><td><pre></pre></td></tr><tr><td data-num=\"567\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"568\"></td><td><pre>*@fuction\t:*vmemorymamagementGetAddressArray</pre></td></tr><tr><td data-num=\"569\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"570\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"571\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"572\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"573\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"574\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"575\"></td><td><pre><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token function\">vmemorymamagementGetAddressArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"576\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> addarray<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"578\"></td><td><pre>    addarray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> address <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"579\"></td><td><pre>    addarray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> address <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>    addarray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> address <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"581\"></td><td><pre>    addarray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>    <span class=\"token keyword\">return</span> addarray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"584\"></td><td><pre></pre></td></tr><tr><td data-num=\"585\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"586\"></td><td><pre>*@fuction\t:vmemorymamagementClearArray</pre></td></tr><tr><td data-num=\"587\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"588\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"589\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"590\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"591\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"592\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"593\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemorymamagementClearArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"594\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"595\"></td><td><pre>    <span class=\"token comment\">// 跟这个函数一样的</span></pre></td></tr><tr><td data-num=\"596\"></td><td><pre>    <span class=\"token comment\">//memset(source,0,length);</span></pre></td></tr><tr><td data-num=\"597\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"599\"></td><td><pre>        source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"600\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"601\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"602\"></td><td><pre></pre></td></tr><tr><td data-num=\"603\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"604\"></td><td><pre>*@fuction\t:vmemory_U8Arr_To_uint32</pre></td></tr><tr><td data-num=\"605\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"606\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"607\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"608\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"609\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"610\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"611\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">vmemory_U8Arr_To_uint32</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"612\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"614\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"615\"></td><td><pre></pre></td></tr><tr><td data-num=\"616\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"617\"></td><td><pre>*@fuction\t:vmemorymamagementGetChunkingnumberAddress</pre></td></tr><tr><td data-num=\"618\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"619\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"620\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"621\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"622\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"623\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"624\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">vmemorymamagementGetChunkingnumberAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> chunkingnumber<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"625\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"626\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>chunkingnumber <span class=\"token operator\">*</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> MEMORYINDEX_CHUNKINGINDEX_FIRSTADDRESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"627\"></td><td><pre>    <span class=\"token keyword\">return</span> add<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"628\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"629\"></td><td><pre></pre></td></tr><tr><td data-num=\"630\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"631\"></td><td><pre>*@fuction\t:vmemorymamagementCopyArray</pre></td></tr><tr><td data-num=\"632\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"633\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"634\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"635\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"636\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"637\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"638\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vmemorymamagementCopyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"639\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"640\"></td><td><pre>    <span class=\"token comment\">// 跟这个函数一样的</span></pre></td></tr><tr><td data-num=\"641\"></td><td><pre>    <span class=\"token comment\">//memcpy(target,source,length);</span></pre></td></tr><tr><td data-num=\"642\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"644\"></td><td><pre>        target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"645\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"646\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"647\"></td><td><pre></pre></td></tr><tr><td data-num=\"648\"></td><td><pre><span class=\"token comment\">/***********************************************************</span></pre></td></tr><tr><td data-num=\"649\"></td><td><pre>*@fuction\t:bmemoryCheckArraySame</pre></td></tr><tr><td data-num=\"650\"></td><td><pre>*@brief\t\t:</pre></td></tr><tr><td data-num=\"651\"></td><td><pre>*@param\t\t:--</pre></td></tr><tr><td data-num=\"652\"></td><td><pre>*@return\t:void</pre></td></tr><tr><td data-num=\"653\"></td><td><pre>*@author\t:flechazo 更多例程请访问 (flechazo.mba)</pre></td></tr><tr><td data-num=\"654\"></td><td><pre>*@date\t\t:2023-07-29</pre></td></tr><tr><td data-num=\"655\"></td><td><pre>***********************************************************/</pre></td></tr><tr><td data-num=\"656\"></td><td><pre>bool <span class=\"token function\">bmemoryCheckArraySame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>sourcearray<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>targetarray<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"658\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"659\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"660\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sourcearray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> targetarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"661\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"662\"></td><td><pre>            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"663\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"664\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"665\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>同时和存储相关的推荐大家看一下这个</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"GD25Q64存储芯片的读写驱动\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82Mzg4NTc4MzI=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82Mzg4NTc4MzI=\">GD25Q64存储芯片的读写驱动</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/638857832</p>\n          </div></div></div><p></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "GD25Q64"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/ea828494.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/ea828494.html",
            "title": "QT一键运行bat脚本文件",
            "date_published": "2023-08-02T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>QT 一键运行 bat 脚本文件运行 frpc 内网穿透</p>\n<h2 id=\"1-搭建frps\"><a class=\"anchor\" href=\"#1-搭建frps\">#</a> 1、搭建 frps</h2>\n<p>教程看这篇文章</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"frps内网穿透搭建教程\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MzU0NjI5MjA=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MzU0NjI5MjA=\">frps内网穿透搭建教程</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/635462920</p>\n          </div></div></div><p></p>\n<h2 id=\"2-编写bat脚本\"><a class=\"anchor\" href=\"#2-编写bat脚本\">#</a> 2、编写 bat 脚本</h2>\n<p><img data-src=\"../../../img.assets/23-8-3QT%E4%B8%80%E9%94%AE%E8%BF%90%E8%A1%8Cbat%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6.assets/image-20230802103840478.png\" alt=\"image-20230802103840478\"></p>\n<p>两行就搞定</p>\n<p>这个脚本原本是写好的，直接点击就可以打开穿透。</p>\n<p>现在只是让 QT 帮我们打开它</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>frpc<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">-</span>c frpc<span class=\"token punctuation\">.</span>ini</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pause</pre></td></tr></tbody></table></figure><h2 id=\"3-qt执行脚本\"><a class=\"anchor\" href=\"#3-qt执行脚本\">#</a> 3、QT 执行脚本</h2>\n<pre><code class=\"language-c++\">#include &lt;QProcess&gt;\n\nbool MainWindow::bfrpsstart(bool status){\n\n    static QProcess *frpprocess = new QProcess;\n    if(status){\n        //打开\n        if(frpinitflag){\n            //已经初始化了\n            return true;\n        }\n        //打开cmd\n        frpprocess-&gt;start(\"cmd\");\n        frpprocess-&gt;waitForStarted();\n        //获取当前路径\n        QString currentdir = QCoreApplication::applicationDirPath();\n        //路径下放一个文件夹frps【这个是我自己内网穿透时用的】\n        QString frpcmdpath = \"cd \" + currentdir+\"/frps/ \";\n        //bat文件名称【不需要带后面的.bat】\n        QString frpcmdfile = \"&amp;&amp; start startfrps\\n\";\n        QString frpcmdstr = frpcmdpath+frpcmdfile;\n\n        qDebug()&lt;&lt;frpcmdstr;//输出一下\n\n        QByteArray frpcmdarr = frpcmdstr.toLatin1();\n        //向命令行写入命令\n        frpprocess-&gt;write(frpcmdarr);\n\n        //等待完成\n        frpprocess-&gt;waitForFinished(1000);\n        //读取命令行输出\n        QByteArray qbt = frpprocess-&gt;readAllStandardOutput();\n        QString msg = QString::fromLocal8Bit(qbt);\n        qDebug()&lt;&lt;msg;\n        ui-&gt;textEdit_Socket_Server_RecvData-&gt;append(msg);\n\n        frpinitflag = true;\n        return true;\n\n    }else{\n        //关闭\n        frpprocess-&gt;kill();\n\n        frpinitflag = false;\n        return false;\n    }\n}\n</code></pre>\n<p>就酱紫</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/85c52c40.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/85c52c40.html",
            "title": "串口通信中的接收与发送队列处理大数据",
            "date_published": "2023-08-02T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"接收与发送队列\"><a class=\"anchor\" href=\"#接收与发送队列\">#</a> 接收与发送队列</h2>\n<p>在开发过程中，当数据流变大时，消息总是处理不过来。</p>\n<h2 id=\"会出现3个问题\"><a class=\"anchor\" href=\"#会出现3个问题\">#</a> 会出现 3 个问题：</h2>\n<p>1、接收数据太多</p>\n<p>2、接收数据连包</p>\n<p>3、阻塞式响应</p>\n<h2 id=\"咱们一个一个来解决这个问题\"><a class=\"anchor\" href=\"#咱们一个一个来解决这个问题\">#</a> 咱们一个一个来解决这个问题。</h2>\n<h3 id=\"1-接收队列\"><a class=\"anchor\" href=\"#1-接收队列\">#</a> 1、接收队列</h3>\n<p>接收数据多，来不及处理下一条就又来了。</p>\n<p>解决这个的办法就是接收时放到数组里，然后一条一条的去解析。</p>\n<p>这里移植野火的数据队列</p>\n<p>食用步骤：</p>\n<ul>\n<li>rx_queue_init ();// 初始化一下</li>\n<li>push_data_to_queue (uint8_t *src_dat,uint16_t src_len);// 这个函数存入数据队列，接收时用</li>\n<li>pull_data_from_queue ();// 这个从队列中取出，处理时用</li>\n</ul>\n<p>data_queue.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__ESP_DATA_QUEUE_H_</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__ESP_DATA_QUEUE_H_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"gd32f30x.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 缓冲队列的个数需要为 2 的幂</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUEUE_NODE_NUM</span>        <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>            </span><span class=\"token comment\">// 缓冲队列的大小（有多少个缓冲区）</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUEUE_NODE_DATA_LEN</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>       </span><span class=\"token comment\">// 单个接收缓冲区大小</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 队列的主体数据类型接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUEUE_DATA_TYPE</span>  \t\t\t\t<span class=\"token expression\">ESP_USART_FRAME</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 队列的调试输出接口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DATA_QUEUE_LOG</span>  \t\t\t\t<span class=\"token expression\">QUEUE_DEBUG</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DATA_QUEUE_LOG_ARRAY</span> \t\t<span class=\"token expression\">QUEUE_DEBUG_ARRAY</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 数据主体</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span>  <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 缓冲区头指针</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">uint16_t</span> len<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接收到的数据长度</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span>ESP_USART_FRAME<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 队列结构</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 缓冲区大小 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">int</span> read<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 读指针 */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">int</span> write<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 写指针 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">int</span> read_using<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 正在读取的缓冲区指针 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> write_using<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">/* 正在写入的缓冲区指针 */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tQUEUE_DATA_TYPE <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">[</span>QUEUE_NODE_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 缓冲区地址 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">}</span> QueueBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">extern</span> QueueBuffer rx_queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/* 信息输出 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUEUE_DEBUG_ON</span>          <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">QUEUE_DEBUG_ARRAY_ON</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">QUEUE_INFO</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>           <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"&lt;&lt;-QUEUE-INFO-&gt;&gt; \"</span><span class=\"token expression\">fmt</span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">##</span><span class=\"token expression\">arg<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">QUEUE_ERROR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"&lt;&lt;-QUEUE-ERROR-&gt;&gt; \"</span><span class=\"token expression\">fmt</span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">##</span><span class=\"token expression\">arg<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">QUEUE_DEBUG</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>          <span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>QUEUE_DEBUG_ON<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                          <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"&lt;&lt;-QUEUE-DEBUG-&gt;&gt; [%d]\"</span><span class=\"token expression\">fmt</span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">##</span><span class=\"token expression\">arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                          <span class=\"token expression\"><span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">QUEUE_DEBUG_ARRAY</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>    <span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t\t\t\t\t\t   <span class=\"token expression\"><span class=\"token class-name\">int32_t</span> i<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                                           <span class=\"token expression\"><span class=\"token class-name\">uint8_t</span><span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                                           <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>QUEUE_DEBUG_ARRAY_ON<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                                           <span class=\"token expression\"><span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                                             \t<span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"\\n&lt;&lt;-QUEUE-DEBUG-ARRAY-&gt;&gt;\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                                             \t<span class=\"token expression\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                                                <span class=\"token expression\"><span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                                                    <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"%02x   \"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                                    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                                    <span class=\"token expression\"><span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                                        <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                                    <span class=\"token expression\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                                                <span class=\"token expression\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                            \t<span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                            <span class=\"token expression\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                           <span class=\"token expression\"><span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 输出队列的状态信息</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">cbPrint</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>\t\t    <span class=\"token function\">DATA_QUEUE_LOG</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"size=0x%x, read=%d, write=%d\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t  <span class=\"token expression\"><span class=\"token function\">DATA_QUEUE_LOG</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"size=0x%x, read_using=%d, write_using=%d\\n\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span>read_using<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span>write_using<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>QUEUE_DATA_TYPE<span class=\"token operator\">*</span> <span class=\"token function\">cbWrite</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>QUEUE_DATA_TYPE<span class=\"token operator\">*</span> <span class=\"token function\">cbRead</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">cbReadFinish</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">cbWriteFinish</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">//void cbPrint(QueueBuffer *cb);</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>QUEUE_DATA_TYPE<span class=\"token operator\">*</span> <span class=\"token function\">cbWriteUsing</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cbIsFull</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cbIsEmpty</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rx_queue_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">pull_data_from_queue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push_data_to_queue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>src_dat<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint16_t</span> src_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></tbody></table></figure><p>data_queue.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ******************************************************************************</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * @file    rx_data_queue.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  * @author  fire</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  * @version V1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @date    2015-01-xx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @brief   环形缓冲区，适用于接收外部数据时用作缓冲</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  ******************************************************************************</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @attention</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  * 实验平台：野火 IOT STM32 开发板</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * 论坛    :http://www.firebbs.cn</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  * 淘宝    :https://fire-stm32.taobao.com</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  ******************************************************************************</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"data_queue.h\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 实例化节点数据类型</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>QUEUE_DATA_TYPE  node_data<span class=\"token punctuation\">[</span>QUEUE_NODE_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 实例化队列类型</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>QueueBuffer rx_queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 队列缓冲区的内存池</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">__align</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">uint8_t</span> node_buff<span class=\"token punctuation\">[</span>QUEUE_NODE_NUM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>QUEUE_NODE_DATA_LEN<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/* 环形缓冲队列 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  * @brief  初始化缓冲队列</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  * @param  size: 缓冲队列的元素个数</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  * @note \t初始化时还需要给 cb-&gt;elems 指针赋值</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">cbInit</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cb<span class=\"token operator\">-&gt;</span>size  <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* maximum number of elements           */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    cb<span class=\"token operator\">-&gt;</span>read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">/* index of oldest element              */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cb<span class=\"token operator\">-&gt;</span>write   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \t \t<span class=\"token comment\">/* index at which to write new element  */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//    cb-&gt;elems = (uint8_t *) calloc (cb-&gt;size, sizeof (uint8_t));  //elems 要额外初始化</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  * @brief  判断缓冲队列是 (1) 否 (0) 已满</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cbIsFull</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> cb<span class=\"token operator\">-&gt;</span>write <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>cb<span class=\"token operator\">-&gt;</span>read <span class=\"token operator\">^</span> cb<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* This inverts the most significant bit of read before comparison */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  * @brief  判断缓冲队列是 (1) 否 (0) 全空</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cbIsEmpty</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> cb<span class=\"token operator\">-&gt;</span>write <span class=\"token operator\">==</span> cb<span class=\"token operator\">-&gt;</span>read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  * @brief  对缓冲队列的指针加 1</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  * @param  p：要加 1 的指针</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  * @return  返回加 1 的结果</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cbIncr</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> cb<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* read and write pointers incrementation is done modulo 2*size */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  * @brief  获取可写入的缓冲区指针</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  * @return  可进行写入的缓冲区指针</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  * @note  得到指针后可进入写入操作，但写指针不会立即加 1，</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>           写完数据时，应调用 cbWriteFinish 对写指针加 1</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>QUEUE_DATA_TYPE <span class=\"token operator\">*</span><span class=\"token function\">cbWrite</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cbIsFull</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* full, overwrite moves read pointer */</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">// 当 wriet 和 write_using 相等时，表示上一个缓冲区已写入完毕，需要对写指针加 1</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cb<span class=\"token operator\">-&gt;</span>write <span class=\"token operator\">==</span> cb<span class=\"token operator\">-&gt;</span>write_using<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            cb<span class=\"token operator\">-&gt;</span>write_using <span class=\"token operator\">=</span> <span class=\"token function\">cbIncr</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> cb<span class=\"token operator\">-&gt;</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 未满，则增加 1</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">return</span>  cb<span class=\"token operator\">-&gt;</span>elems<span class=\"token punctuation\">[</span>cb<span class=\"token operator\">-&gt;</span>write_using <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>cb<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  * @brief 数据写入完毕，更新写指针到缓冲结构体</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">cbWriteFinish</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    cb<span class=\"token operator\">-&gt;</span>write <span class=\"token operator\">=</span> cb<span class=\"token operator\">-&gt;</span>write_using<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  * @brief  获取可读取的缓冲区指针</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  * @return  可进行读取的缓冲区指针</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  * @note  得到指针后可进入读取操作，但读指针不会立即加 1，</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t\t 读取完数据时，应调用 cbReadFinish 对读指针加 1</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>QUEUE_DATA_TYPE <span class=\"token operator\">*</span><span class=\"token function\">cbRead</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">cbIsEmpty</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">// 当 read 和 read_using 相等时，表示上一个缓冲区已读取完毕 (即已调用 cbReadFinish)，</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">// 需要对写指针加 1</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cb<span class=\"token operator\">-&gt;</span>read <span class=\"token operator\">==</span> cb<span class=\"token operator\">-&gt;</span>read_using<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        cb<span class=\"token operator\">-&gt;</span>read_using <span class=\"token operator\">=</span> <span class=\"token function\">cbIncr</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> cb<span class=\"token operator\">-&gt;</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">return</span> cb<span class=\"token operator\">-&gt;</span>elems<span class=\"token punctuation\">[</span>cb<span class=\"token operator\">-&gt;</span>read_using <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>cb<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  * @brief 数据读取完毕，更新读指针到缓冲结构体</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  * @param  cb: 缓冲队列结构体</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">cbReadFinish</span><span class=\"token punctuation\">(</span>QueueBuffer <span class=\"token operator\">*</span>cb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\">// 重置当前读完的数据节点的长度</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    cb<span class=\"token operator\">-&gt;</span>elems<span class=\"token punctuation\">[</span>cb<span class=\"token operator\">-&gt;</span>read_using <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>cb<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-&gt;</span>len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    cb<span class=\"token operator\">-&gt;</span>read <span class=\"token operator\">=</span> cb<span class=\"token operator\">-&gt;</span>read_using<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\">// 队列的指针指向的缓冲区全部销毁</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">camera_queue_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> QUEUE_NODE_NUM<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token comment\">// 若是动态申请的空间才要 free</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token comment\">//free(node_data[i].head);</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            node_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  * @brief  缓冲队列初始化，分配内存，使用缓冲队列时，</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  * @param  无</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  * @retval 无</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rx_queue_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>node_data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">/* 初始化缓冲队列 */</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token function\">cbInit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rx_queue<span class=\"token punctuation\">,</span> QUEUE_NODE_NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> QUEUE_NODE_NUM<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        node_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node_buff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token comment\">/* 初始化队列缓冲指针，指向实际的内存 */</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        rx_queue<span class=\"token punctuation\">.</span>elems<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token comment\">//DATA_QUEUE_LOG(\"node_data[i].head=0x%x,\\r\\nrx_queue.elems[i] =0x%x\", (uint32_t)node_data[i].head,(uint32_t)rx_queue.elems[i]-&gt;head);</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>node_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> QUEUE_NODE_DATA_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token function\">cbPrint</span><span class=\"token punctuation\">(</span>rx_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  * @brief  往队列中写入数据的样例</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push_data_to_queue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>src_dat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> src_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    QUEUE_DATA_TYPE <span class=\"token operator\">*</span>data_p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> src_len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token comment\">/* 获取写缓冲区指针，准备写入新数据 */</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        data_p <span class=\"token operator\">=</span> <span class=\"token function\">cbWrite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rx_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data_p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 若缓冲队列未满，开始传输</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            <span class=\"token comment\">// 往缓冲区写入数据，如使用串口接收、dma 写入等方式</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>            <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>data_p<span class=\"token operator\">-&gt;</span>head <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> src_dat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>            data_p<span class=\"token operator\">-&gt;</span>len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>            <span class=\"token comment\">//printf(\"\\r\\ndata_p-&gt;len =%d\",data_p-&gt;len);</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token comment\">//cbPrint(rx_queue);</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token comment\">/* 写入缓冲区完毕 */</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token function\">cbWriteFinish</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rx_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token comment\">//cbPrint(rx_queue);</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token class-name\">uint8_t</span> datasource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">vprotocolplatformProcess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>DataBuffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> DataLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token keyword\">extern</span> ControllerFun_union ControllerFun<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token keyword\">extern</span> ControllerID_union ControllerID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token keyword\">extern</span> BufferReceive_union bufferCmd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token keyword\">extern</span> bool <span class=\"token function\">vprotocolplatformCheckID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">vprotocolplatformParsing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre><span class=\"token keyword\">extern</span> bool <span class=\"token function\">vprotocolplatformCheckIsFunofCheckTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre><span class=\"token keyword\">extern</span> bool BufferRecieveFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre></pre></td></tr><tr><td data-num=\"239\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>  * @brief  从队列中取数据的样例</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">pull_data_from_queue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    QUEUE_DATA_TYPE <span class=\"token operator\">*</span>rx_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token comment\">/* 从缓冲区读取数据，进行处理，*/</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    rx_data <span class=\"token operator\">=</span> <span class=\"token function\">cbRead</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rx_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rx_data <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 缓冲队列非空</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token comment\">// 处理接收数据 ------------------------------ 在这处理数据 ------------------------------------------------</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token comment\">// 数据头指针 rx_data-&gt;head，数据长度 rx_data-&gt;len</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token comment\">// 使用完数据必须调用 cbReadFinish 更新读指针 --------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>        <span class=\"token function\">cbReadFinish</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rx_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>到这里，大家可以试一下，是不是非常好用。感谢野火官方。大家可以去看看野火的教程，真的非常细！良心推荐。</p>\n<h3 id=\"2-数据连包\"><a class=\"anchor\" href=\"#2-数据连包\">#</a> 2、数据连包</h3>\n<p>两条数据连接一起了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这个看大家的数据格式了。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 根据自己的数据格式自行解析吧！</span></pre></td></tr></tbody></table></figure><h3 id=\"3-发送队列\"><a class=\"anchor\" href=\"#3-发送队列\">#</a> 3、发送队列</h3>\n<p>既然可以接收，那么也可以发送啦😊</p>\n<p>食用步骤：</p>\n<p>1、vsendqueueInit ();// 初始化一下</p>\n<p>2、vsendqueueSendQueue ();// 队列发送，这个放在主循环中</p>\n<p>3、bsendqueueInsert (uint8_t *data,uint32_t len);// 插入数据，等待发送</p>\n<p>根据野火的例程，随手写了一下。逻辑图如下：</p>\n<p><img data-src=\".%5Cimage-20230801143036999.png\" alt=\"image-20230801143036999\"></p>\n<p>sendqueue.h</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__SENDQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__SENDQUEUE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"gd32f30x.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 队列的数量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEND_QUEUE_DATA_NUMBER</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">//8</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 单个队列的长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SEND_QUEUE_DATA_SIZE</span>   <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">//1024</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 用于存储数据的信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span>  <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">uint16_t</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span>SEND_QUEUE_DATA_STRUCT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 用于调整数据发送的间隔</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> send_interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">}</span>SEND_QUEUE_TIME_STRUCT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 存储信息</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> send_c<span class=\"token punctuation\">;</span><span class=\"token comment\">// 发送计数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> storage_c<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储计数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>send_p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 发送指针    数据是连续存储的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>storage_p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储指针</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 数据存放的数组</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span> qbuffer<span class=\"token punctuation\">[</span>SEND_QUEUE_DATA_NUMBER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>SEND_QUEUE_DATA_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 时间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tSEND_QUEUE_TIME_STRUCT TIME<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 队列的头指针和数据长度</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tSEND_QUEUE_DATA_STRUCT DATA<span class=\"token punctuation\">[</span>SEND_QUEUE_DATA_NUMBER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span>SEND_QUEUE_CONTROLLER_STRUCT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vsendqueueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 队列发送，这个放在主循环中</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vsendqueueSendQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 插入数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>bool <span class=\"token function\">bsendqueueInsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>   <span class=\"token comment\">//__SENDQUEUE_H</span></span></pre></td></tr></tbody></table></figure><p>sendqueue.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../User/FUN/sendqueue/sendqueue.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"../User/BSP/TIMER1/timer.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"controllerconfig.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdlib.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果开启了这个功能，再编译，如果都没有，代码是灰色的，这个是为了模块化</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>USE_SEND_BUFFER_QUEUE_RS485<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>USE_SEND_BUFFER_QUEUE_LORA<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//timer.c</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">extern</span> Timer_struct FlechazoTimer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//1、a manage struct</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>SEND_QUEUE_CONTROLLER_STRUCT S_QUEUE_CTL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>bool <span class=\"token function\">bsendqueueSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vsendqueueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 时间计数值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>TIME<span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> FlechazoTimer<span class=\"token punctuation\">.</span>Control<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentTime_ms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 每次进入发送的时间间隔</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>TIME<span class=\"token punctuation\">.</span>send_interval <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>send_c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>send_p <span class=\"token operator\">=</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>qbuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_p <span class=\"token operator\">=</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>qbuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//2、a send queue buffer    mode---lora or rs485 ?</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vsendqueueSendQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 判断是否超时</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>FlechazoTimer<span class=\"token punctuation\">.</span>Control<span class=\"token punctuation\">.</span><span class=\"token function\">IsTimeOut_ms</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>TIME<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">,</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>TIME<span class=\"token punctuation\">.</span>send_interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//1、have data 存储和发送不相等就是有数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_c <span class=\"token operator\">!=</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>send_c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token function\">bsendqueueSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        S_QUEUE_CTL<span class=\"token punctuation\">.</span>TIME<span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> FlechazoTimer<span class=\"token punctuation\">.</span>Control<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentTime_ms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//3、insert queue</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>bool <span class=\"token function\">bsendqueueInsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//pos storage</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>SEND_QUEUE_DATA_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//return false;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_p <span class=\"token operator\">=</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>qbuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">//insert</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_p<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">//storage info</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>DATA<span class=\"token punctuation\">[</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>DATA<span class=\"token punctuation\">[</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    S_QUEUE_CTL<span class=\"token punctuation\">.</span>storage_p <span class=\"token operator\">+=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">//4、send queue</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>bool <span class=\"token function\">bsendqueueSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">//2、check send status</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token comment\">//485</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>SET <span class=\"token operator\">!=</span> <span class=\"token function\">usart_flag_get</span><span class=\"token punctuation\">(</span>rUSARTx<span class=\"token punctuation\">,</span> USART_FLAG_BSY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//3、send</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>send_c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> SEND_QUEUE_DATA_NUMBER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t\t\tS_QUEUE_CTL<span class=\"token punctuation\">.</span>send_c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//485</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\t<span class=\"token function\">vrs485Send</span><span class=\"token punctuation\">(</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>DATA<span class=\"token punctuation\">[</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>send_c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> S_QUEUE_CTL<span class=\"token punctuation\">.</span>DATA<span class=\"token punctuation\">[</span>S_QUEUE_CTL<span class=\"token punctuation\">.</span>send_c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//((USE_SEND_BUFFER_QUEUE_RS485==1))||((USE_SEND_BUFFER_QUEUE_LORA==1))</span></span></pre></td></tr></tbody></table></figure><p>那么到这，你就可以试一下啦！</p>\n<p>连续快速发 5 条，看看他的回复。</p>\n<p><img data-src=\".%5Cimage-20230802085116169.png\" alt=\"image-20230802085116169\"></p>\n<p>终于可以愉快的处理大数据了！</p>\n<p>当然你也可以再加上 DMA，没有频繁的中断响应，反应速度更快啦！</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"QT键值对处理协议解析\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDMxODEwMDQ=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDMxODEwMDQ=\">QT键值对处理协议解析</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/643181004</p>\n          </div></div></div><p></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3d4fc45a.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3d4fc45a.html",
            "title": "QT中的数据类型转换小本本",
            "date_published": "2023-08-01T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>最近这令人头疼的就是各种类型的转换了</p>\n<p>所以打算出一篇数据类型转换的文章，记录一下我所用到的实测可以用的类型转换方法。以后就不用这度娘那 Google 了。</p>\n<h2 id=\"进制转换\"><a class=\"anchor\" href=\"#进制转换\">#</a> 进制转换</h2>\n<pre><code class=\"language-c++\">//10进制数转任意进制\nchar *decimal2Others (int value, char *string, int radix) {\n    char index[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; /* 索引表 */\n    unsigned uvalue; /* 无符号整型的中间变量，用于处理负数 */\n    char temp;\n    int i=0, j, k;\n\n    /* 确定uvalue的值 */\n    if (radix==10 &amp;&amp; value&lt;0) { /* 十进制负数 */\n        uvalue = (value*-1);\n        string[i++] = '-';\n    }\n    else\n        uvalue = (unsigned)value; /* (unsigned)value == 2^32 - value (4字节unsigned) */\n\n    /* 除基数取余 */\n    /* 计算结果存入string字符串，此时为最终转换结果的逆序 */\n    do {\n        string[i++] = index[uvalue % radix];\n        uvalue /= radix;\n    } while (uvalue);\n    string[i] = '\\0'; /* string字符串末尾补'\\0' */\n\n    /* 逆序处理 */\n    /* string字符串首尾元素依次交换 */\n    if (string[0]=='-') /* 十进制负数 */\n        k = 1; /* 跳过负号 */\n    else\n        k = 0;\n\n    for (j=k; j&lt;=(i-1)/2.0; j++) {\n        temp = string[j];\n        string[j] = string[i-1-j+k];\n        string[i-1-j+k] = temp;\n    }\n\n    return string;\n}\n</code></pre>\n<h2 id=\"有符号转无符号\"><a class=\"anchor\" href=\"#有符号转无符号\">#</a> 有符号转无符号</h2>\n<pre><code class=\"language-c++\">//char* 转 unsigned char*\nvoid char2uchar(char * str ,unsigned char * ustr,int length)\n{\n    int i = length, j = 0,counter=0;\n    char c[2]={0};\n    unsigned int bytes[2]={0};\n    for (j = 0; j &lt; i; j += 2)\n    {\n        if (0 == j % 2)\n        {\n            c[0] = str[j];\n            c[1] = str[j + 1];\n            sscanf(c, \"%02x\" , &amp;bytes[0]);\n            ustr[counter] = bytes[0];\n            counter++;\n        }\n    }\n    return;\n}\n</code></pre>\n<h2 id=\"uint8_t转qstring\"><a class=\"anchor\" href=\"#uint8_t转qstring\">#</a> uint8_t 转 QString</h2>\n<pre><code class=\"language-c++\">//uint8_t 转为str\nQString uint82qstring(uint8_t *udata,int length){\n    QString code_str;\n    for (int i = 0; i &lt; length;i++)\n    {\n        //分离16进制数的\"十位\"和“个位”\n        char s1 = char(udata[i] &gt;&gt; 4);\n        char s2 = char(udata[i] &amp; 0xf);\n        //将分离得到的数字转换成对应的ASCII码，数字和字母分开，统一按照小写处理\n        s1 &gt; 9 ? s1 += 55 : s1 += 48;\n        s2 &gt; 9 ? s2 += 55 : s2 += 48;\n        //将处理好的字符放入到string中\n        code_str.append(s1);\n        code_str.append(s2);\n    }\n    return code_str;\n}\n</code></pre>\n<h2 id=\"qstring转uint8_t\"><a class=\"anchor\" href=\"#qstring转uint8_t\">#</a> QString 转 uint8_t</h2>\n<pre><code class=\"language-c++\">unsigned char puchar[1024];\nuint8_t *qstring2uint8(QString string){\n    char * pchar;\n    QByteArray temparr;\n    int len;\n    temparr = string.toLatin1();\n    pchar = temparr.data();\n    len = temparr.size();\n    //将得到的char类型转为uchar\n    convertStrToUnChar(pchar,puchar,len);\n    return puchar;\n}\n</code></pre>\n<h2 id=\"数字转字符串\"><a class=\"anchor\" href=\"#数字转字符串\">#</a> 数字转字符串</h2>\n<pre><code class=\"language-c++\">int i=10;\nQString s = QString::number(i);\n</code></pre>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/66210242.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/66210242.html",
            "title": "QT工厂配置工具",
            "date_published": "2023-08-01T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>QT 工厂配置工具</p>\n<p>简单用到了以下</p>\n<ul>\n<li>串口收发</li>\n<li>读写 excel</li>\n<li>QT 表格控件</li>\n<li>登录页面跳转</li>\n<li>QT 定时器</li>\n<li>QT 动画</li>\n<li>鼠标滚轴事件</li>\n</ul>\n<p>配置界面</p>\n<p><img data-src=\"../../../img.assets/23-8-2QT%E5%B7%A5%E5%8E%82%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7.assets/image-20230802114945921.png\" alt=\"image-20230802114945921\"></p>\n<p>调试界面</p>\n<p><img data-src=\"../../../img.assets/23-8-2QT%E5%B7%A5%E5%8E%82%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7.assets/image-20230802115008068.png\" alt=\"image-20230802115008068\"></p>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<pre><code class=\"language-c++\">#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include \"adminlogin.h\"\n#include \"Conversion/conversion.h\"\n\nCMDPARSING_UNION cmdprotocolparsing;\n\nextern bool liftlampCycleSendEnable;\nextern int liftlampCycleSendnumber;\n\nMainWindow* MainWindow::myMainWindow = nullptr;\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui-&gt;setupUi(this);\n    myMainWindow = this;\n\n    bmainUIinit(false);//UI初始化\n    bmainServerPortinit();//串口初始化\n    vmainflechazo_Time_Init();//定时器初始化\n    vreadInfoLineEditInit();//map表初始化\n    vcmdmapInit_liftlamp();//map指令初始化-&gt;超级牛B\n    vanimationInit();//动画初始化\n\n    BtnConfigStatus = false;\n\n    //1、注册安装事件过滤\n    ui-&gt;label_test_lamp_up_img_2-&gt;installEventFilter(this);\n    ui-&gt;label_test_lamp_down_img_2-&gt;installEventFilter(this);\n    ui-&gt;lineEdit_liftlampID-&gt;installEventFilter(this);\n\n    isSaveExcel=false;\n}\n</code></pre>\n<h2 id=\"串口收发\"><a class=\"anchor\" href=\"#串口收发\">#</a> 串口收发</h2>\n<pre><code class=\"language-c++\">bool MainWindow::bmainServerPortinit(void)\n{\n    serialPort = new QSerialPort;\n\n    return true;\n}\n\n//搜索可用的串口，并添加到串口组合框\nvoid MainWindow::vmainSearch_SerialPorts(void)\n{\n    if(ui-&gt;comboBox_com-&gt;count()==0){\n        ui-&gt;comboBox_com-&gt;clear();\n\n        foreach(const QSerialPortInfo &amp;info,QSerialPortInfo::availablePorts())\n        {\n            ui-&gt;comboBox_com-&gt;addItem(info.portName());//+info.description());\n        }\n    }\n}\n\n//从串口接收数据，存入接收区不处理，超时后再处理\nvoid MainWindow::ReadSerialData()\n{\n    flechazoTime_ms = 0;\n    receiveflag=true;\n    rxDatas+=serialPort-&gt;readAll();\n}\n\n//串口接收\nvoid MainWindow::vmainCom_recieve_data()\n{\n    flechazoTime_ms++;\n    if((receiveflag)&amp;&amp;(flechazoTime_ms&gt;=2))\n    {\n        receiveflag=false;\n        if(ui-&gt;checkBox_select_show_hex-&gt;isChecked())    //十六进制显示\n        {\n             context = rxDatas.toHex();//转十六进制\n             context = context.toUpper();//转大写\n\n             QByteArray buffer,tmp, src;\n             buffer = QByteArray::fromHex(context.toLatin1());\n             for(int i=0;i&lt;rxDatas.size();i++){\n                cmdprotocolparsing.byte[i] = buffer[i];\n             }\n             //解析\n             vprotocol_liftlamp_cmdparsing(rxDatas.size());\n\n             //添加空格\n             src = context.toLatin1();\n             for (int i = 0; i &lt; src.size(); i++ )\n             {\n                 tmp.append(src.at(i));\n                 if (i % 2) tmp.append(0x20);\n             }\n             context = tmp;\n\n        }\n        else    //ASCII显示\n        {\n            context = QString::fromLocal8Bit(rxDatas);\n        }\n        //添加接收显示头\n        QString timeStrLine=\"[\"+QDateTime::currentDateTime().toString(\"hh:mm:ss\")+\"][接收]:🐬 \";\n        context = timeStrLine+context;//+\"\\n\\r\";\n\n        QString content = \"&lt;span style=\\\" color:blue;\\\"&gt;\"+context+\"&lt;/span&gt;\";\n        ui-&gt;textBrowser-&gt;append(content);\n\n        rxDatas.clear();\n    }\n}\n\n//打开串口\nvoid MainWindow::on_pushButton_com_clicked()\n{\n    if(ui-&gt;pushButton_com-&gt;text()==\"打开串口\"){\n        //获取COM口\n        serialPort-&gt;setPortName(ui-&gt;comboBox_com-&gt;currentText());\n        //打开串口\n        if(serialPort-&gt;open(QIODevice::ReadWrite))\n        {\n            //设置波特率\n            serialPort-&gt;setBaudRate(115200);\n            //设置数据位数\n            serialPort-&gt;setDataBits(QSerialPort::Data8);\n            //设置奇偶校验\n            serialPort-&gt;setParity(QSerialPort::NoParity);\n            //设置流控制\n            serialPort-&gt;setFlowControl(QSerialPort::NoFlowControl);\n\n            //连接槽函数\n            connect(serialPort, &amp;QSerialPort::readyRead, this, &amp;MainWindow::ReadSerialData);\n            // 设置控件可否使用\n\n            ui-&gt;pushButton_com-&gt;setText(\"关闭串口\");\n        }else{\n            //打开串口失败\n            QMessageBox::information(this,tr(\"发生错误啦\"),tr(\"打开串口失败！\"),QMessageBox::Ok);\n\n        }\n    }else if(ui-&gt;pushButton_com-&gt;text()==\"关闭串口\"){\n        serialPort-&gt;clear();\n        serialPort-&gt;close();\n        ui-&gt;pushButton_com-&gt;setText(\"打开串口\");\n    }\n}\n\nvoid MainWindow::ServerPortSendData(QString qstring_context){\n    //处理成16进制\n    QByteArray flechazoSend_buffer;\n    QString flechazoSend_msg=\"\";\n    if ( qstring_context.indexOf(\" \") &gt; 0)\n    {\n        bool ok;\n        char data;\n        QStringList list;\n        list = qstring_context.split(\" \");\n        for (int i = 0; i &lt; list.count(); i++)\n        {\n            if (list.at(i) == \" \")\n                continue;\n            if (list.at(i).isEmpty())\n                continue;\n            data = (char)list.at(i).toInt(&amp;ok, 16);\n            if (!ok)\n            {\n                QMessageBox::information(this, tr(\"提示消息\"), tr(\"输入的数据格式有错误！\"), QMessageBox::Ok);\n\n                return;\n            }\n            flechazoSend_buffer.append(data);\n        }\n         flechazoSend_msg = qstring_context.toUpper();\n    }\n    else\n    {\n        QByteArray tmp, src,myqsarraydata;\n        myqsarraydata=qstring_context.toLatin1();\n        flechazoSend_buffer = QByteArray::fromHex(myqsarraydata);\n        src = qstring_context.toLatin1();\n        for (int i = 0; i &lt; src.size(); i++ )\n        {\n            tmp.append(src.at(i));\n            if (i % 2) tmp.append(0x20);\n        }\n        flechazoSend_msg = tmp;\n    }\n\n    //发送数据\n    if (serialPort &amp;&amp; serialPort-&gt;isOpen())\n    {\n        while(!serialPort-&gt;isWritable());\n        qDebug()&lt;&lt;\"**************************buf : \"&lt;&lt;flechazoSend_buffer.toHex();\n        QString timeStrLine=\"[\"+QDateTime::currentDateTime().toString(\"hh:mm:ss\")+\"][发送]:🚀 \";\n        QString content = \"&lt;span style=\\\" color:red;\\\"&gt;\"+timeStrLine +flechazoSend_msg+\"\\n\\r&lt;/span&gt;\";\n        ui-&gt;textBrowser-&gt;append(content);\n\n        serialPort-&gt;write(flechazoSend_buffer);\n\n        //界面控制\n        ui-&gt;textBrowser-&gt;setTextColor(Qt::red);\n    }\n    else\n    {\n        ui-&gt;textBrowser-&gt;append(\"串口并没有打开!\");\n        //QMessageBox::question(this, tr(\"提示\"),QString(tr(\"串口并没有打开!\")),QMessageBox::Ok, QMessageBox::Cancel);\n    }\n}\n\n</code></pre>\n<h2 id=\"qt定时器\"><a class=\"anchor\" href=\"#qt定时器\">#</a> QT 定时器</h2>\n<pre><code class=\"language-c++\">bool MainWindow::vmainflechazo_Time_Init(void)\n{\n    flechazoTimer_s = new QTimer;//用于1s1次的定时任务\n    flechazoTimer = new QTimer;//用于串口超时接收\n\n    flechazoTimer_s-&gt;start(1000);\n    flechazoTimer-&gt;start(20);\n\n    connect(flechazoTimer, &amp;QTimer::timeout,this,&amp;MainWindow::vmainCom_recieve_data);\n    connect(flechazoTimer_s, &amp;QTimer::timeout,this,&amp;MainWindow::vmainflechazo_s);\n\n    InquiryLampCurrentTimer = new QTimer;//用于1s1次的定时任务\n    connect(InquiryLampCurrentTimer, &amp;QTimer::timeout,this,&amp;MainWindow::vTime_inquiry_lamp_current_handle);\n\n    liftlampUporDown_t = new QTimer;//上下闪烁\n    connect(liftlampUporDown_t, &amp;QTimer::timeout,this,&amp;MainWindow::vanimLampUporDown);\n\n    return true;\n}\n\n\n//定时器中断-&gt;1s进入1次\nbool MainWindow::vmainflechazo_s(void)\n{\n    if(!serverportstatus){\n        //如果串口未连接则搜索串口\n        vmainSearch_SerialPorts();\n        //定时发送\n        vprotocol_liftlamp_send_Auto();\n    }\n\n    return true;\n}\n</code></pre>\n<h2 id=\"鼠标事件\"><a class=\"anchor\" href=\"#鼠标事件\">#</a> 鼠标事件</h2>\n<pre><code class=\"language-c++\">//2、重写eventFilter方法,点击lineEdit控件的事件\nbool MainWindow::eventFilter(QObject *obj, QEvent *event)\n{\n    //鼠标点击时间\n    if(event-&gt;type() == QEvent::MouseButtonRelease){\n        if(qobject_cast&lt;QLabel*&gt;(obj) == ui-&gt;label_test_lamp_up_img_2)\n        {\n            vcmdmap_Cycle_Send_Over_ID(true);\n            return true;\n        }else if(qobject_cast&lt;QLabel*&gt;(obj) == ui-&gt;label_test_lamp_down_img_2){\n            vcmdmap_Cycle_Send_Over_ID(false);\n            return true;\n        }\n    }\n    if(event-&gt;type() == QEvent::MouseButtonRelease){\n\n    }\n\n    return false;\n}\n\n//----------------------鼠标滚轴----------------------//\nvoid MainWindow::wheelEvent(QWheelEvent *event)\n{\n    //如果焦点是ID就可以滚轴触发增减\n    QLineEdit* lineEditFocus =\n            qobject_cast&lt;QLineEdit*&gt;(ui-&gt;tabWidget_factory-&gt;focusWidget());\n    if(lineEditFocus==ui-&gt;lineEdit_liftlampID){\n        // 当滚轮远离使用者时进行放大，当滚轮向使用者方向旋转时进行缩小\n        if(event-&gt;delta() &gt; 0){\n            vcmdmap_Cycle_Send_Over_ID(true);\n        }else{\n            vcmdmap_Cycle_Send_Over_ID(false);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"全选\"><a class=\"anchor\" href=\"#全选\">#</a> 全选</h2>\n<pre><code class=\"language-c++\">void MainWindow::on_pushButton_selectall_clicked()\n{\n    bool status;\n    //全选\n    if(ui-&gt;pushButton_selectall-&gt;text()==\"全选\"){\n        status=true;\n        ui-&gt;pushButton_selectall-&gt;setText(\"清空选择\");\n    }else if(ui-&gt;pushButton_selectall-&gt;text()==\"清空选择\"){\n        status=false;\n        ui-&gt;pushButton_selectall-&gt;setText(\"全选\");\n    }\n\n    QObjectList checkboxList = ui-&gt;tab_produce-&gt;children();\n\n    for (int i=0;i&lt;checkboxList.count();i++) {\n        QObject  *currentobject=checkboxList[i];\n        if(QString(currentobject-&gt;metaObject()-&gt;className())==QString(\"QCheckBox\"))\n        {\n            QCheckBox *currentcheckbox = (QCheckBox *)currentobject;\n            currentcheckbox-&gt;setChecked(status);\n        }\n     }\n}\n</code></pre>\n<h2 id=\"登录界面跳转\"><a class=\"anchor\" href=\"#登录界面跳转\">#</a> 登录界面跳转</h2>\n<pre><code class=\"language-c++\">//管理员登录\nvoid MainWindow::on_pushButton_admin_login_clicked()\n{\n    if(ui-&gt;pushButton_admin_login-&gt;text()==\"管理登录\"){\n        ui-&gt;pushButton_admin_login-&gt;setText(\"退出\");\n        MainWindow::hide();\n        //跳入登录界面\n        static adminlogin UI_LOGIN;\n        UI_LOGIN.show();\n    }else if(ui-&gt;pushButton_admin_login-&gt;text()==\"退出\"){\n        //上锁，初始化UI\n        bmainUIinit(false);\n        ui-&gt;pushButton_admin_login-&gt;setText(\"管理登录\");\n    }\n}\n</code></pre>\n<h2 id=\"动画\"><a class=\"anchor\" href=\"#动画\">#</a> 动画</h2>\n<pre><code class=\"language-c++\">//动画初始化\nvoid MainWindow::vanimationInit(){\n\n    animation_down = new QPropertyAnimation;\n    animation_down-&gt;setTargetObject(ui-&gt;pushButton_into_debug_anim_lamp);\n    animation_down-&gt;setPropertyName(\"pos\");\n    animation_down-&gt;setDuration(2000);\n    //拿到坐标\n    QPoint down_pos = ui-&gt;pushButton_into_debug_anim_lamp-&gt;pos();\n    animation_down-&gt;setStartValue(down_pos);\n    down_pos.setY(down_pos.y()+45);\n    animation_down-&gt;setEndValue(down_pos);\n\n\n    animation_up = new QPropertyAnimation;\n    animation_up-&gt;setTargetObject(ui-&gt;pushButton_into_debug_anim_lamp);\n    animation_up-&gt;setPropertyName(\"pos\");\n    animation_up-&gt;setDuration(2000);\n    //拿到坐标\n    animation_up-&gt;setStartValue(down_pos);\n    down_pos.setY(down_pos.y()-45);\n    animation_up-&gt;setEndValue(down_pos);\n\n\n}\n\nvoid MainWindow::vanimationLampOpen(bool status){\n    if(status){//开灯\n        //static QColor color = QColorDialog::getColor(Qt::black, this, \"请选择颜色\");\n        int r = 225, g = 225, b = 225;\n        //color.getRgb(&amp;r,&amp;g,&amp;b);\n        ui-&gt;pushButton_into_debug_anim_lamp-&gt;setStyleSheet(QString(\"background-color: rgb(%1,%2,%3)\").arg(r).arg(g).arg(b));\n    }else{//关灯\n        //static QColor color = QColorDialog::getColor(Qt::black, this, \"请选择颜色\");\n        int r = 160, g = 32, b = 240;\n        //color.getRgb(&amp;r,&amp;g,&amp;b);\n        ui-&gt;pushButton_into_debug_anim_lamp-&gt;setStyleSheet(QString(\"background-color: rgb(%1,%2,%3)\").arg(r).arg(g).arg(b));\n    }\n}\n\n\n//动画，上升下降\nvoid MainWindow::vanimLampLift(bool status){\n    //标记上升或下降\n    bLampUporDown_flag = status;\n    vanimLampUporDown_number=0;\n    //开启定时器\n    liftlampUporDown_t-&gt;start(100);\n\n}\n\n\n//上下闪烁，定时器\nvoid MainWindow::vanimLampUporDown(){\n    if(++vanimLampUporDown_number&lt;100){\n        if(vanimLampUporDown_number%2){\n            //显示控件\n            if(bLampUporDown_flag){\n                //上升\n                ui-&gt;label_test_lamp_up_img-&gt;show();\n                ui-&gt;label_test_lamp_down_img-&gt;hide();\n            }else{\n                //下降\n                ui-&gt;label_test_lamp_down_img-&gt;show();\n                ui-&gt;label_test_lamp_up_img-&gt;hide();\n            }\n        }else{\n            //隐藏控件\n            if(bLampUporDown_flag){\n                //上升\n                ui-&gt;label_test_lamp_up_img-&gt;hide();\n            }else{\n                //下降\n                ui-&gt;label_test_lamp_down_img-&gt;hide();\n            }\n        }\n\n    }else{\n        ui-&gt;label_test_lamp_up_img-&gt;hide();\n        ui-&gt;label_test_lamp_down_img-&gt;hide();\n        vanimLampUporDown_number=0;\n        liftlampUporDown_t-&gt;stop();\n    }\n}\n</code></pre>\n<h2 id=\"指令处理\"><a class=\"anchor\" href=\"#指令处理\">#</a> 指令处理</h2>\n<pre><code class=\"language-c++\">void MainWindow::vprotocol_liftlamp_send(QString value){\n    //拼接字符串\n    QString qstring_context = \"\";\n    //帧头\n    qstring_context.append(\"FB\");\n    //添加指令\n    qstring_context.append(value);\n    //添加状态\n    qstring_context.append(\"00\");\n    //添加源设备\n    qstring_context.append(\"00000000\");\n    //添加目标设备\n    if(ui-&gt;tabWidget_factory-&gt;currentIndex()==0){\n        qstring_context.append(\"00000000\");\n    }else{\n        if(value==\"040102\"){\n            qstring_context.append(\"00000000\");\n        }else{\n            qstring_context.append(str_uint8_t_to_str(ucprotocollampSmallModeConvert(qstring_to_uint8(ui-&gt;lineEdit_liftlamp_ID-&gt;text()),4),4));\n        }\n    }\n\n    //添加参数\n    QString (MainWindow::*getpar)(void);\n    getpar=cmdmap_liftlamp.value(cmdmap_liftlamp_parsing.value(value));\n    qstring_context.append((this-&gt;*getpar)());\n\n    //计算CRC\n    QString str_crc=qstring_context;\n    str_crc.remove(0,2);//去掉帧头\n    qstring_context.append(qstrCrcCalc(str_crc).mid(2,2)+qstrCrcCalc(str_crc).mid(0,2));\n    //qstring_context.append(qstrCrcCalc(str_crc));\n\n    //添加帧尾\n    qstring_context.append(\"FE\");\n    //发送\n    ServerPortSendData(qstring_context);\n}\n</code></pre>\n<p>具体的 demo</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"码云QT工厂配置工具\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmxlY2hhem81MjAxMzE0L3F0ZmFjdG9yeQ==\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmxlY2hhem81MjAxMzE0L3F0ZmFjdG9yeQ==\">码云QT工厂配置工具</span>\n          <p class=\"desc\">https://gitee.com/flechazo5201314/qtfactory</p>\n          </div></div></div><p></p>\n<pre><code>https://gitee.com/flechazo5201314/qtfactory\n</code></pre>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/bfa8f9c4.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/bfa8f9c4.html",
            "title": "Bootloader远程升级的开发基本流程",
            "date_published": "2023-07-30T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"bootloader说明\"><a class=\"anchor\" href=\"#bootloader说明\">#</a> Bootloader 说明</h2>\n<p>编写 bootloader 程序步骤说明：【源代码在文末】</p>\n<ul>\n<li>根据程序代码区域的大小划分空间</li>\n<li>编写 Bootloader</li>\n<li>码 APP</li>\n</ul>\n<h2 id=\"1-阅读手册划分空间\"><a class=\"anchor\" href=\"#1-阅读手册划分空间\">#</a> 1、阅读手册，划分空间</h2>\n<p><img data-src=\"../../../img.assets/23-7-31Bootloader%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%9A%84%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.assets/image-20230731092115145.png\" alt=\"image-20230731092115145\"></p>\n<p>我用的是这个型号的，他的空间有 256KB 是可以用来运行代码的。</p>\n<h4 id=\"所以可以这样划分\"><a class=\"anchor\" href=\"#所以可以这样划分\">#</a> 所以可以这样划分：</h4>\n<ul>\n<li>Bootloader          FLASH_BASE(((uint32_t)0x08000000U))                  32KB</li>\n<li>APP1                     FLASH_BASE | 0x08000                                             64KB</li>\n<li>APP2                     FLASH_BASE | 0x18000                                             64KB</li>\n</ul>\n<p><img data-src=\"../../../img.assets/23-7-31Bootloader%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%9A%84%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.assets/image-20230731094418293.png\" alt=\"image-20230731094418293\"></p>\n<h4 id=\"程序流程规划\"><a class=\"anchor\" href=\"#程序流程规划\">#</a> 程序流程规划：</h4>\n<p><img data-src=\"../../../img.assets/23-7-31Bootloader%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%9A%84%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.assets/image-20230731092420894.png\" alt=\"image-20230731092420894\"></p>\n<h2 id=\"2-编写bootloader\"><a class=\"anchor\" href=\"#2-编写bootloader\">#</a> 2、编写 Bootloader</h2>\n<h4 id=\"主函数\"><a class=\"anchor\" href=\"#主函数\">#</a> 主函数：</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BOOTLOADER_APP1_ADDRESS</span> <span class=\"token expression\"><span class=\"token number\">0x08008000U</span>  </span><span class=\"token comment\">// 定义 APP 地址</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BOOTLOADER_APP2_ADDRESS</span> <span class=\"token expression\"><span class=\"token number\">0x08018000U</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//1、初始化【串口、flash、定时器等外设】</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//2、初始化延时等待，例如等待多久后开始进入 app 区执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//3、判断升级标志位，如果有就更新程序</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//2 秒超时时间到、开始跳转</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>time<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>__IO <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOTLOADER_APP1_ADDRESS <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x08000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">iap_load_app</span><span class=\"token punctuation\">(</span>BOOTLOADER_APP1_ADDRESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 这里没有可执行程序 APP1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 检查 APP2 区域是否有程序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>__IO <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOTLOADER_APP2_ADDRESS <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x08000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token function\">iap_load_app</span><span class=\"token punctuation\">(</span>BOOTLOADER_APP2_ADDRESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token comment\">//APP1 APP2 均无程序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 等待其他操作，可以在这里选择启动模式【因为咱们有两个 APP 区，所以在这里可以选择强制从其中一个启动】</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h4 id=\"iaph\"><a class=\"anchor\" href=\"#iaph\">#</a> iap.h</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__IAP_H__</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__IAP_H__</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"systick.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 用户根据自己的需要设置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STM32_FLASH_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span> \t \t\t</span><span class=\"token comment\">// 所选 STM32 的 FLASH 容量大小 (单位为 K)</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">STM32_FLASH_SIZE <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STM_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token number\">1024</span> </span><span class=\"token comment\">// 字节</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STM_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token number\">2048</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//////////////////////////////////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//FLASH 起始地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GD32_FLASH_BASE</span>   <span class=\"token expression\"><span class=\"token number\">0x08000000</span>   \t</span><span class=\"token comment\">//GD32 FLASH 的起始地址</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">typedef</span>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iapfun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 定义一个函数类型的参数.   </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">iap_load_app</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> appxaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 跳转到 APP 程序执行</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">iap_write_appbin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> appxaddr<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>appbuf<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> applen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 在指定地址开始，写入 bin</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></tbody></table></figure><h4 id=\"iapc\"><a class=\"anchor\" href=\"#iapc\">#</a> iap.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>iapfun jump2app<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置栈顶地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//addr: 栈顶地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>__asm <span class=\"token keyword\">void</span> <span class=\"token function\">MSR_MSP</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    MSR MSP<span class=\"token punctuation\">,</span> r0 \t\t\t<span class=\"token comment\">//set Main Stack value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    BX r14</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//WriteAddr: 应用程序的起始地址，必须为某扇区的起始地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//pBuffer: 应用程序 CODE.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//NumToWrite: 应用程序大小 (字节).</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">iap_write_appbin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> WriteAddr<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pBuffer<span class=\"token punctuation\">,</span><span class=\"token class-name\">uint32_t</span> NumToWrite<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token class-name\">uint16_t</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>WriteAddr <span class=\"token operator\">&lt;</span> GD32_FLASH_BASE <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>WriteAddr <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span>GD32_FLASH_BASE <span class=\"token operator\">+</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> STM32_FLASH_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"地址越界!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>WriteAddr <span class=\"token operator\">%</span> STM_SECTOR_SIZE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"地址非FLASH扇区首地址!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* 开始写入 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">fmc_unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>NumToWrite <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 上一个扇区刚好完整写完</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>NumToWrite <span class=\"token operator\">&lt;</span> STM_SECTOR_SIZE<span class=\"token punctuation\">)</span><span class=\"token comment\">// 剩余要写入的内容不到一个扇区</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">fmc_page_erase</span><span class=\"token punctuation\">(</span>WriteAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 擦除这个扇区 </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NumToWrite<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                temp  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                temp <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token function\">fmc_halfword_program</span><span class=\"token punctuation\">(</span>WriteAddr<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                WriteAddr <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入结束，退出 while</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token function\">fmc_page_erase</span><span class=\"token punctuation\">(</span>WriteAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 擦除这个扇区</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 写入整个扇区</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> STM_SECTOR_SIZE<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                temp  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                temp <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token function\">fmc_halfword_program</span><span class=\"token punctuation\">(</span>WriteAddr<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                WriteAddr <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>           </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            pBuffer <span class=\"token operator\">+=</span> STM_SECTOR_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            NumToWrite <span class=\"token operator\">-=</span> STM_SECTOR_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">fmc_lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上锁</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 跳转到应用程序段</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">//appxaddr: 用户代码起始地址</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">iap_load_app</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> appxaddr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>__IO <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>appxaddr<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x2FFE0000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0x20000000</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 检查栈顶地址是否合法</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">{</span> </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">/* 首地址是 MSP，地址 + 4 是复位中断服务程序地址 */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        jump2app<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>iapfun<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>__IO <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>appxaddr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>         <span class=\"token comment\">/* 关闭全局中断 */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token function\">__set_PRIMASK</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                 </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">/* 关闭滴答定时器，复位到默认值 */</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        SysTick<span class=\"token operator\">-&gt;</span>CTRL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        SysTick<span class=\"token operator\">-&gt;</span>LOAD <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        SysTick<span class=\"token operator\">-&gt;</span>VAL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">/* 设置所有时钟到默认状态 */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//RCC_DeInit();</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token function\">rcu_deinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/* 关闭所有中断，清除所有中断挂起标志 */</span>  </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            NVIC<span class=\"token operator\">-&gt;</span>ICER<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            NVIC<span class=\"token operator\">-&gt;</span>ICPR<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">/* 使能全局中断 */</span> </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token function\">__set_PRIMASK</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">/* 在 RTOS 工程，这条语句很重要，设置为特权级模式，使用 MSP 指针 */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">__set_CONTROL</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">MSR_MSP</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>__IO <span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>appxaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 初始化 APP 堆栈指针 (用户代码区的第一个字用于存放栈顶地址)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token function\">jump2app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 跳转到 APP.</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">/* 跳转成功的话，不会执行到这里，用户可以在这里添加代码 */</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------jump error!-----------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"3-码app\"><a class=\"anchor\" href=\"#3-码app\">#</a> 3、码 APP</h2>\n<p>那么 APP 区主要干几件事</p>\n<h4 id=\"这里记得设置一下\"><a class=\"anchor\" href=\"#这里记得设置一下\">#</a> 这里记得设置一下</h4>\n<p><img data-src=\"../../../img.assets/23-7-31Bootloader%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7%E7%9A%84%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.assets/image-20230731162943149.png\" alt=\"image-20230731162943149\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//0、配置中断向量表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SCB<span class=\"token operator\">-&gt;</span>VTOR <span class=\"token operator\">=</span> FLASH_BASE <span class=\"token operator\">|</span> <span class=\"token number\">0x08000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//1、初始化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2、接收升级数据包</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">updatarecieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>updata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">//3、更新升级标志位</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">//4、复位</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">NVIC_SystemReset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>具体的代码有点多，也没有整理。大家感兴趣直接上 gitee 看吧。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vdW5pcXVlLWNoYWkvZi1jb250cm9sbGVyLmdpdA==\">项目全部代码</span></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "嵌入式",
                "嵌入式"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cd3581c7.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cd3581c7.html",
            "title": "c语言错误,断言，对齐",
            "date_published": "2023-07-25T16:00:00.000Z",
            "content_html": "<html><head></head><body><h1 id=\"错误\"><a class=\"anchor\" href=\"#错误\">#</a> 错误</h1>\n<p>errno 是 error number 的缩写，意味系统调用错误码。</p>\n<p>在 C 语言中，errno 是一个全局变量，用于表示系统调用或库函数返回的错误代码。当系统调用或库函数失败时，errno 会被设置为相应的错误代码。可以使用 perror () 函数来打印出 errno 的值和对应的错误信息。</p>\n<p>例如，在使用 open () 函数打开文件时，如果文件不存在，则会返回 - 1, 并将 errno 设置为 ENOENT。可以使用以下代码来检查 errno 的值并输出错误信息：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FILE <span class=\"token operator\">*</span>file <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonexistent_file.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"errno: %d\\n\"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// do something with the file</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在这个例子中，如果文件不存在，perror () 函数会输出 \"Error opening file\", 并且 printf () 函数会输出 errno 的值和对应的错误信息。</p>\n<h1 id=\"断言\"><a class=\"anchor\" href=\"#断言\">#</a> 断言</h1>\n<p>断言 (assertion) 是一种在程序中的一阶逻辑 (如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果 —— 当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息。</p>\n<p>在 C 语言中，断言被分为静态断言和运行时断言。静态断言可以在编译时生效，如果不满足断言的要求，则会编译失败；运行时断言是程序在运行时的逻辑判断，但判断条件不为真时，程序报错退出。</p>\n<h2 id=\"静态断言\"><a class=\"anchor\" href=\"#静态断言\">#</a> 静态断言</h2>\n<p>通过  <code>static_assert</code>  这个宏可以实现静态断言，程序在编译时，会判断宏函数第一个参数是否为 0 （即为假），如果为 0 ，则程序终止编译，同时打印第二个参数指定的信息。</p>\n<p>比如下面这个例子，如果断言  <code>sizeof(a) &lt;= 8</code> ，则程序无法编译通过。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//a = b;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">static_assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"This arr too big!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p><img data-src=\"../../../img.assets/23-7-26C%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E6%96%AD%E8%A8%80%E5%AF%B9%E9%BD%90.assets/image-20230726215529880.png\" alt=\"image-20230726215529880\"></p>\n<p>如果断言  <code>sizeof(a) &gt; 8</code> ，在我所用的平台上，这个值应为 16，大于 8 ，所以静态断言的判断条件为真，程序编译通过。</p>\n<h2 id=\"运行时断言\"><a class=\"anchor\" href=\"#运行时断言\">#</a> 运行时断言</h2>\n<p>下面是运行时断言的简单例子，如果不把  <code>p = &amp;a;</code>  屏蔽，指针 p 不为空，程序能顺利往下运行；反之如果将  <code>p=&amp;a;</code>  屏蔽，程序会在断言处退出。</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;assert.h&gt;\n\nint main(void)\n{\n\tint number = 9;\n\tint* p = NULL;\n\t//p = &amp;number;\n\t// 断言 p 不为空\n\tassert(p != NULL);\n\n\tprintf(\"ok!\\n\");\n\treturn 0;\n}\n</code></pre>\n<p><img data-src=\"../../../img.assets/23-7-26C%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E6%96%AD%E8%A8%80%E5%AF%B9%E9%BD%90.assets/image-20230726220130870.png\" alt=\"image-20230726220130870\"></p>\n<p>解除注释 p = &amp;number; 后正常执行</p>\n<p><img data-src=\"../../../img.assets/23-7-26C%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E6%96%AD%E8%A8%80%E5%AF%B9%E9%BD%90.assets/image-20230726220240956.png\" alt=\"image-20230726220240956\"></p>\n<p>assert 不能和 static_assert 那样自定义错误信息。</p>\n<p>另外，C 语言程序运行时断言还受宏常量 NDEBUG 影响，如果该宏常量先于  <code>#include &lt;assert.h&gt;</code>  定义时，编译器会忽略 assert 部分代码。这样我们就能灵活控制断言的开启与关闭。</p>\n<h1 id=\"对齐\"><a class=\"anchor\" href=\"#对齐\">#</a> 对齐</h1>\n<p>字节对齐是 C 语言中的一种机制，用于在内存中存储数据时，使数据的起始地址是其数据类型大小的整数倍。这样做可以提高 CPU 访问内存的效率。例如，如果一个变量的内存地址正好位于它长度的整数倍，那么这个变量就被称做自然对齐。</p>\n<p>在 C 语言中，可以使用__align () 函数或__attribute__((aligned ())) 来指定结构体成员或变量的对齐方式。例如，下面的代码将结构体的成员按照 8 字节对齐：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">my_struct</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">short</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token function\">attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">aligned</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8ef5993a.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8ef5993a.html",
            "title": "c语言异或的妙用",
            "date_published": "2023-07-23T16:00:00.000Z",
            "content_html": "<html><head></head><body><h3 id=\"异或运算符相当于不进位的加法\"><a class=\"anchor\" href=\"#异或运算符相当于不进位的加法\">#</a> 异或运算符 ^（相当于不进位的加法）</h3>\n<p>异或 ^: 位运算符号，相同的位置 0，不同的位置 1：</p>\n<blockquote>\n<p>0^0 = 0，</p>\n<p>1^0 = 1，</p>\n<p>0^1 = 1，</p>\n<p>1^1 = 0，</p>\n</blockquote>\n<h3 id=\"用法1交换两个变量的值\"><a class=\"anchor\" href=\"#用法1交换两个变量的值\">#</a> 用法 1：交换两个变量的值</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 二进制 0101</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//b 二进制 0111</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这时  a = 0010</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//b = 0101</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//a = 0111</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 这样，这两个数就交换了</span></pre></td></tr></tbody></table></figure><h4 id=\"优点增加你的不可替代性因为别人很难看懂你的demo了\"><a class=\"anchor\" href=\"#优点增加你的不可替代性因为别人很难看懂你的demo了\">#</a> 优点：增加你的不可替代性（因为别人很难看懂你的 Demo 了😂）</h4>\n<h4 id=\"缺点自己都看不懂了\"><a class=\"anchor\" href=\"#缺点自己都看不懂了\">#</a> 缺点：自己都看不懂了</h4>\n<h3 id=\"用法2找出数组中只出现1次的值\"><a class=\"anchor\" href=\"#用法2找出数组中只出现1次的值\">#</a> 用法 2：找出数组中只出现 1 次的值</h3>\n<p>这可以用在哪呢？一种乱序的进入和退出之后，判断是否全部退出时，就可以用到这种算法。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>说明：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例：输入 <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span> 输出 <span class=\"token number\">1</span>  ，输入 <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">3</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> 输出 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C语言实现：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isingleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> result<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>numsSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        result<span class=\"token operator\">^=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/98e44a20.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/98e44a20.html",
            "title": "ESP32 Https server 错误Header fields are too long",
            "date_published": "2023-07-16T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>最近做 ESP 的 http Server 时，报错 ESP32 Https server 错误 Header fields are too long</p>\n<p>原因：CONFIG_HTTPD_MAX_REQ_HDR_LEN</p>\n<p>解决方法：修改 sdkconfig 文件中的 CONFIG_HTTPD_MAX_REQ_HDR_LEN，改大一点</p>\n<p><img data-src=\"../../../img.assets/23-7-17ESP32httpPostHeaderfieldsaretoolong.assets/image-20230717210744003.png\" alt=\"image-20230717210744003\"></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "ESP32",
                "ESP32"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b969c2fd.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b969c2fd.html",
            "title": "ESP32内存分配踩坑-无报错程序执行异常",
            "date_published": "2023-07-15T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>我真的无语了！</p>\n<p>ESP32S3 的程序，无报错</p>\n<p>但是程序就是执行异常</p>\n<p>问题现象：</p>\n<p>ESP32 wifi 的 AP 模式 释放的 wifi 我手机死活连接不上。</p>\n<p>解决：</p>\n<p>最后发现是 lvgl 占用了过多的内存</p>\n<p><img data-src=\"../../../img.assets/23-7-16ESP%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%B8%A9%E5%9D%91.assets/image-20230716211836528.png\" alt=\"image-20230716211836528\"></p>\n<p>给他改小一点就可以了，找了我两天的毛病。。。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "ESP32",
                "ESP32"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8ada3c3f.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8ada3c3f.html",
            "title": "qt程序打包",
            "date_published": "2023-07-11T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>最近呢写了个 QT 的程序，苦于打包步骤太过繁琐。</p>\n<p>难道就没有一个无脑一键打包吗？</p>\n<p>我来啦！</p>\n<p>食用步骤：</p>\n<ul>\n<li>需要用到一个动态库文件，和一个 bat 脚本文件</li>\n<li>首先 QT 编译一个 release 版本</li>\n<li>点击 QT 打包脚本文件</li>\n<li>将 QT 构建的 release 中.exe 重命名 flechazo.exe</li>\n<li>将 flechazo.exe 移动至第二部创建的文件夹中</li>\n<li>再次点击 QT 打包脚本文件</li>\n<li>完成啦！</li>\n</ul>\n<p>第一次点击会创建一个文件夹【后续的打包文件都在此文件夹内】</p>\n<p><img data-src=\"../../../img.assets/qt%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F.assets/v2-85ade472381f554a319d6783e09cf0fc_720w.webp\" alt=\"img\"></p>\n<p>将.exe 文件改名，并移入文件夹内</p>\n<p><img data-src=\"../../../img.assets/qt%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F.assets/v2-e03c1c0d153cd612337aecab8324ff4a_720w.webp\" alt=\"img\"></p>\n<p>重新点击脚本文件就可以啦！</p>\n<p>如果出现了这样</p>\n<p><img data-src=\"../../../img.assets/qt%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F.assets/v2-2ab8f076e96b645d7ab6eccaf96472c7_720w.webp\" alt=\"img\"></p>\n<p>说名你的环境变量没添加</p>\n<p>我的电脑 -&gt; 右键 -&gt; 属性</p>\n<p>然后将你的 QT 安装目录下的这个 mingw 路径的 bin 文件路径添加到系统变量里就阔以啦！</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>D:\\Mysoftware\\QT\\QT6.4\\5.15.2\\mingw81_64\\bin</pre></td></tr></tbody></table></figure><p><img data-src=\"../../../img.assets/qt%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F.assets/v2-fbbbf1165630219ee631d13a38ad3806_720w.webp\" alt=\"img\"></p>\n<p><img data-src=\"../../../img.assets/qt%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F.assets/v2-476ec924b2ed75475b414da5749372aa_720w.webp\" alt=\"img\"></p>\n<p>工具下载：</p>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9wYW4uYmFpZHUuY29tL3MvMXVzY0swX0tibGRQM0ItSmRjaTRkYUE=\">https://pan.baidu.com/s/1uscK0_KbldP3B-Jdci4daA</span></p>\n<p>提取码：CDDY</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        }
    ]
}
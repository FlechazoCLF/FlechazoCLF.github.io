{
    "version": "https://jsonfeed.org/version/1",
    "title": "我在人间贩卖黄昏，只为收集世间温柔遇见你.",
    "subtitle": "有幸来到人间的旅人",
    "icon": "https://flechazoclf.github.io/FlechazoCLF.github.io/images/favicon.ico",
    "description": "我在人间贩卖星光",
    "home_page_url": "https://FlechazoCLF.github.io/FlechazoCLF.github.io",
    "items": [
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a1c393ed.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a1c393ed.html",
            "title": "【自我提升】我的MBTI人格测试",
            "date_published": "2024-01-08T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起：</h2>\n<p>我来啦〰！想要<strong>自我提升</strong>的<strong>宝子</strong>们一定要看一看哇💖！</p>\n<p>先认清自己再做出改变！冲锋🌏</p>\n<p>我也浑浑噩噩地度过啦<strong> 23</strong> 年啦！说起来还有点小伤感呢，打住！积极一点啦，<strong>人生只有一次</strong>。何不<strong>洒脱自信</strong>一点呢😄？笑一笑➰</p>\n<p>那 24 年祝愿自己：<strong>积极</strong>，<strong>自律</strong>，<strong>勇敢</strong>，<strong>自信</strong>💮！</p>\n<p>等等，还有脱单。哈哈哈！</p>\n<hr>\n<p>我是个<strong>建筑师</strong>呢，哈哈哈。每个人都是世界上<strong>独一无二</strong>的存在！</p>\n<p><img data-src=\"../../../img.assets/24-01-09%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E4%B9%8BMBTI%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95.assets/image-20240109143952301.png\" alt=\"image-20240109143952301\"></p>\n<p>看看全世界独一无二的 <strong>flechazo</strong> ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTZwZXJzb25hbGl0aWVzLmNvbS9jaC9pbnRqLSVFNCVCQSVCQSVFNiVBMCVCQw==\">我的人格</span></p>\n<p><img data-src=\"../../../img.assets/24-01-09%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E4%B9%8BMBTI%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95.assets/image-20240109150401655.png\" alt=\"image-20240109150401655\"></p>\n<h3 id=\"照妖镜\"><a class=\"anchor\" href=\"#照妖镜\">#</a> 照妖镜：</h3>\n<blockquote>\n<p>建筑师，从内心深处与独立牢牢绑定，想要摆脱别人的期望，追求自己的想法。</p>\n</blockquote>\n<p>答：时而独立，时而孤僻。</p>\n<blockquote>\n<p>建筑师既可以是最大胆的梦想家，也可以是最悲观的人。</p>\n</blockquote>\n<p>答：之前比较悲观啦！但是想明白啦：人生只有一次。何不大胆一点？精彩一点？</p>\n<blockquote>\n<p>建筑师不只是为了炫耀而学习新事物 -- 他们从内心喜欢扩大自己的知识范围。</p>\n</blockquote>\n<p>答：真的想静下心来做好一件事情【比如想认真写好一个文章，想学会一个才艺】</p>\n<blockquote>\n<p>有时，建筑师可能会怀疑与他人打交道是否值得为此受挫。</p>\n</blockquote>\n<p>答：我真的会被这个问题困扰。24 年目标：生活精彩丰富、一个人也要有仪式感、鉴定、果断！</p>\n<blockquote>\n<p>建筑师充满了矛盾。他们富有想象力但果断，雄心勃勃但秘而不宣，好奇但专注。</p>\n</blockquote>\n<p>答：24 年要果断哦！别犹豫啦 /~</p>\n<blockquote>\n<p>建筑师质疑一切。</p>\n</blockquote>\n<p>答：哈哈理工男特性！</p>\n<hr>\n<h2 id=\"mbti\"><a class=\"anchor\" href=\"#mbti\">#</a> MBTI：</h2>\n<p><strong>MBTI16</strong> 型人格测试是一种基于心理学理论的人格评估工具。</p>\n<p>MBTI 代表迈尔斯 - 布里格斯类型指标，它最初由凯瑟琳・布里格斯和伊莎贝尔・迈尔斯开发，旨在帮助人们更好地了解自己的个性特点和偏好。</p>\n<p>MBTI16 型人格测试基于卡尔・荣格的心理学理论，即个体有不同的心理取向和行为模式。测试通过测量个体在四个维度上的偏好。包括：</p>\n<ul>\n<li>外向（E）与内向（I）</li>\n<li>感觉（S）与直觉（N）</li>\n<li>思考（T）与情感（F）</li>\n<li>判断（J）与知觉（P）</li>\n</ul>\n<p>来确定个体的人格类型。</p>\n<p>每个维度都代表了两种相对的偏好，例如外向与内向代表了个体获取能量的方式，感觉与直觉代表了个体获取信息的方式，思考与情感代表了个体做决策的方式，判断与知觉代表了个体对待生活的方式。通过将这些偏好组合起来，MBTI16 型人格测试可以给出 16 种不同的人格类型，如 ISTJ、ENFP 等。</p>\n<p>MBTI16 型人格测试的<strong>意义在于</strong>帮助人们更好地了解自己的个性特点和偏好，从而提高自我认知和发展。它可以帮助人们认识到自己的优势和弱点，理解自己在与他人互动、做决策和工作方式上的倾向。通过了解自己的人格类型，人们可以更好地选择适合自己的职业，改善人际关系，提高团队合作效果，并在个人成长和发展方面有所启发。</p>\n<p>需要明确的是，MBTI16 型人格测试并不是对人格的绝对定义，而只是一种评估工具。人格是多维的，受到多个因素的影响，包括遗传、环境和个人经历等。因此，测试结果只是参考，不能将其视为人格的全部或定论。</p>\n<h2 id=\"路漫漫\"><a class=\"anchor\" href=\"#路漫漫\">#</a> 路漫漫：</h2>\n<p>人生路漫漫：认识自己！改变自己！提升自己！</p>\n<p>时刻提醒自己：<strong>拿出小本本！</strong></p>\n<blockquote>\n<p>大家都是<strong>第一次</strong>来人间，我凭什么让着你！</p>\n<p><strong>自信</strong>一点，你没有那么多观众。</p>\n<p>不要因为别人的看法而改变自己，因为真正重要的是你自己对自己的看法。</p>\n<p>有时候我们需要<strong>跳出舒适区</strong>，才能发现更广阔的世界。</p>\n<p>成功是由行动而不是愿望实现的。</p>\n</blockquote>\n<p>成长的路上或许有些孤单：但那又如何呢？努力绽放出自己的<strong>翅膀</strong>，然后飞向那个你爱的人吧！</p>\n<p>希望对大家有所帮助🎈</p>\n<p>【我自己也是才刚刚意识到这些，还有很多不足。欢迎大家来探讨。🛰：18339963582】</p>\n<hr>\n<p>最后的最后；要自信的活出自己哦！</p>\n</body></html>",
            "tags": [
                "小世界✨",
                "自我提升",
                "自我提升"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/dfcb5141.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/dfcb5141.html",
            "title": "LD文件在AUTOSAR工程中的作用和语法解析",
            "date_published": "2023-12-19T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>在 AUTOSAR（Automotive Open System Architecture）工程中，LD 文件（Linker Description File）是一个关键的配置文件，负责描述应用程序的内存布局和链接信息。本文将介绍 LD 文件的基本作用，以及通过一个简单的例子解释其语法结构。</p>\n<h2 id=\"1-ld文件的作用\"><a class=\"anchor\" href=\"#1-ld文件的作用\">#</a> 1. LD 文件的作用</h2>\n<p>LD 文件在汽车软件开发中扮演着重要的角色，主要有以下作用：</p>\n<h3 id=\"11-内存布局描述\"><a class=\"anchor\" href=\"#11-内存布局描述\">#</a> 1.1 内存布局描述</h3>\n<p>LD 文件定义了在目标系统上分配给应用程序的内存布局。这包括代码段、数据段、堆栈等的位置和大小。通过合理的内存布局，可以有效地管理系统资源，确保软件的正常运行。</p>\n<h3 id=\"12-链接信息\"><a class=\"anchor\" href=\"#12-链接信息\">#</a> 1.2 链接信息</h3>\n<p>LD 文件包含了与链接过程相关的信息，指导链接器将源代码文件编译生成的目标文件组合成最终的可执行文件。这涉及到符号的解析、地址分配等过程。</p>\n<h3 id=\"13-符号定义和解析\"><a class=\"anchor\" href=\"#13-符号定义和解析\">#</a> 1.3 符号定义和解析</h3>\n<p>LD 文件包含了在应用程序中使用的符号（变量、函数等）的定义和解析信息。这有助于确保在链接过程中符号的正确匹配，避免未定义符号或符号冲突的问题。</p>\n<h3 id=\"14-分区定义\"><a class=\"anchor\" href=\"#14-分区定义\">#</a> 1.4 分区定义</h3>\n<p>在 AUTOSAR 中，软件通常被划分为不同的分区，每个分区对应于特定的 ECU（Electronic Control Unit）或功能模块。LD 文件定义了这些分区及其相应的内存范围，有助于模块化开发和集成。</p>\n<h3 id=\"15-初始化和启动代码\"><a class=\"anchor\" href=\"#15-初始化和启动代码\">#</a> 1.5 初始化和启动代码</h3>\n<p>LD 文件指定了初始化和启动代码的位置，这些代码在应用程序启动时执行，进行一些必要的初始化工作。这确保系统在启动时处于正确的状态。</p>\n<h2 id=\"2-ld文件的语法解析\"><a class=\"anchor\" href=\"#2-ld文件的语法解析\">#</a> 2. LD 文件的语法解析</h2>\n<p>LD 文件的语法通常与使用的工具链相关，而在 AUTOSAR 中，通常使用基于 GNU binutils 的工具链。以下是一个简单的 LD 文件的例子，用于说明其基本语法：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Sample LD File with Comments */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* ENTRY 指定程序的入口点为标签 \"start\" */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ENTRY</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* MEMORY 定义目标系统的内存布局 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>MEMORY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* RAM (rwx) : ORIGIN 指定起始地址，LENGTH 指定长度 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">RAM</span> <span class=\"token punctuation\">(</span>rwx<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ORIGIN <span class=\"token operator\">=</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">,</span> LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">512</span>K</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* FLASH (rx) : ORIGIN 指定起始地址，LENGTH 指定长度 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">FLASH</span> <span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ORIGIN <span class=\"token operator\">=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">,</span> LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">2</span>M</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* SECTIONS 定义不同的代码段和数据段 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>SECTIONS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/* .text 定义代码段，包括.text 和.rodata 段 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">.</span>text <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>  <span class=\"token comment\">/* 将所有.text 段的内容放在这里 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token operator\">&gt;</span> FLASH  <span class=\"token comment\">/* 指定代码段在 FLASH 内存中的位置 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/* .data 定义数据段 */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">.</span>data <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\">/* 将所有.data 段的内容放在这里 */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token operator\">&gt;</span> RAM  <span class=\"token comment\">/* 指定数据段在 RAM 内存中的位置 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/* .stack 定义堆栈段 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">.</span>stack <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>  <span class=\"token comment\">/* 将所有.stack 段的内容放在这里 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token operator\">&gt;</span> RAM  <span class=\"token comment\">/* 指定堆栈段在 RAM 内存中的位置 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>这个例子包含了 ENTRY、MEMORY 和 SECTIONS 三个主要部分，分别定义了入口点、内存布局和不同的代码段和数据段。需要注意的是，具体的语法和选项可能会根据工具链的不同而有所不同，因此在实际项目中需要参考相应工具链的文档。</p>\n<p>总体而言，LD 文件是确保软件在目标系统上正确链接和运行的关键配置文件。通过了解其作用和基本语法，开发人员可以更好地管理和优化 AUTOSAR 项目的内存资源。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "AUTOSAR",
                "AUTOSAR"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/62e74311.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/62e74311.html",
            "title": "C语言中对printf进行宏定义替换",
            "date_published": "2023-12-08T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>那我们在 code 的过程中有没有想封装一下 printf 的想法呢？加上一些自己的独有的属性？</p>\n<p>好吧！我来啦😘！</p>\n<p>首先，让我们定义一些常用的文本颜色和格式的宏：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RESET</span>           <span class=\"token string\">\"\\033[0m\"</span>     <span class=\"token comment\">// 重置所有属性</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BOLD</span>            <span class=\"token string\">\"\\033[1m\"</span>     <span class=\"token comment\">// 粗体</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UNDERLINE</span>       <span class=\"token string\">\"\\033[4m\"</span>     <span class=\"token comment\">// 下划线</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RED</span>             <span class=\"token string\">\"\\033[31m\"</span>    <span class=\"token comment\">// 红色</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GREEN</span>           <span class=\"token string\">\"\\033[32m\"</span>    <span class=\"token comment\">// 绿色</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">YELLOW</span>          <span class=\"token string\">\"\\033[33m\"</span>    <span class=\"token comment\">// 黄色</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BLUE</span>            <span class=\"token string\">\"\\033[34m\"</span>    <span class=\"token comment\">// 蓝色</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAGENTA</span>         <span class=\"token string\">\"\\033[35m\"</span>    <span class=\"token comment\">// 洋红色</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CYAN</span>            <span class=\"token string\">\"\\033[36m\"</span>    <span class=\"token comment\">// 青色</span></span></pre></td></tr></tbody></table></figure><p>这些宏定义了不同的颜色和格式，如粗体、下划线、红色、绿色等。下面是每个宏的说明：</p>\n<ul>\n<li><code>RESET</code> ：重置所有属性。</li>\n<li><code>BOLD</code> ：粗体。</li>\n<li><code>UNDERLINE</code> ：下划线。</li>\n<li><code>RED</code> ：红色。</li>\n<li><code>GREEN</code> ：绿色。</li>\n<li><code>YELLOW</code> ：黄色。</li>\n<li><code>BLUE</code> ：蓝色。</li>\n<li><code>MAGENTA</code> ：洋红色。</li>\n<li><code>CYAN</code> ：青色。</li>\n</ul>\n<p>接下来，我们定义两个输出宏： <code>PRINT_COLOR</code>  和 <code>PRINT_FORMAT</code> 。这些宏将使用上述颜色和格式宏来为文本添加颜色和格式。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT_COLOR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>color format RESET<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">##</span><span class=\"token expression\">__VA_ARGS__<span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PRINT_FORMAT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">##</span><span class=\"token expression\">__VA_ARGS__<span class=\"token punctuation\">)</span></span></pre></td></tr></tbody></table></figure><ul>\n<li><code>PRINT_COLOR</code>  宏接受一个颜色宏作为第一个参数，后面是格式化字符串和可变数量的参数。它使用 <code>printf</code>  函数来输出带有指定颜色的文本，并通过添加 <code>RESET</code>  宏来重置所有属性，以防止颜色影响后续输出。</li>\n<li><code>PRINT_FORMAT</code>  宏仅接受格式化字符串和可变数量的参数，不附加任何颜色属性。它仅使用 <code>printf</code>  函数直接输出格式化的文本。</li>\n</ul>\n<p>下面是使用这些宏来打印不同颜色和格式的文本的示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 使用不同颜色和格式输出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 输出红色数字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">PRINT_COLOR</span><span class=\"token punctuation\">(</span>RED<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Number: %d\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 输出绿色字符串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">PRINT_COLOR</span><span class=\"token punctuation\">(</span>GREEN<span class=\"token punctuation\">,</span> <span class=\"token string\">\"String: %s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 输出粗体、下划线、洋红色格式化字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">PRINT_FORMAT</span><span class=\"token punctuation\">(</span>BOLD UNDERLINE MAGENTA <span class=\"token string\">\"Combined format: %d, %s\\n\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>总之，通过使用这些宏，我们可以轻松地为文本添加颜色和格式，使其更具可读性和美观性。</p>\n<p>效果：✨</p>\n<p><img data-src=\"../../../img.assets/23-12-9C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%AF%B9printf%E8%BF%9B%E8%A1%8C%E5%AE%8F%E5%AE%9A%E4%B9%89%E6%9B%BF%E6%8D%A2.assets/image-20231209100603047.png\" alt=\"image-20231209100603047\"></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cbe9ac58.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cbe9ac58.html",
            "title": "少爷请收下Git命令吧",
            "date_published": "2023-11-18T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>Git 是一款强大的分布式版本控制系统，用于跟踪文件的变化并协作开发。那这里就记录一些常用的指令吧</p>\n<h3 id=\"1-git基本知识\"><a class=\"anchor\" href=\"#1-git基本知识\">#</a> 1. Git 基本知识</h3>\n<h4 id=\"11-初始化仓库\"><a class=\"anchor\" href=\"#11-初始化仓库\">#</a> 1.1 初始化仓库</h4>\n<ul>\n<li><code>git init</code> : 在当前目录下初始化一个新的 Git 仓库。</li>\n</ul>\n<h4 id=\"12-基本操作\"><a class=\"anchor\" href=\"#12-基本操作\">#</a> 1.2 基本操作</h4>\n<ul>\n<li><code>git status</code> : 查看工作区和暂存区的状态。</li>\n<li><code>git add &lt;file&gt;</code> : 将文件添加到暂存区。</li>\n<li><code>git commit -m \"commit message\"</code> : 提交暂存区的文件到本地仓库。</li>\n<li><code>git log</code> : 查看提交历史记录。</li>\n</ul>\n<h4 id=\"13-分支管理\"><a class=\"anchor\" href=\"#13-分支管理\">#</a> 1.3 分支管理</h4>\n<ul>\n<li><code>git branch</code> : 列出所有本地分支。</li>\n<li><code>git checkout -b &lt;branch&gt;</code> : 创建并切换到新分支。</li>\n<li><code>git merge &lt;branch&gt;</code> : 合并指定分支到当前分支。</li>\n<li><code>git rebase &lt;branch&gt;</code> : 变基，将当前分支的提交在指定分支之上重新应用一次。</li>\n</ul>\n<h4 id=\"14-远程仓库\"><a class=\"anchor\" href=\"#14-远程仓库\">#</a> 1.4 远程仓库</h4>\n<ul>\n<li><code>git remote add origin &lt;remote_url&gt;</code> : 添加远程仓库地址。</li>\n<li><code>git push -u origin &lt;branch&gt;</code> : 推送本地分支到远程仓库。</li>\n<li><code>git pull origin &lt;branch&gt;</code> : 拉取远程分支到本地并合并。</li>\n</ul>\n<h4 id=\"15-撤销和重置\"><a class=\"anchor\" href=\"#15-撤销和重置\">#</a> 1.5 撤销和重置</h4>\n<ul>\n<li><code>git reset --soft HEAD^</code> : 重置最后一次提交，保留修改。</li>\n<li><code>git reset --hard HEAD^</code> : 重置最后一次提交，并且丢弃修改。</li>\n<li><code>git checkout -- &lt;file&gt;</code> : 撤销对文件的修改。</li>\n</ul>\n<h4 id=\"16-标签\"><a class=\"anchor\" href=\"#16-标签\">#</a> 1.6 标签</h4>\n<ul>\n<li><code>git tag &lt;tag_name&gt;</code> : 创建一个轻量级标签。</li>\n<li><code>git tag -a &lt;tag_name&gt; -m \"tag message\"</code> : 创建一个带注释的标签。</li>\n<li><code>git push --tags</code> : 推送所有标签到远程仓库。</li>\n</ul>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "快捷键",
                "Git"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/77f1e290.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/77f1e290.html",
            "title": "正则表达式文本处理小工具",
            "date_published": "2023-11-04T16:00:00.000Z",
            "content_html": "<html><head></head><body><p><strong>缘起</strong>：要处理一个很长很长的文本，有一定的规则，但又无法通过搜索替换直接修改。那么就用 python 吧。</p>\n<p>当使用正则表达式进行文本处理时，有时我们需要删除一对特定符号之间的内容。例如，我们想删除成对出现的《和》之间的内容。</p>\n<p>下面是一个使用 Python 编写的示例代码，可以实现这个功能，并让用户自定义要删除的符号。</p>\n<p>以下是完整的代码：</p>\n<pre><code>import re\n\n# 用户输入要删除的符号\nstart_symbol = input(\"请输入要删除的起始符号：\")\nend_symbol = input(\"请输入要删除的结束符号：\")\n\n# 转义符号中的特殊字符\nstart_symbol = re.escape(start_symbol)\nend_symbol = re.escape(end_symbol)\n\n# 获取输入文件路径和输出文件路径\ninput_file_path = input(\"请输入要处理的输入文件路径：\")\noutput_file_path = input(\"请输入处理后的输出文件路径：\")\n\ntry:\n   # 打开输入文件并读取文本内容\n   with open(input_file_path, 'r', encoding='utf-8') as file:\n       text = file.read()\n\n   # 构造正则表达式模式，并匹配删除符号之间的内容\n   pattern = start_symbol + '.*?' + end_symbol\n   text = re.sub(pattern, '', text, flags=re.DOTALL)\n\n   # 打开输出文件并将处理后的文本写入\n   with open(output_file_path, 'w', encoding='utf-8') as file:\n       file.write(text)\n\n   print(\"处理完成！\")\n\nexcept FileNotFoundError:\n   print(\"文件路径错误，请重新输入正确的文件路径！\")\n</code></pre>\n<p>在这段代码中：</p>\n<p>** 首先，** 用户需要输入要删除的起始符号和结束符号。代码会自动将这些符号进行转义，以避免正则表达式语法冲突。</p>\n<p><strong>然后</strong>，用户需要输入要处理的输入文件路径和处理后的输出文件路径。程序会打开输入文件，并读取文件中的文本内容。</p>\n<p><strong>接下来</strong>，通过构造正则表达式模式来匹配要删除的符号之间的内容。使用 <code>re.sub()</code>  函数将匹配到的内容替换为空字符串，实现删除操作。通过添加 <code>flags=re.DOTALL</code>  参数，确保 <code>.</code>  元字符可以匹配包括换行符在内的任意字符。</p>\n<p><strong>最后</strong>，程序会打开输出文件，并将处理后的文本写入。处理完成后，会打印出 \"处理完成！\" 的提示信息。</p>\n<p>当然，在运行代码之前，请确保输入文件存在，并且有足够的访问权限。</p>\n<p><strong>快用起来啵😚</strong></p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"flechazo\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=\">flechazo</span>\n          <p class=\"desc\">https://www.zhihu.com/people/jiu_sheng</p>\n          </div></div></div><p></p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "python",
                "python"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/80dffc84.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/80dffc84.html",
            "title": "cmake编译生成a静态库文件",
            "date_published": "2023-10-27T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>万物皆有因，存在即为真理！</p>\n<p>缘起：写代码的过程中呢，为了避免源代码太裸露，能不能<strong>又让别人可以使用</strong>你的代码实现功能，<strong>又不给他源代码</strong>呢？</p>\n<p>那么可以这样</p>\n<p>下面是一些 cmake 的示例，可以生成.a 静态库文件，这样相当于加密代码了呢。</p>\n<h2 id=\"生成o文件\"><a class=\"anchor\" href=\"#生成o文件\">#</a> 生成 o 文件</h2>\n<p>一个生成.o 文件的示例:</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义编译器、链接器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CC = gcc </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LD = gcc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 通配符函数表示目录下所有.c 文件，相当于：SRCS = main.c a.c b.c</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SRCS = $<span class=\"token punctuation\">(</span>wildcard *.c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 通配符函数把列表中的.c 全部替换为.o，相当于：OBJS = main.o a.o b.o</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>OBJS = $<span class=\"token punctuation\">(</span>patsubst %.c, %.o, $<span class=\"token punctuation\">(</span>SRCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 可执行文件的名字</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>TARGET = Test</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># .PHONE 伪目标</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.PHONY:all clean</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 要生成的目标文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>all: $<span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 依赖关系：冒号后面为依赖的文件，相当于 Test: main.o a.o b.o</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 规则：$@表示目标文件，$^ 表示所有依赖文件，$&lt; 表示第一个依赖文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>$<span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span>: $<span class=\"token punctuation\">(</span>OBJS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    $<span class=\"token punctuation\">(</span>LD<span class=\"token punctuation\">)</span> -o $@ $^</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 上一句目标文件依赖一大堆.o 文件，这句表示所有.o 都由相应名字的.c 文件自动生成</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>%.o:%.c</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t$<span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -c $^</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># make clean 删除所有.o 和目标文件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>clean:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\trm -f $<span class=\"token punctuation\">(</span>OBJS<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h2 id=\"生成a文件\"><a class=\"anchor\" href=\"#生成a文件\">#</a> 生成 a 文件</h2>\n<p>你可以使用 Makefile 来编译一些 <code>.c</code>  和 <code>.h</code>  文件，并最终生成一个静态库（ <code>.a</code>  文件）。以下是一个简单的 Makefile 示例：</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>Copy CodeCC=gcc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CFLAGS=-Wall -g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>AR=ar</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ARFLAGS=-rcs</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>TARGET=mylib.a</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SRCS=$<span class=\"token punctuation\">(</span>wildcard *.c<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 通过通配符获取所有.c 文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>OBJS=$<span class=\"token punctuation\">(</span>patsubst %.c,%.o,$<span class=\"token punctuation\">(</span>SRCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 将所有.c 文件转为对应的.o 文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.PHONY: all clean</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>all: $<span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>$<span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span>: $<span class=\"token punctuation\">(</span>OBJS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t$<span class=\"token punctuation\">(</span>AR<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>ARFLAGS<span class=\"token punctuation\">)</span> $@ $^</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>%.o: %.c %.h</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t$<span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>CFLAGS<span class=\"token punctuation\">)</span> -c <span class=\"token punctuation\">$&lt;</span> -o $@</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>clean:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\trm -f $<span class=\"token punctuation\">(</span>OBJS<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>TARGET<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>在这个示例中，我们首先定义了几个变量：</p>\n<ul>\n<li><code>CC</code> ：编译器命令。</li>\n<li><code>CFLAGS</code> ：编译器参数。</li>\n<li><code>AR</code> ：静态库打包命令。</li>\n<li><code>ARFLAGS</code> ：静态库打包参数。</li>\n</ul>\n<p>然后，我们定义了目标文件 <code>$(TARGET)</code> ，即要生成的静态库文件。通过 <code>$(wildcard *.c)</code>  命令获取当前目录下的所有 <code>.c</code>  文件，然后通过 <code>$(patsubst %.c,%.o,$(SRCS))</code>  命令将所有 <code>.c</code>  文件转换为对应的 <code>.o</code>  文件。</p>\n<p>接着，我们定义了两个规则：</p>\n<ol>\n<li><code>$(TARGET): $(OBJS)</code> ：表示要生成目标文件 <code>$(TARGET)</code> ，依赖于所有的 <code>.o</code>  文件。执行命令 <code>$(AR) $(ARFLAGS) $@ $^</code>  来将所有的 <code>.o</code>  文件打包成静态库。</li>\n<li><code>%.o: %.c %.h</code> ：表示要编译生成每一个 <code>.o</code>  目标文件，依赖于对应的 <code>.c</code>  源文件和对应的 <code>.h</code>  头文件。执行命令 <code>$(CC) $(CFLAGS) -c $&lt; -o $@</code> 进行编译操作。</li>\n</ol>\n<p>最后，我们定义了两个动态规则：</p>\n<ul>\n<li><code>.PHONY: all clean</code> ：声明 <code>all</code>  和 <code>clean</code>  为伪目标，防止误判。</li>\n<li><code>all: $(TARGET)</code>  和 <code>clean:</code> ：表示 <code>all</code>  和 <code>clean</code>  是默认目标，使用命令 <code>make</code>  时，会自动执行 <code>all</code>  目标。</li>\n</ul>\n<p>你可以根据需要修改编译器参数、头文件目录、源文件目录等。通过执行 <code>make</code>  命令，即可编译生成静态库文件（ <code>.a</code>  文件）。执行 <code>make clean</code>  命令，可以清除编译过程中生成的中间文件和目标文件。</p>\n<h2 id=\"引入a文件\"><a class=\"anchor\" href=\"#引入a文件\">#</a> 引入 a 文件</h2>\n<p>对于 C/C++ 语言，可以在代码中使用 <code>#include</code>  预处理指令来引入头文件，使用 <code>-l</code>  选项或 <code>-L</code>  选项来链接静态库。以下是一个示例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"mylibrary.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 使用 mylibrary 中的函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">myfunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: %d\\n\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在上述示例中， <code>#include</code>  指令用于引入标准头文件 <code>&lt;stdio.h&gt;</code>  和自定义头文件 <code>\"mylibrary.h\"</code> 。 <code>mylibrary.h</code>  头文件中声明了一个名为 <code>myfunction</code>  的函数，该函数在静态库 <code>libmylibrary.a</code>  中实现。</p>\n<p>在编译代码时，可以使用 <code>-l</code>  选项来指定静态库名称，例如：</p>\n<pre><code class=\"language-c++\">gcc -o myprogram mysource.c -l mylibrary\n</code></pre>\n<p>如果静态库不在默认的库路径中，可以使用 <code>-L</code>  选项指定库路径，例如：</p>\n<pre><code class=\"language-c++\">gcc -o myprogram mysource.c -L /path/to/library -l mylibrary\n</code></pre>\n<p>这样的操作好玩不，快试试吧😂</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/2b388030.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/2b388030.html",
            "title": "markdown语法汇总",
            "date_published": "2023-10-14T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>当使用 Hexo 进行博客开发时，所用到的语法主要有两部分：Markdown 和 Hexo。下面将分别介绍它们的语法。</p>\n<h2 id=\"markdown语法\"><a class=\"anchor\" href=\"#markdown语法\">#</a> Markdown 语法</h2>\n<p>Markdown 是一种轻量级的标记语言，适用于写博客、笔记等文本类内容。其语法简单易懂，可以快速学习和掌握。下面是 Markdown 的常用语法：</p>\n<h3 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h3>\n<p>使用 # 来表示标题，# 的数量表示标题的级别，例如 # 表示一级标题，## 表示二级标题，以此类推。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> 一级标题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">##</span> 二级标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">###</span> 三级标题</span></pre></td></tr></tbody></table></figure><h3 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h3>\n<p>使用 - 或 * 来创建无序列表，或使用数字和。来创建有序列表。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">-</span> 无序列表项1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">-</span> 无序列表项2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 有序列表项1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 有序列表项2</pre></td></tr></tbody></table></figure><h3 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h3>\n<p>使用 &gt; 来创建引用。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">&gt;</span> 这是一段引用。</pre></td></tr></tbody></table></figure><h3 id=\"图片\"><a class=\"anchor\" href=\"#图片\">#</a> 图片</h3>\n<p>使用 <img data-src=\"../../../\" alt=\"img\"> 语法来插入图片，其中 [] 中填写图片的描述，() 中填写图片的链接。</p>\n<pre><code>![图片描述](图片链接)\n</code></pre>\n<h3 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h3>\n<p>使用  语法来插入链接，其中 [] 中填写链接的描述，() 中填写链接的地址。</p>\n<pre><code>[链接描述](链接地址)\n</code></pre>\n<h3 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h3>\n<p>使用 ```来标记代码块，也可以使用单个` 来标记内嵌代码。</p>\n<pre><code>```python\nprint('hello, world')\nprint('hello, world')\nCopy Code\n### 分割线\n\n使用 --- 来插入分割线。\n\n```markdown\n---\n</code></pre>\n<h3 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h3>\n<p>Markdown 还支持粗体、斜体、删除线、表格等语法，具体用法可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFya2Rvd24ueHl6Lw==\"> Mardown 教程</span>。</p>\n<h2 id=\"hexo语法\"><a class=\"anchor\" href=\"#hexo语法\">#</a> Hexo 语法</h2>\n<p>除了 Markdown，Hexo 还提供了许多自身的语法和功能，用于对博客进行更加细致的管理和展示。</p>\n<h3 id=\"front-matter\"><a class=\"anchor\" href=\"#front-matter\">#</a> Front-matter</h3>\n<p>Front-matter 是指位于文章开头的 YAML 格式头部信息，用来定义文章的元数据。例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 示例文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2023-10-15</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">-</span> 技术</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">-</span> 编程</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></tbody></table></figure><p>Hexo 会解析 Front-matter，将元数据存储到数据库中。</p>\n<h3 id=\"标签和分类\"><a class=\"anchor\" href=\"#标签和分类\">#</a> 标签和分类</h3>\n<p>标签（Tags）用于对文章进行分类和标记，分类（Categories）用于对文章进行更精细的归类。你可以在文章的 Front-matter 中添加 tags 和 categories 字段，将文章与特定的标签或分类相关联。例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 示例文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2023-10-15</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">-</span> 技术</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">-</span> 编程</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> 技术</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></tbody></table></figure><h3 id=\"摘要\"><a class=\"anchor\" href=\"#摘要\">#</a> 摘要</h3>\n<p>摘要（Excerpt）是文章的简短描述，通常用于在首页或文章列表中展示。你可以在文章正文中添加 <code>&lt;!-- more --&gt;</code>  标签来分隔摘要和完整内容。例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 示例文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2023-10-15</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>这是文章的摘要部分。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- more --&gt;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>这是文章的完整内容。</pre></td></tr></tbody></table></figure><h3 id=\"扩展名\"><a class=\"anchor\" href=\"#扩展名\">#</a> 扩展名</h3>\n<p>扩展名（Permalink）用于自定义文章的 URL 地址。默认情况下，Hexo 会根据文章的创建时间和文件名生成 URL。但你也可以自定义 URL，比如使用文章的标题作为扩展名。在配置文件  <code>_config.yml</code>  中可以设置 permalink 的格式。例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>yamlCopy Codepermalink: :title/</pre></td></tr></tbody></table></figure><p>这样，文章的 URL 会根据标题生成。</p>\n<h3 id=\"标签和分类页面\"><a class=\"anchor\" href=\"#标签和分类页面\">#</a> 标签和分类页面</h3>\n<p>除了给文章打标签和分类外，还可以将标签和分类显示到相应的页面中。你可以在主题中相关位置插入标签和分类的链接，或使用 Hexo 提供的 tag 和 category 页面生成器，自动生成标签页和分类页。</p>\n<h3 id=\"链接页语法\"><a class=\"anchor\" href=\"#链接页语法\">#</a> 链接页语法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"><div class=\"links\"><div class=\"item\" title=\"码云QT工厂配置工具\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmxlY2hhem81MjAxMzE0L3F0ZmFjdG9yeQ==\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmxlY2hhem81MjAxMzE0L3F0ZmFjdG9yeQ==\">码云QT工厂配置工具</span>\n          <p class=\"desc\">https://gitee.com/flechazo5201314/qtfactory</p>\n          </div></div></div></span></pre></td></tr></tbody></table></figure><p>效果：</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"码云QT工厂配置工具\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmxlY2hhem81MjAxMzE0L3F0ZmFjdG9yeQ==\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZmxlY2hhem81MjAxMzE0L3F0ZmFjdG9yeQ==\">码云QT工厂配置工具</span>\n          <p class=\"desc\">https://gitee.com/flechazo5201314/qtfactory</p>\n          </div></div></div><p></p>\n<h2 id=\"sakura主题\"><a class=\"anchor\" href=\"#sakura主题\">#</a> Sakura 主题</h2>\n<p>Sakura 是一款基于 Bootstrap 4 的响应式 Hexo 主题，具有清新优美的设计风格和强大的自定义功能。以下是一些常用的 Sakura 特性：</p>\n<h3 id=\"自定义头图\"><a class=\"anchor\" href=\"#自定义头图\">#</a> 自定义头图</h3>\n<p>Sakura 支持自定义头图，即在文章中添加 <code>cover</code>  字段，来指定当前文章的头图。例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 示例文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2023-10-15</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> /images/cover.jpg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></tbody></table></figure><h3 id=\"自定义页面\"><a class=\"anchor\" href=\"#自定义页面\">#</a> 自定义页面</h3>\n<p>Sakura 支持自定义页面，你可以在  <code>source</code>  目录下创建  <code>.md</code>  文件，设置  <code>layout: page</code> ，并添加自己的内容，就可以在站点上添加一个新的页面了。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 关于我</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>这是关于我的内容。</pre></td></tr></tbody></table></figure><h3 id=\"归档页面\"><a class=\"anchor\" href=\"#归档页面\">#</a> 归档页面</h3>\n<p>Sakura 内置了归档页面，可以根据文章发布时间自动生成各年份、各月份的文章列表。</p>\n<h3 id=\"侧边栏小部件\"><a class=\"anchor\" href=\"#侧边栏小部件\">#</a> 侧边栏小部件</h3>\n<p>Sakura 还提供了多个侧边栏小部件，用于展示标签、分类、最近更新的文章等信息。</p>\n<p>以上是关于 Hexo、Markdown 和 Sakura 主题的语法和特性，希望对你有所帮助！</p>\n</body></html>",
            "tags": [
                "blog🌮",
                "hexo",
                "个人博客"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/48b3f971.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/48b3f971.html",
            "title": "C语言define的骚操作",
            "date_published": "2023-10-14T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"给大家介绍一种define的骚操作用宏定义封装函数去遍历结构体并改变一个结构体的属性\"><a class=\"anchor\" href=\"#给大家介绍一种define的骚操作用宏定义封装函数去遍历结构体并改变一个结构体的属性\">#</a> 给大家介绍一种 #define 的骚操作：用宏定义封装函数去遍历结构体并改变一个结构体的属性。</h2>\n<p>在 C 语言中，我们经常需要对结构体数组进行遍历，并对其中的某个属性进行修改。为了简化这一过程，我们可以使用宏定义来实现这个功能。下面是一个示例代码，通过宏定义来遍历结构体数组并修改特定的属性。</p>\n<h2 id=\"首先我们需要定义一个结构体用于表示学生信息-在本示例中我们的学生结构体包含id-name和score三个属性\"><a class=\"anchor\" href=\"#首先我们需要定义一个结构体用于表示学生信息-在本示例中我们的学生结构体包含id-name和score三个属性\">#</a> 首先，我们需要定义一个结构体，用于表示学生信息。在本示例中，我们的学生结构体包含 <code>id</code> 、 <code>name</code>  和 <code>score</code>  三个属性。</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span> Student<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"接下来我们使用宏定义来实现遍历结构体数组并修改特定属性的功能-下面是这个宏定义的代码\"><a class=\"anchor\" href=\"#接下来我们使用宏定义来实现遍历结构体数组并修改特定属性的功能-下面是这个宏定义的代码\">#</a> 接下来，我们使用宏定义来实现遍历结构体数组并修改特定属性的功能。下面是这个宏定义的代码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MODIFY_ATTR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token expression\">arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></pre></td></tr></tbody></table></figure><p>这个宏定义接受四个参数： <code>arr</code>  表示结构体数组的名称， <code>n</code>  表示数组的长度， <code>attr</code>  表示要修改的属性， <code>val</code>  表示要修改成的值。宏定义内部使用了一个循环，遍历结构体数组，并将指定属性的值修改为给定的值。</p>\n<h2 id=\"接下来我们在主函数中使用这个宏定义来演示其用法-首先我们定义了一个包含三个学生信息的结构体数组students\"><a class=\"anchor\" href=\"#接下来我们在主函数中使用这个宏定义来演示其用法-首先我们定义了一个包含三个学生信息的结构体数组students\">#</a> 接下来，我们在主函数中使用这个宏定义来演示其用法。首先，我们定义了一个包含三个学生信息的结构体数组 <code>students</code> 。</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>Student students<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chai\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Flechazo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"然后我们调用了modify_attr宏来将所有学生的成绩改为100\"><a class=\"anchor\" href=\"#然后我们调用了modify_attr宏来将所有学生的成绩改为100\">#</a> 然后，我们调用了 <code>MODIFY_ATTR</code>  宏来将所有学生的成绩改为 100。</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">MODIFY_ATTR</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"最后我们通过循环遍历结构体数组并输出每个学生的信息以验证修改结果\"><a class=\"anchor\" href=\"#最后我们通过循环遍历结构体数组并输出每个学生的信息以验证修改结果\">#</a> 最后，我们通过循环遍历结构体数组，并输出每个学生的信息，以验证修改结果。</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id: %d, name: %s, score: %d\\n\"</span><span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"运行上述代码我们可以看到修改后的结果\"><a class=\"anchor\" href=\"#运行上述代码我们可以看到修改后的结果\">#</a> 运行上述代码，我们可以看到修改后的结果：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> Alice<span class=\"token punctuation\">,</span> score<span class=\"token operator\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> Chai<span class=\"token punctuation\">,</span> score<span class=\"token operator\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> Flechazo<span class=\"token punctuation\">,</span> score<span class=\"token operator\">:</span> <span class=\"token number\">100</span></pre></td></tr></tbody></table></figure><p>通过上述示例，我们展示了如何使用宏定义来遍历结构体数组并修改特定属性。使用宏定义可以简化代码的书写，提高开发效率。当需要对结构体数组中的某个属性进行批量修改时，宏定义是一个有用的工具。</p>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码：</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 定义结构体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span> Student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 遍历数组并改变特定属性</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MODIFY_ATTR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token expression\">arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 定义结构体数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tStudent students<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chai\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Flechazo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 修改 score 属性</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">MODIFY_ATTR</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 输出修改后的结果</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id: %d, name: %s, score: %d\\n\"</span><span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//***************************//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//          输出结果</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//id: 1, name: Alice, score: 100</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//id: 2, name: Chai, score: 100</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//id: 3, name: Flechazo, score: 100</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//***************************//</span></pre></td></tr></tbody></table></figure><p>是不是很猛，哇，我看到这种用法惊呆了！</p>\n<p>可以优化掉很多代码的好吧！</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e86195b2.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e86195b2.html",
            "title": "在Windows 10系统上配置多个Git账号",
            "date_published": "2023-10-14T16:00:00.000Z",
            "content_html": "<html><head></head><body><h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<p>在使用 Git 进行版本控制时，有时我们需要同时管理多个不同的 Git 账号。本教程将详细介绍如何在 Windows 10 系统上配置多个 Git 账号，让你能够灵活切换和管理多个 Git 身份。</p>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤：</h2>\n<ol>\n<li>\n<p>安装 Git： 首先，确保你已经安装了 Git。你可以从 Git 官方网站（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8lRUYlQkMlODklRTQlQjglOEIlRTglQkQlQkQlRTYlOUMlODAlRTYlOTYlQjAlRTclODklODglRTYlOUMlQUMlRTclOUElODRHaXQlRUYlQkMlOEMlRTUlQjklQjYlRTYlOEMlODklRTclODUlQTclRTYlOEYlOTAlRTclQTQlQkElRTglQkYlOUIlRTglQTElOEMlRTUlQUUlODklRTglQTMlODUlRTMlODAlODI=\">https://git-scm.com/）下载最新版本的 Git，并按照提示进行安装。</span></p>\n</li>\n<li>\n<p>生成 SSH 密钥： 每个 Git 账号都需要一个唯一的 SSH 密钥来进行身份验证。打开命令提示符（或 Git Bash），运行以下命令来生成一个新的 SSH 密钥：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>Copy Codessh<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span>C <span class=\"token string\">\"your_email@example.com\"</span></pre></td></tr></tbody></table></figure><p>将 \"<span class=\"exturl\" data-url=\"bWFpbHRvOnlvdXJfZW1haWxAZXhhbXBsZS5jb20=\">your_email@example.com</span>\" 替换为你的邮箱地址，用于关联到对应的 Git 账号。生成的 SSH 密钥将保存在默认目录下（通常是 <code>C:\\Users\\YourUsername\\.ssh</code> ）。</p>\n</li>\n<li>\n<p>配置 SSH 配置文件： 在 SSH 配置文件中指定不同的主机别名和对应的私钥文件。打开或创建 <code>~/.ssh/config</code>  文件，并添加以下内容：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>Copy Code# Git account <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Host github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">-</span>account1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    HostName github<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    User git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>id_rsa_account1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token expression\">Git account <span class=\"token number\">2</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Host github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">-</span>account2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    HostName github<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    User git</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    IdentityFile <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh<span class=\"token operator\">/</span>id_rsa_account2</pre></td></tr></tbody></table></figure><p>自定义 Host 名称，如 <code>github.com-account1</code>  和 <code>github.com-account2</code> ，以及对应的 IdentityFile 路径，如 <code>~/.ssh/id_rsa_account1</code>  和 <code>~/.ssh/id_rsa_account2</code> 。确保为每个 Git 账号设置不同的 Host 名称和 IdentityFile 路径。</p>\n</li>\n<li>\n<p>添加 SSH 公钥到 Git 账号： 将生成的 SSH 公钥添加到相应的 Git 账号中。登录到 Git 账号的网站（如 GitHub、GitLab），找到 SSH 密钥配置页面，并将对应的公钥内容添加到该页面。</p>\n</li>\n<li>\n<p>验证配置： 运行以下命令来验证你的配置是否成功：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>Copy Codessh <span class=\"token operator\">-</span>T git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">-</span>account1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssh <span class=\"token operator\">-</span>T git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">-</span>account2</pre></td></tr></tbody></table></figure><p>如果你看到类似的欢迎消息，表示你已经成功配置了多个 Git 账号。</p>\n</li>\n</ol>\n<p>使用和切换 Git 账号： 现在你可以在本地使用不同的 Git 账号进行代码的克隆和提交。当你克隆或操作特定 Git 存储库时，使用对应的主机别名即可。 例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>Copy Codegit clone git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">-</span>account1<span class=\"token operator\">:</span>username<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git clone git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">-</span>account2<span class=\"token operator\">:</span>username<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git</pre></td></tr></tbody></table></figure><h2 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项：</h2>\n<ul>\n<li>在配置多个 Git 账号时，请确保每个账号使用独立的 SSH 密钥和主机别名。</li>\n<li>在添加 SSH 公钥到 Git 账号时，确保将正确的公钥内容粘贴到对应的配置页面。</li>\n<li>在验证配置时，确保 SSH 命令与配置文件中的主机别名一致。</li>\n</ul>\n<h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论：</h2>\n<p>通过按照以上步骤，在 Windows 10 系统上配置多个 Git 账号将使你能够方便地管理不同的 Git 身份和项目。这样你就可以轻松切换和使用不同的 Git 账号进行代码的克隆和提交了。</p>\n<p>希望本教程对你有所帮助，祝你在多个 Git 账号的管理中取得成功！</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "GIT",
                "遇到的问题"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/11ecbebe.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/11ecbebe.html",
            "title": "基于国外服务器搭建自己的VPN",
            "date_published": "2023-10-14T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>搭建自己的 VPN 服务器可以让你在连接互联网时更安全和私密。下面是一个基于国外服务器搭建自己的 VPN 的详细教程：</p>\n<ol>\n<li>\n<p>选择一台国外服务器：首先，你需要选择一个可靠的国外服务器提供商，并租用一台服务器。确保服务器提供商支持 VPN 的搭建和配置。</p>\n</li>\n<li>\n<p>安装操作系统：在服务器上安装适合的操作系统。常用的选择包括 Ubuntu、Debian、CentOS 等。根据服务器提供商的建议和你自己的喜好进行选择。</p>\n</li>\n<li>\n<p>配置服务器：登录到服务器，并进行必要的配置。这包括更新软件包、安装必需的软件和设置基本防火墙规则等。具体步骤可能因操作系统而有所不同，请参考所选操作系统的相关文档和教程。</p>\n</li>\n<li>\n<p>安装和配置 VPN 软件：选择一种合适的 VPN 软件进行安装和配置。常见的选择包括 OpenVPN、WireGuard 等。以下是以 OpenVPN 为例的配置步骤：</p>\n<ul>\n<li>\n<p>安装 OpenVPN 软件：使用包管理器安装 OpenVPN 软件。例如，在 Ubuntu 上，可以运行以下命令进行安装：</p>\n<pre><code>Copy Codesudo apt-get install openvpn\n</code></pre>\n</li>\n<li>\n<p>配置 OpenVPN 服务器：生成证书和密钥，配置 OpenVPN 服务器。这涉及到创建服务器配置文件、生成证书和生成客户端配置文件等。可以参考 OpenVPN 的官方文档或其他教程，了解如何完成这些步骤。</p>\n</li>\n<li>\n<p>启动 OpenVPN 服务器：启动 OpenVPN 服务器，并确保它在系统启动时自动启动。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>配置客户端设备：在你要使用 VPN 的设备（如电脑、手机）上安装并配置 VPN 客户端。根据所选的 VPN 软件和设备操作系统的不同，具体步骤会有所不同。通常，你需要导入服务器的证书和配置文件，并连接到 VPN 服务器。</p>\n</li>\n<li>\n<p>测试 VPN 连接：在客户端设备上测试 VPN 连接。确保能够成功连接到 VPN 服务器，并确保网络流量通过 VPN 进行传输。</p>\n</li>\n</ol>\n<p>请注意，搭建和配置 VPN 服务器涉及到复杂的网络和安全设置，如果你不熟悉这些技术，请咨询专业人士或参考详细的教程和文档。此外，确保你遵守当地法律和服务器提供商的使用政策，以确保合法合规的使用。</p>\n<p>下面开始一个完整例程：</p>\n<p>我们在工作和生活中都需要用到翻墙，但由于种种原因，现在第三方已经不那么容易使用了。下面小编与大家分享如何利用国外服务器构建我们自己的私人 VPN。</p>\n<p>首先这个方法不是免费的</p>\n<h2 id=\"第一步你需要有一台国外的服务器\"><a class=\"anchor\" href=\"#第一步你需要有一台国外的服务器\">#</a> 第一步：你需要有一台国外的服务器</h2>\n<p>或者香港服务器也可以，云服务平台有很多，如果只是单纯的搭建 VPN，可以买便宜的服务器。</p>\n<h2 id=\"第二步服务器配置安装shadowsocks-server\"><a class=\"anchor\" href=\"#第二步服务器配置安装shadowsocks-server\">#</a> 第二步：服务器配置，安装 Shadowsocks Server</h2>\n<p>1、执行如下命令</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>wget <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>check<span class=\"token operator\">-</span>certificate <span class=\"token operator\">-</span>O shadowsocks<span class=\"token operator\">-</span>all<span class=\"token punctuation\">.</span>sh https<span class=\"token operator\">:</span><span class=\"token comment\">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span></pre></td></tr></tbody></table></figure><p>2、上面的命令执行结束后，执行下面的命令</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>chmod <span class=\"token operator\">+</span>x shadowsocks<span class=\"token operator\">-</span>all<span class=\"token punctuation\">.</span>sh</pre></td></tr></tbody></table></figure><p>3、上面的命令执行结束后，执行下面的命令</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>shadowsocks<span class=\"token operator\">-</span>all<span class=\"token punctuation\">.</span>sh <span class=\"token number\">2</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token operator\">|</span> tee shadowsocks<span class=\"token operator\">-</span>all<span class=\"token punctuation\">.</span>log</pre></td></tr></tbody></table></figure><p>4、执行上述命令会有相关输入提示操作；根据需要选择。不明白的话就直接选 1 或者直接默认回车；之后会提示你输入密码和端口，对应设置即可，或者直接使用默认的；由于 iPhone 端的 wingy 目前只支持到 cfb，所以加密方式选择 aes-256-cfb 也就是选择 7; 全部执行完成之后就会出现如下信息：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>StartingShadowsocks success</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Congratulations<span class=\"token punctuation\">,</span> Shadowsocks<span class=\"token operator\">-</span>Python server install completed<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>YourServer IP <span class=\"token operator\">:</span> 你的IP</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>YourServerPort<span class=\"token operator\">:</span> 在第四步提示设置的端口号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>YourPassword<span class=\"token operator\">:</span> 在第四步提示设置的密码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>YourEncryptionMethod<span class=\"token operator\">:</span> aes<span class=\"token operator\">-</span><span class=\"token number\">256</span><span class=\"token operator\">-</span>cfb</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Your QR Code<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ForShadowsocksWindows<span class=\"token punctuation\">,</span> OSX<span class=\"token punctuation\">,</span> Androidand iOS clients<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ss<span class=\"token operator\">:</span><span class=\"token comment\">//YWVzLTI1Ni1jZmI6emh1aTB8dGgAs2x9hC5DC29zRnZp1rhSZaxor2Z</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Your QR Code has been saved as a PNG file path<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>shadowsocks_python_qr<span class=\"token punctuation\">.</span>png</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Welcome to visit<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//teddysun.com/486.html</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Enjoy it<span class=\"token operator\">!</span></pre></td></tr></tbody></table></figure><p>5、看到以上信息就说明安装完成了，然后根据不同的终端设备进行设置就可以了</p>\n<h2 id=\"第三步-使用shadowsocks终端体验vpn\"><a class=\"anchor\" href=\"#第三步-使用shadowsocks终端体验vpn\">#</a> 第三步、使用 Shadowsocks 终端体验 VPN</h2>\n<p>1、下载对应客户端</p>\n<p>Windows：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uaGsuY24vI3MvOUttR2dpV2c=\">https://pan.hk.cn/#s/9KmGgiWg</span></p>\n<p>Mac：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhbmdmZWljaGV1bmcvU2hhZG93c29ja3MtWC9yZWxlYXNlcw==\">https://github.com/yangfeicheung/Shadowsocks-X/releases</span></p>\n<p>Android：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uaGsuY24vI3MvOUttR1BtQXc=\">https://pan.hk.cn/#s/9KmGPmAw</span></p>\n<p>iPhone：App Store 上下载 ShadowLink，这个要用国外 appid 才可以下载哦。国内的搜不到的，因为 shadowrocket 收费的</p>\n<p>2、配置 Shadowsocks</p>\n<p>windows</p>\n<p>下载之后运行就会看到右下角有小飞机，然后右键编辑服务器；对应的服务器地址、端口、密码、加密方式就是第二步中 4 步骤中看到的信息，对应填写确定即。</p>\n<p><img data-src=\"../../../img.assets/23-10-15%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN.assets/pH8H4yGf.png\" alt=\"pH8H4yGf\"></p>\n<p>见证奇迹的时刻到了浏览器打开 https://www.google.com/</p>\n<p><img data-src=\"../../../img.assets/23-10-15%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN.assets/L4PUWYzb.png\" alt=\"L4PUWYzb\"></p>\n<p><strong>Android 手机</strong></p>\n<p>安装好上面对应的客户端如下图左边的填写对应的服务 ip、端口、密码、加密方式然后保存；然后点击中间图下面的小飞机，看到手机上面有个钥匙的就是成功了，然后你就可以用浏览器访问 Google 嘞</p>\n<p><img data-src=\"../../../img.assets/23-10-15%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN.assets/X4EKs6ZI.png\" alt=\"X4EKs6ZI\"></p>\n<p><img data-src=\"../../../img.assets/23-10-15%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN.assets/bIIIctQQ.png\" alt=\"bIIIctQQ\"></p>\n<p><img data-src=\"../../../img.assets/23-10-15%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN.assets/49Er1baP.png\" alt=\"49Er1baP\"></p>\n<p><strong>iPhone 手机</strong></p>\n<p>安装好上面对应的客户端如左边图点击添加线路，然后是中间图填写对应的服务 ip、端口、密码、加密方式然后保存，之后点击左图的开关按钮；看到手机上出现 vpn 的图标就成功了，可以随心所欲看视频了。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "服务器",
                "服务器"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/5c572fc.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/5c572fc.html",
            "title": "用5个IO口实现25个按键的扫描",
            "date_published": "2023-10-09T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>！！</p>\n<p>如何用最少的 IO 口去扫描更多的按键呢？我来啦</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"用最少的IO口扫描最多的按键\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NTk3MTQ2NzQ=\" data-background-image=\"https://pic1.zhimg.com/70/v2-f12af2365f885012a67c1df821123667_1440w.avis?source=172ae18b&amp;biz_tag=Post\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NTk3MTQ2NzQ=\">用最少的IO口扫描最多的按键</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/659714674</p>\n          </div></div></div><p></p>\n<h2 id=\"缘起\"><a class=\"anchor\" href=\"#缘起\">#</a> 缘起</h2>\n<p>最近再做一个按键，后来就打开了新世界的大门。</p>\n<p>3 个按键能扫描 9 个按键。5 个按键扫描 25 个。</p>\n<p>妥妥的榨干芯片的性能。</p>\n<h2 id=\"原理图如下\"><a class=\"anchor\" href=\"#原理图如下\">#</a> 原理图如下</h2>\n<p><img data-src=\"../../../img.assets/23-10-10%E4%BA%94%E4%B8%AAIO%E5%8F%A3%E5%AE%9E%E7%8E%B025%E4%B8%AA%E6%8C%89%E9%94%AE%E7%9A%84%E6%89%AB%E6%8F%8F.assets/image-20231010214548831.png\" alt=\"image-20231010214548831\"></p>\n<p>这里我只画了 3 个 IO 口的。</p>\n<p>大家也可以看到，它是沿着对角线有一个二极管。那么增加更多的按键，就斜着往上拓展吧。</p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>1. 整体规划：按键扫描存在 4 个步骤，每个步骤停留一段时间（20ms）去检索状态。</p>\n<p>2. 第一步拉高 P32、P33、P34：</p>\n<ul>\n<li>判断 P32,P33,P34 的电平，P32 低则 SW2 按下，P33 低则 SW3 按下，P34 低则 SW4 按下。</li>\n</ul>\n<p>3. 第二步拉高 P33、P34，拉低 P32：</p>\n<ul>\n<li>判断 P33,P34 的电平，P33 低则 SW5 按下，P34 低则 SW6 按下。</li>\n</ul>\n<p>4. 第三步拉高 P32、P34，拉低 P33：</p>\n<ul>\n<li>判断 P32,P34 的电平，P32 低则 SW7 按下，P34 低则 SW8 按下。</li>\n</ul>\n<p>5. 第四步拉高 P32、P33，拉低 P34：</p>\n<ul>\n<li>判断 P32,P33 的电平，P32 低则 SW9 按下，P33 低则 SW10 按下。</li>\n</ul>\n<p>6. 循环往复：如此循环往复，便通过 3 个 GPIO 检索了 9 个按键，极大节省了 GPIO 的开销。</p>\n<p>也就是说：咱们主动拉低一个引脚，然后去检索另外两个。如果按键按下了，会有一个引脚受影响的。</p>\n<p>是不是嘎嘎神奇。</p>\n<h2 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>这里我们思考一下：3 个 IO-&gt;3 位 -&gt; 1 1 1 -&gt; 有几种可能呢？</p>\n<p>000 001 010 011 100 101 110 111</p>\n<p>再总结一下之前的：假设 000 这三位（按顺序 P32,P33,P34)</p>\n<p>那么：</p>\n<p>第一步：拉高 P32、P33、P34【初始：111】</p>\n<ul>\n<li>检测按键</li>\n<li>011 就是 P32 低，则 SW2 按下。</li>\n<li>101 就是 P33 低，则 SW3 按下。</li>\n<li>110 就是 P34 低，则 SW4 按下。</li>\n</ul>\n<p>第二步：拉高 P33、P34，拉低 P32【初始：011】</p>\n<ul>\n<li>检测按键</li>\n<li>001 就是 P33 低，则 SW5 按下。</li>\n<li>010 就是 P34 低，则 SW6 按下。</li>\n</ul>\n<p>第三步：拉高 P32、P34，拉低 P33【初始：101】</p>\n<ul>\n<li>检测按键</li>\n<li>001 就是 P32 低，则 SW7 按下。</li>\n<li>100 就是 P34 低，则 SW8 按下。</li>\n</ul>\n<p>第四步：拉高 P32、P33，拉低 P34【初始：110】</p>\n<ul>\n<li>检测按键</li>\n<li>010 就是 P32 低，则 SW9 按下。</li>\n<li>100 就是 P33 低，则 SW10 按下。</li>\n</ul>\n<p>这样就发现规律了吧。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>授人以鱼不如授人以渔</p>\n<p>我也在思考这件事。所以第一位发明这个的美国大佬是怎么想到的呢？</p>\n<p>三个按键：111</p>\n<ul>\n<li>首先就有 3 种可能了 011 101 001</li>\n<li>如果主动锁定其中 1 个按键，【初始 011】 那么又可以有两种可能 010 001</li>\n<li>再锁定 1 个呢？【初始 101】两种可能 001 100</li>\n<li>再来【初始 110】两种可能 010 100</li>\n<li>再来。。。来个锤子🔨没了</li>\n</ul>\n<p>五个按键：11111</p>\n<ul>\n<li>首先五种可能 01111 10111 11011 11101 11110</li>\n<li>略略略。。。自己体会吧【懒🎃】</li>\n</ul>\n<p>那么电路图咋想出来的呢？</p>\n<p>只有鬼知道了。。。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "STM32",
                "STM32"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b5716d03.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b5716d03.html",
            "title": "用python实现批量get和post请求",
            "date_published": "2023-08-23T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>上文我们实现了 post 请求</p>\n<p>那么接下来，我们来看 get 和 post 的一起运用</p>\n<h2 id=\"导包\"><a class=\"anchor\" href=\"#导包\">#</a> 导包</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># http 请求库，用于 get 和 post 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># json 的库，用来发送和解析 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 别发送太快，用来延时</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 正则表达式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr></tbody></table></figure><h2 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 准备数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NULL<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 提取出来创建任务的开始时间和分钟</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hour <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Authorization 和 Cookie 经常变动，所以提出来</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Authorization <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6ImQ3YTQ3MjgxLTBhODAtNDkxNC1iNTAxLTA2MzI4YzMwMTdkZCJ9.LCkOJtuaRCbRnzmE5k0G0Ju-VWsYblsIfQY282iy531z7bk23oJ029FgoaEONs-ajWL1uPxnFt6ZzcWX9Ufg-w'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Cookie <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token string\">'Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6ImQ3YTQ3MjgxLTBhODAtNDkxNC1iNTAxLTA2MzI4YzMwMTdkZCJ9.LCkOJtuaRCbRnzmE5k0G0Ju-VWsYblsIfQY282iy531z7bk23oJ029FgoaEONs-ajWL1uPxnFt6ZzcWX9Ufg-w; sidebarStatus=0'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 设置请求头</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>addheader <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"application/json, text/plain, */*\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"Accept-Encoding\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"gzip, deflate\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"zh-CN,zh;q=0.9,en;q=0.8\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span>Cookie<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"139.196.207.98\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">\"Origin\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"http://139.196.207.98\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>adddata<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>ControllerManageID <span class=\"token operator\">=</span> <span class=\"token number\">217</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 链接 get 请求获取的链接</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://139.196.207.98/prod-api/tms/task/group/list?pageNum=1&amp;pageSize=50&amp;manageId=\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ControllerManageID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># post 请求的链接</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#             http://139.196.207.98/prod-api/tms/task/group/sendTaskGroupCmdAdd/1693542006269685761</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>addtaskurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://139.196.207.98/prod-api/tms/task/group/sendTaskGroupCmdAdd/'</span></pre></td></tr></tbody></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 先获取任务列表信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gettaskid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 发送 GET 请求，获取任务列表信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data <span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>adddata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>addheader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 打印响应结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 转为 json 数据进行解析</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    json_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 判断状态 200 为成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> json_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败啦\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">global</span> idlist</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    idlist <span class=\"token operator\">=</span> json_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"rows\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> idl <span class=\"token keyword\">in</span> idlist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>idl<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 发送 post 请求</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bandtask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> idl <span class=\"token keyword\">in</span> idlist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>addtaskurl<span class=\"token operator\">+</span>idl<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>addtaskurl<span class=\"token operator\">+</span>idl<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>adddata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>addheader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h2 id=\"执行\"><a class=\"anchor\" href=\"#执行\">#</a> 执行</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任意键开始...\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> gettaskid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        bandtask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n是否继续？N/n退出,任意键继续\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr></tbody></table></figure><h2 id=\"全部代码\"><a class=\"anchor\" href=\"#全部代码\">#</a> 全部代码</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">###########################---1---###################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># http 请求库，用于 get 和 post 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># json 的库，用来发送和解析 json 数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 别发送太快，用来延时</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 正则表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">###########################---2---###################################</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 准备数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>NULL<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 提取出来创建任务的开始时间和分钟</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>hour <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># Authorization 和 Cookie 经常变动，所以提出来</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Authorization <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6ImQ3YTQ3MjgxLTBhODAtNDkxNC1iNTAxLTA2MzI4YzMwMTdkZCJ9.LCkOJtuaRCbRnzmE5k0G0Ju-VWsYblsIfQY282iy531z7bk23oJ029FgoaEONs-ajWL1uPxnFt6ZzcWX9Ufg-w'</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Cookie <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">'Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6ImQ3YTQ3MjgxLTBhODAtNDkxNC1iNTAxLTA2MzI4YzMwMTdkZCJ9.LCkOJtuaRCbRnzmE5k0G0Ju-VWsYblsIfQY282iy531z7bk23oJ029FgoaEONs-ajWL1uPxnFt6ZzcWX9Ufg-w; sidebarStatus=0'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 设置请求头</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>addheader <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"application/json, text/plain, */*\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token string\">\"Accept-Encoding\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"gzip, deflate\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"zh-CN,zh;q=0.9,en;q=0.8\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span>Cookie<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"139.196.207.98\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">\"Origin\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"http://139.196.207.98\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>adddata<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>ControllerManageID <span class=\"token operator\">=</span> <span class=\"token number\">217</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># 链接 get 请求获取的链接</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://139.196.207.98/prod-api/tms/task/group/list?pageNum=1&amp;pageSize=50&amp;manageId=\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ControllerManageID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># post 请求的链接</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#             http://139.196.207.98/prod-api/tms/task/group/sendTaskGroupCmdAdd/1693542006269685761</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>addtaskurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://139.196.207.98/prod-api/tms/task/group/sendTaskGroupCmdAdd/'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">###########################---3---###################################</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># 先获取任务列表信息</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gettaskid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\"># 发送 GET 请求，获取任务列表信息</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data <span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>adddata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>addheader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\"># 打印响应结果</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\"># 转为 json 数据进行解析</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    json_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\"># 判断状态 200 为成功</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> json_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失败啦\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">global</span> idlist</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    idlist <span class=\"token operator\">=</span> json_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"rows\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">for</span> idl <span class=\"token keyword\">in</span> idlist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>idl<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\"># 发送 post 请求</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bandtask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">for</span> idl <span class=\"token keyword\">in</span> idlist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>addtaskurl<span class=\"token operator\">+</span>idl<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>addtaskurl<span class=\"token operator\">+</span>idl<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>adddata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>addheader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">###########################---4---###################################</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任意键开始...\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">if</span> gettaskid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        bandtask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n是否继续？N/n退出,任意键继续\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "python",
                "python"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b189bf4.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b189bf4.html",
            "title": "用python实现批量post请求",
            "date_published": "2023-08-21T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>需求：</p>\n<p>最近项目到了一定阶段了，需要搞测试。</p>\n<p>要求添加一定数量的设备，和定时任务。大概能有百十来个。</p>\n<p>那么看了大概的流程，基本上就是往服务器提交 post 请求就可以实现。</p>\n<p>那么我们开始吧。</p>\n<h2 id=\"包含库\"><a class=\"anchor\" href=\"#包含库\">#</a> 包含库</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># http 请求库，用于 get 和 post 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># json 的库，用来发送和解析 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 别发送太快，用来延时</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr></tbody></table></figure><h2 id=\"准备数据\"><a class=\"anchor\" href=\"#准备数据\">#</a> 准备数据</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 准备数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Authorization 和 Cookie 经常变动，所以提出来</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Authorization <span class=\"token operator\">=</span> <span class=\"token string\">'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Cookie <span class=\"token operator\">=</span> <span class=\"token string\">'Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A; sidebarStatus=0'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 很离谱 NULL 竟然提示我未定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>NULL<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 定义一个时和分，先随便初始化一哈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hour <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 获取你想要的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getinputrule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">global</span> start_h</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">global</span> inv_m</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    start_h <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入起始的时间，时\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    inv_m <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入间隔的时间，分钟\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># post 请求的链接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://139.196.207.98/prod-api/tms/task/group\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># post 请求需要的 json 格式的数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"manageId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"217\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">\"taskType\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cycle\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">\"taskCycle\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,3,2,4,5,6,7\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token string\">\"roomGkPath\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8,21,22,23,24|8,21,22,23,25|8,21,22,23,26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token string\">\"createBy\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token string\">\"updateBy\"</span><span class=\"token punctuation\">:</span> NULL</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 设置请求头 Authorization 是登录认证，Cookie 是辨别你身份的这两个每次登录都是会变的</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json, text/plain, */*'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">'Accept-Encoding'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'gzip, deflate'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">'Accept-Language'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'zh-CN,zh;q=0.9,en;q=0.8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">'Connection'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'keep-alive'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json;charset=UTF-8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span>Cookie<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string\">'Host'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'http://139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把数字转为时间并前补 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">timeformcheck</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    time_str <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>time_str<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> time_str <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token operator\">+</span>time_str</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> time_str</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 打印拼接的串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printtimelist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 发送 post 请求</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sendpost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始发送：\"</span><span class=\"token operator\">+</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\"># 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\"># 打印响应结果</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h2 id=\"发送\"><a class=\"anchor\" href=\"#发送\">#</a> 发送</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开始吧</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 第一步，获取输入的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        getinputrule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> start_h<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-24\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> inv_m<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-60\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 第二步，打印出组合的队列</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        printtimelist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续？输入N退出。其他任意键继续！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 第三步，发送</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        sendpost<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\"># 第四步，是否继续</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n发送完毕!是否继续？N/n退出,任意键继续\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></tbody></table></figure><h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">###########################---1---###################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># http 请求库，用于 get 和 post 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># json 的库，用来发送和解析 json 数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 别发送太快，用来延时</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">###########################---2---###################################</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 准备数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Authorization 和 Cookie 经常变动，所以提出来</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Authorization <span class=\"token operator\">=</span> <span class=\"token string\">'Bearer eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Cookie <span class=\"token operator\">=</span> <span class=\"token string\">'Admin-Token=eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjU1ZTRlODRlLTM4YmItNGIzZC04OWM2LTAzZjUxOTkzYWFmOCJ9.afDD6YhU8j7imQHqyy9mEukaZkFGkDrvTgBf0_hNh-VOP4W-Zf8TQLJ-3VWpYvUViMGex29DhYAbfQ4zU5ua6A; sidebarStatus=0'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 很离谱 NULL 竟然提示我未定义</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>NULL<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 定义一个时和分，先随便初始化一哈</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>hour <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 获取你想要的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getinputrule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">global</span> start_h</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">global</span> inv_m</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    start_h <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入起始的时间，时\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    inv_m <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入间隔的时间，分钟\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># post 请求的链接</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://139.196.207.98/prod-api/tms/task/group\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># post 请求需要的 json 格式的数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">\"manageId\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"217\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token string\">\"taskType\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cycle\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token string\">\"taskCycle\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,3,2,4,5,6,7\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string\">\"roomGkPath\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8,21,22,23,24|8,21,22,23,25|8,21,22,23,26\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token string\">\"createBy\"</span><span class=\"token punctuation\">:</span> NULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string\">\"updateBy\"</span><span class=\"token punctuation\">:</span> NULL</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 设置请求头 Authorization 是登录认证，Cookie 是辨别你身份的这两个每次登录都是会变的</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json, text/plain, */*'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token string\">'Accept-Encoding'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'gzip, deflate'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token string\">'Accept-Language'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'zh-CN,zh;q=0.9,en;q=0.8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token string\">'Connection'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'keep-alive'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json;charset=UTF-8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token string\">'Cookie'</span><span class=\"token punctuation\">:</span>Cookie<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token string\">'Host'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'http://139.196.207.98'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">##########################---3---#####################################</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># 把数字转为时间并前补 0</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">timeformcheck</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    time_str <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>time_str<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> time_str <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token operator\">+</span>time_str</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> time_str</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># 打印拼接的串</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printtimelist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\"># 发送 post 请求</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sendpost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\"># 从开始时间到 24 小时</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\"># 从 0 分钟开始 每隔你输入的时间间隔自增</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>timeformcheck<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>timeformcheck<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":00\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> m <span class=\"token operator\">&gt;</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始发送：\"</span><span class=\"token operator\">+</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\"># 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\"># 打印响应结果</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">##########################---4---#####################################</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\"># 开始吧</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\"># 第一步，获取输入的开始时间和时间间隔</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        getinputrule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> start_h<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_h<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-24\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">if</span> inv_m<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inv_m<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的数据是错误的！请输入0-60\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\"># 第二步，打印出组合的队列</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        printtimelist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否继续？输入N退出。其他任意键继续！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\"># 第三步，发送</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        sendpost<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        step<span class=\"token operator\">+=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\"># 第四步，是否继续</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">if</span> step <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        cmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n发送完毕!是否继续？N/n退出,任意键继续\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"N\"</span> <span class=\"token keyword\">or</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            step<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "python",
                "python"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3c0c5a78.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3c0c5a78.html",
            "title": "即将开启的沪漂生涯",
            "date_published": "2023-08-20T16:00:00.000Z",
            "content_html": "<html><head></head><body><p><strong>兄弟们！</strong></p>\n<p>最近不是换工作了吗，要去上海租房子了。有要合租的嘛？</p>\n<p>本人首次租房，唯恐被骗，于是乎便做了这期租房攻略，希望对要去上海张江附近租房的朋友有所帮助。</p>\n<p>大概分了这几块攻略</p>\n<ul>\n<li>市场</li>\n<li>需求</li>\n<li>预算</li>\n<li>房源</li>\n<li>看房</li>\n<li>合同</li>\n</ul>\n<p>开始吧</p>\n<h2 id=\"一-市场主要参考某如\"><a class=\"anchor\" href=\"#一-市场主要参考某如\">#</a> 一、市场【主要参考某如】</h2>\n<p>大家自行找中介了解房价，某如是线上签约，感觉比中介要贵，但好歹真实。那某如的价格作为自己找房的底线。</p>\n<p>如果中介的房源还不如某如，那为什么要在中介那定呢？</p>\n<p>我的新工作是在张江高科附近。看图</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820180013222.png\" alt=\"image-20230820180013222\"></p>\n<p>图中有 6 块区域供选择：</p>\n<h3 id=\"区域1龙沟新苑2160-3160\"><a class=\"anchor\" href=\"#区域1龙沟新苑2160-3160\">#</a> 区域 1【龙沟新苑：2160-3160】</h3>\n<p>通勤：骑行 11 分钟、公交 46 分钟、步行 38 分钟。</p>\n<p>芳芯苑、芳佳苑、申波苑、龙沟新苑、聚龙家园这些。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820180151335.png\" alt=\"image-20230820180151335\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820180718209.png\" alt=\"image-20230820180718209\"></p>\n<p>某如上 2660 可以租到一个 17 平的。中介可能便宜。大家自行判断。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820181058161.png\" alt=\"image-20230820181058161\"></p>\n<h3 id=\"区域2汤臣豪园2677-3990\"><a class=\"anchor\" href=\"#区域2汤臣豪园2677-3990\">#</a> 区域 2【汤臣豪园：2677-3990】</h3>\n<p>通勤：骑行 5 分钟、步行 20 分钟</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820181752277.png\" alt=\"image-20230820181752277\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820181851585.png\" alt=\"image-20230820181851585\"></p>\n<p>在这住这属实有些豪横了。2600 一个 8 平小屋。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820182307296.png\" alt=\"image-20230820182307296\"></p>\n<h3 id=\"区域3古铜1960-2590\"><a class=\"anchor\" href=\"#区域3古铜1960-2590\">#</a> 区域 3【古铜：1960-2590】</h3>\n<p>通勤：骑行 12 分钟、公交 32 分钟、步行 42 分钟</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820184013826.png\" alt=\"image-20230820184013826\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820184121289.png\" alt=\"image-20230820184121289\"></p>\n<p>这个价格大概就是附近的均价了。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191258286.png\" alt=\"image-20230820191258286\"></p>\n<h3 id=\"区域4玉兰1960-2760\"><a class=\"anchor\" href=\"#区域4玉兰1960-2760\">#</a> 区域 4【玉兰：1960-2760】</h3>\n<p>通勤：骑行 17 分钟、公交 54 分钟、步行 65 分钟。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820190909453.png\" alt=\"image-20230820190909453\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191418561.png\" alt=\"image-20230820191418561\"></p>\n<p>​\t<img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191501375.png\" alt=\"image-20230820191501375\"></p>\n<h3 id=\"区域5川杨1930-3360\"><a class=\"anchor\" href=\"#区域5川杨1930-3360\">#</a> 区域 5【川杨：1930-3360】</h3>\n<p>通勤：骑行 19 分钟、公交 47 分钟、步行 70 分钟。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191836729.png\" alt=\"image-20230820191836729\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191608547.png\" alt=\"image-20230820191608547\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191916751.png\" alt=\"image-20230820191916751\"></p>\n<h3 id=\"区域6申城1890-2990\"><a class=\"anchor\" href=\"#区域6申城1890-2990\">#</a> 区域 6【申城：1890-2990】</h3>\n<p>通勤：骑行 26 分钟、公交 68 分钟、步行 86 分钟。</p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820191957406.png\" alt=\"image-20230820191957406\"></p>\n<p><img data-src=\"../../../img.assets/%E4%B8%8A%E6%B5%B7%E5%BC%A0%E6%B1%9F%E7%A7%9F%E6%88%BF%E6%94%BB%E7%95%A5.assets/image-20230820192136911.png\" alt=\"image-20230820192136911\"></p>\n<p>好啦，这就是大概的几个区域了。</p>\n<p>价格上就汤臣豪园比其他的贵一些。</p>\n<h2 id=\"二-需求\"><a class=\"anchor\" href=\"#二-需求\">#</a> 二、需求</h2>\n<p>那么看了大概的价格区间，我内心也有了一定的需求了。</p>\n<p>我的需求是：独厨独卫。厨：喜欢自己做饭。卫：方便。骑行：想买个自行车或者小电车 20-30 分钟的通勤即可。</p>\n<p>如果近的，贵 300 以内可以接受。</p>\n<h2 id=\"三-预算\"><a class=\"anchor\" href=\"#三-预算\">#</a> 三、预算</h2>\n<p>我的预算是 2000-3000。这点的话根据大家的薪资情况，我是税前 12 试用期打 8 折。</p>\n<p>不过最近瞅了瞅民房，1400 和 1600 的价格还是很心动的。就是稍微远一点，买小电车 30 分钟通勤。</p>\n<h2 id=\"四-房源\"><a class=\"anchor\" href=\"#四-房源\">#</a> 四、房源</h2>\n<h3 id=\"1-自如链家-贝壳-自如是一家\"><a class=\"anchor\" href=\"#1-自如链家-贝壳-自如是一家\">#</a> 1、自如【链家、贝壳、自如是一家】</h3>\n<h3 id=\"2-中介\"><a class=\"anchor\" href=\"#2-中介\">#</a> 2、中介</h3>\n<p>按照我希望的看房顺序</p>\n<h4 id=\"1汤臣豪园2500左右这个如果真的2500那我就要这个了\"><a class=\"anchor\" href=\"#1汤臣豪园2500左右这个如果真的2500那我就要这个了\">#</a> 【1】汤臣豪园【2500 左右】这个如果真的 2500 那我就要这个了。</h4>\n<p>主卧、无物业费、电 1、押一付一、燃气做饭、独立卫生间。</p>\n<p>联系人：微信上都改了备注的</p>\n<p>通勤：步行 5 分钟。真香</p>\n<p>本来是有视频的，但是由于这 github page 的 blog 实在是不敢恭维。</p>\n<h4 id=\"2玉兰二期2500这个真的大\"><a class=\"anchor\" href=\"#2玉兰二期2500这个真的大\">#</a> 【2】玉兰二期【2500】这个真的大</h4>\n<p>北一室一厅、电 1、水月 30、网包、35% 中介费。</p>\n<p>通勤：要买小电车了。电车 20 分钟。</p>\n<h4 id=\"3民房唐家宅孙桥环东16001400\"><a class=\"anchor\" href=\"#3民房唐家宅孙桥环东16001400\">#</a> 【3】民房唐家宅 / 孙桥环东【1600/1400】</h4>\n<p>如果上面的两个都不行，那就没必要租贵的了。直接上民房，便宜。</p>\n<p>唐家宅：二楼一室户，看着一般，卧室和厨房之间有层玻璃门。</p>\n<p>孙桥环东：开放厨房、大小和上面差不多。</p>\n<h4 id=\"4自如2200左右实在不行就直接自如吧省心\"><a class=\"anchor\" href=\"#4自如2200左右实在不行就直接自如吧省心\">#</a> 【4】自如【2200 左右】实在不行就直接自如吧，省心</h4>\n<h2 id=\"五-看房\"><a class=\"anchor\" href=\"#五-看房\">#</a> 五、看房</h2>\n<h3 id=\"中介\"><a class=\"anchor\" href=\"#中介\">#</a> 中介</h3>\n<p>1、酬劳：半个月房租<br>\n 2、与中介交流时要将预算压低<br>\n 3、对租房的要求：地段、户型、厨房<br>\n 4、至少沟通三家中介，对比价格房型</p>\n<h3 id=\"线下看房\"><a class=\"anchor\" href=\"#线下看房\">#</a> 线下看房</h3>\n<p>1、室内采光（10：00-16：00）<br>\n2、通风情况<br>\n 3、隔音效果（咨询其他住户）<br>\n4、户外噪音（车流、学校、商户、装修）<br>\n5、周边快递站、购物场所<br>\n 6、马桶水压<br>\n 7、水电表位置（缴费方式：个人交，还是房东收租时一起交）<br>\n8、房内拉网装宽带的方式<br>\n 9、是否有物业费（确定租住了解物业联系方式）<br>\n10、水槽漏水情况、深浅<br>\n 11、冰箱制冷<br>\n 12、空调制冷<br>\n 13、油烟机<br>\n 14、床板床架是否损坏<br>\n 15、灯泡是否正常亮<br>\n 16、洗衣机是否正常使用<br>\n 17、上述情况需提前询问是否换新或者维修，归责于出租人房东</p>\n<h2 id=\"六-合同\"><a class=\"anchor\" href=\"#六-合同\">#</a> 六、合同</h2>\n<p>1、合同注明入住时间，从入住之时开始核算租金<br>\n 2、注明家具明细，损坏赔偿，维修责任<br>\n 3、退还押金约定时间，并注明是否会扣除家具损耗费清洁费等<br>\n 4、合同期限，半年或者一年，提前收房违约金多少<br>\n 5、水电费初始刻度写明在合同上，并标明水电单位收费价格<br>\n 6、签订合同时，需房东出具房产证和身份证复印件</p>\n<p>1、入住前，需全屋拍照留取相关证据，后期若有损坏追责避免纠纷<br>\n 2、有需要维修的家具家电需维修好才入住交付租金；后期若有相关维修物品，若房东不予解决，沟通完毕后自行维修保留票据，扣除下月房租内<br>\n 3、民法典 731 条，出租人对租赁物有维修义务</p>\n</body></html>",
            "tags": [
                "小世界✨",
                "租房",
                "随想"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7870ba02.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7870ba02.html",
            "title": "QT读取bin文件",
            "date_published": "2023-08-17T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>QT 读取 bin 文件</p>\n<p>书接上回，bootloader 升级都做了，自然要用 QT 实现一下啦</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"Bootloader开发流程\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDcxMjg5MDM=\" data-background-image=\"https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDcxMjg5MDM=\">Bootloader开发流程</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/647128903</p>\n          </div></div></div><p></p>\n<h2 id=\"选择文件\"><a class=\"anchor\" href=\"#选择文件\">#</a> 选择文件</h2>\n<p>拿到路径</p>\n<pre><code class=\"language-c++\">QString updatafilepath;\n\nvoid MainWindow::on_pushButton_updata_seletbin_clicked()\n{\n    QString filename = QFileDialog::getOpenFileName(\n           this,\n           tr(\"请选择升级包的Bin文件\"),\n           QDir::currentPath(),\n           \"Bin files (*.bin);;All files(*.*)\");\n    updatafilepath=getFileInfo(filename);\n}\n\n\n</code></pre>\n<h2 id=\"获取信息\"><a class=\"anchor\" href=\"#获取信息\">#</a> 获取信息</h2>\n<p>获得文件基本信息</p>\n<pre><code class=\"language-c++\">QString MainWindow::getFileInfo(const QString fileFullName)\n{\n    QStringList slFileInfo;\n    if(!fileFullName.isEmpty())\n    {\n        QFileInfo fileInfo(fileFullName);\n\n        slFileInfo&lt;&lt; tr(\"File Path: \") + fileInfo.absolutePath();\n        slFileInfo&lt;&lt; tr(\"File Full Name: \") + fileInfo.fileName();\n        ui-&gt;textBrowser-&gt;append(\"File Path: \"+fileInfo.absolutePath()+\"/\"+fileInfo.fileName()+\"\\n\");\n        //---------------拿到文件的路径-----------------------------------\n        updatafilepath=fileInfo.absolutePath()+\"/\"+fileInfo.fileName();\n        ui-&gt;lineEdit_updata-&gt;setText(updatafilepath);\n        //---------------拿到文件的路径-----------------------------------\n        slFileInfo&lt;&lt; tr(\"File Base Name: \") + fileInfo.baseName();\n        slFileInfo&lt;&lt; tr(\"File Type: \") + fileInfo.suffix();\n        qint64 size = fileInfo.size();\n        size = size / 1024;\n        slFileInfo&lt;&lt; tr(\"File Size: \") + QString::number(size) + \"KB\";\n        ui-&gt;textBrowser-&gt;append(\"File Size: \"+QString::number(size) + \"KB\"+\"\\n\");\n        QDateTime timeInfo = fileInfo.created();\n        slFileInfo&lt;&lt; tr(\"Create Time: \") + timeInfo.toString(\"yyyy-MM-dd hh:mm:ss\");\n        slFileInfo&lt;&lt;   tr(\"Modifed Time: \") + fileInfo.lastModified().toString(\"yyyy-MM-dd hh:mm:ss\");\n        slFileInfo&lt;&lt;  tr(\"Latest Read: \") + fileInfo.lastRead().toString(\"yyyy-MM-dd hh:mm:ss\");\n\n        QString strInfo = slFileInfo.join('\\n');\n        QMessageBox::information(this,tr(\"File Info\"),strInfo);\n    }\n\t//读取文件\n    OnReadBin(updatafilepath);\n    return updatafilepath;\n}\n</code></pre>\n<h2 id=\"读取数据\"><a class=\"anchor\" href=\"#读取数据\">#</a> 读取数据</h2>\n<pre><code class=\"language-c++\">QFile updatafile;\nlong lastLen,fileLen,sendCnt;\nvolatile uint8_t myupdatafilepBuf[64*1024];\n\nconst int PACKET_SIZE = 768;//每次发送的字节数\n\nvoid MainWindow::OnReadBin(QString filepathstr)\n{\n    if(filepathstr==\"\"){\n        QMessageBox::information(this, tr(\"提示消息\"), tr(\"请先选择正确的Bin文件！\"), QMessageBox::Ok);\n        return;\n    }\n    QString filePath(filepathstr);\n    updatafile.setFileName(filePath);\n    QFileInfo fileInfo(filePath);\n    //数据信息计算\n    fileLen = fileInfo.size();//待发送文件大小\n    sendCnt = (int)ceil(fileLen / (PACKET_SIZE * 1.0));//发送次数\n    lastLen = fileLen % PACKET_SIZE;//最后一次发送的大小\n    if (0 == lastLen) {//恰巧是PACKET_SIZE的整数倍\n        lastLen = PACKET_SIZE;\n    }\n    qDebug() &lt;&lt; \"fileLen,lastLen,sendCnt:\" &lt;&lt; fileLen &lt;&lt; lastLen &lt;&lt; sendCnt;\n\n\t//----------------------------读取---------------------------------\n    if (updatafile.open(QIODevice::ReadOnly)){\n        QDataStream dataStream(&amp;updatafile);\n        dataStream.readRawData((char *)myupdatafilepBuf, fileLen);\n    }\n    updatafile.close();\n}\n</code></pre>\n<p>读出来之后就靠大家的发挥啦，我的业务场景是：读出来后拆包，每 768 字节是一包，分包发送给下位机。下位机接收完成后进行升级。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3e5d1178.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/3e5d1178.html",
            "title": "用C语言实现键值对-键->函数",
            "date_published": "2023-08-15T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>高级语言中有键值对的概念，那么 c 语言也可以有！！</p>\n<p></p><div class=\"links\"><div class=\"item\" title=\"QT键值对的妙用\" style=\"--block-color:#21d4fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDMxODEwMDQ=\" data-background-image=\"https://pic1.zhimg.com/70/v2-f12af2365f885012a67c1df821123667_1440w.avis?source=172ae18b&amp;biz_tag=Post\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NDMxODEwMDQ=\">QT键值对的妙用</span>\n          <p class=\"desc\">https://zhuanlan.zhihu.com/p/643181004</p>\n          </div></div></div><p></p>\n<p>初衷是想要实现这样的代码框架，优化代码的思路。</p>\n<p>【理念】：所有的功能模块都封装进一个结构体 FlechazokeyValue</p>\n<h2 id=\"食用步骤\"><a class=\"anchor\" href=\"#食用步骤\">#</a> 食用步骤：</h2>\n<p>1、vfkeyvalueInit ()；// 初始化</p>\n<p>2、FlechazokeyValue.addkv ();// 添加键值对</p>\n<p>3、FlechazokeyValue.getvalue ();// 可以创建一个函数指针，指向这个函数，然后执行</p>\n<p>核心就是一个数据对应着一个函数。</p>\n<p>获取 key 对应函数：【getvalue 本身是个函数指针，他的返回值也是一个函数指针】</p>\n<p>void *(*getvalue)(const F_KEY_TYPE *key,const uint32_t keylen);</p>\n<p>那么上代码吧</p>\n<h2 id=\"fkeyvalueh\"><a class=\"anchor\" href=\"#fkeyvalueh\">#</a> fkeyvalue.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__FKEYVALUE_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__FKEYVALUE_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdio.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdlib.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdbool.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"gd32f30x.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义键值对 --&gt;&gt; 键的类型 ---&gt;&gt;&gt; 键的长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">F_KEY_TYPE</span> <span class=\"token expression\"><span class=\"token class-name\">uint8_t</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLECHAZO_KEY_LEN</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 目前值为函数指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 定义键值对 --&gt;&gt; 值的类型 ---&gt;&gt;&gt; 值的长度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// #define F_VALUE_TYPE (void *)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// #define FLECHAZO_VALUE_LEN 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLECHAZO_KEYVALUE_GROUP</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 键值对数据结构体</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 键值对</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//1、键 是一个 uint8_t 类型的数组，元素 key keylen </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//2、值 为一个函数指针 指向你的函数，元素 函数名 value 参数 info</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span>keyValueData_S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 键值对操作结构体</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//1、增</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>addkv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//2、删</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>delkv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//3、改</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>changekv_k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>skey<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>tkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>changekv_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//4、获取 根据键 key 获取其对应的值 value</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>getvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">}</span>keyValueControl_S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    keyValueData_S <span class=\"token operator\">*</span>kvdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    keyValueControl_S kvctr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">}</span>FlechazokeyValue_S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vfkeyvalueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueAddkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueDelkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_k</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>skey<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>tkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_v</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">pvfkeyvalueGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetFreeAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>bool <span class=\"token function\">bflechazoCheckItemInArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> value<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//__FKEYVALUE_H</span></span></pre></td></tr></tbody></table></figure><h2 id=\"fkeyvaluec\"><a class=\"anchor\" href=\"#fkeyvaluec\">#</a> fkeyvalue.c</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fkeyvalue.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"string.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 所有的键值对存放在这，通过指针去查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>keyValueData_S kvdata<span class=\"token punctuation\">[</span>FLECHAZO_KEYVALUE_GROUP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 理念：所有的功能都封装为一个结构体</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FlechazokeyValue_S FlechazokeyValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vfkeyvalueTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThis is flechazo keyvalue test.%d\\n\"</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//1、初始化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">vfkeyvalueInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token operator\">=</span>kvdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 初始化函数指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>addkv <span class=\"token operator\">=</span> bfkeyvalueAddkv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>delkv <span class=\"token operator\">=</span> bfkeyvalueDelkv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>changekv_k <span class=\"token operator\">=</span> bfkeyvalueChangekv_k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>changekv_v <span class=\"token operator\">=</span> bfkeyvalueChangekv_v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span>getvalue <span class=\"token operator\">=</span> pvfkeyvalueGetValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">uint8_t</span> k <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvctr<span class=\"token punctuation\">.</span><span class=\"token function\">addkv</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">,</span>FLECHAZO_KEY_LEN<span class=\"token punctuation\">,</span>vfkeyvalueTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//1、增</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//bool (*addkv)(const uint8_t *key,const uint32_t keylen,void *func);</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueAddkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 获取空闲地址</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetFreeAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//num!=0    group=0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token comment\">// 说明存储控件满了</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 保存键</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 保存值</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 计数 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//2、删</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//bool (*delkv)(const uint8_t *key,const uint32_t keylen);</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueDelkv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 根据键获取组号</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 清除 key</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 计数 - 1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//3、改</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//bool (*changekv_k)(const uint8_t *skey,const uint32_t keylen,const uint8_t *tkey);</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_k</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>skey<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>tkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 找到 key</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>skey<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>tkey<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">//bool (*changekv_v)(const uint8_t *key,const uint32_t keylen,void *func);</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">bfkeyvalueChangekv_v</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 找到 key</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tFlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">//4、获取 根据键 key 获取其对应的值 value</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">//void *(*getvalue)(uint8_t *key,uint32_t keylen);</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">pvfkeyvalueGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 如果当前没有键值对</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FlechazokeyValue<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 找到 key</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> group <span class=\"token operator\">=</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>group<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">// 根据 key 获取存储数组中的组号</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetKeyGroup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> F_KEY_TYPE <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>FLECHAZO_KEYVALUE_GROUP<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>keylen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">// 获取新增键值对地址 [返回值为第 x 组键值对]</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token function\">uifkeyvalueGetFreeAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>g<span class=\"token operator\">&lt;</span>FLECHAZO_KEYVALUE_GROUP<span class=\"token punctuation\">;</span>g<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">bflechazoCheckItemInArr</span><span class=\"token punctuation\">(</span>FlechazokeyValue<span class=\"token punctuation\">.</span>kvdata<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>FLECHAZO_KEY_LEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 检查数组中的每个元素的值</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>bool <span class=\"token function\">bflechazoCheckItemInArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> value<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>l<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></body></html>",
            "tags": [
                "技术教程🎃",
                "STM32",
                "STM32"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e52cfcec.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e52cfcec.html",
            "title": "QT读写word文档",
            "date_published": "2023-08-13T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>需求：有朋友找我说要改代码，而且量很大，但是只有一部分数字要改动。</p>\n<p>提取需求：固定文本，规律递增，保持格式</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810093103531.png\" alt=\"image-20230810093103531\"></p>\n<p>像这样，只有这 3 个 0 是一次递增的，需要写 80 多遍。于是便问我有没有什么好方法。</p>\n<p>开玩笑，我堂堂一个码农。</p>\n<p>刚好最近在学 QT，那就随便用一下吧。</p>\n<p>1、添加 QT += axcontainer</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810094017001.png\" alt=\"image-20230810094017001\"></p>\n<p>2、整几个控件</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095452666.png\" alt=\"image-20230810095452666\"></p>\n<p>3、代码</p>\n<pre><code class=\"language-c++\">//点击写入按钮触发\nvoid MainWindow::on_pushButton_word_write_clicked()\n{\n    QAxObject *myword;//Word应用程序指针\n    QAxObject *mydocs;//文档集指针\n    QAxObject *document;//文档指针\n    QAxObject *paragraph;//文本段指针\n\n    //创建 Word 进程\n    myword = new QAxObject(\"Word.Application\");\n    myword-&gt;dynamicCall(\"SetVisible(bool Visible)\", \"false\");//隐藏不显示文档窗体\n    myword-&gt;setProperty(\"DisplayAlerts\", false); //屏蔽文档的警告消息\n\n    //获取文档集\n    mydocs = myword-&gt;querySubObject(\"Documents\");\n    mydocs-&gt;dynamicCall(\"Add(void)\");//添加一个文档\n    document= myword-&gt;querySubObject(\"ActiveDocument\");//指向当前活动文档\n    paragraph = myword-&gt;querySubObject (\"Selection\");//指向当前选中文本\n    //拿到开始的数值\n    int startnumber = ui-&gt;lineEdit_word_startnumber-&gt;text().toInt();\n    //拿到写多长\n    int writenumber = ui-&gt;lineEdit_word_writelen-&gt;text().toInt();\n\n    //拼凑字符串\n    QString writewoldstr=\"\";\n    QString writewoldstrt1=\"\\n&lt;DOI desc=\\\"\";\n    QString writewoldstrt2=\"号密度表温度\\\" name=\\\"Temp\";\n    QString writewoldstrt3=\"\\\"&gt;\\n\\t&lt;DAI name=\\\"dU\\\"&gt;\\n\\t\\t&lt;Val&gt;\";\n    QString writewoldstrt4=\"号密度表温度&lt;/Val&gt;\\n\\t&lt;/DAI&gt;\\n&lt;/DOI&gt;\";\n    for(int c=0;c&lt;writenumber;c++){\n        QString n = QString::number(startnumber+c);\n        writewoldstr.append(writewoldstrt1);\n        writewoldstr.append(n);\n        writewoldstr.append(writewoldstrt2);\n        writewoldstr.append(n);\n        writewoldstr.append(writewoldstrt3);\n        writewoldstr.append(n);\n        writewoldstr.append(writewoldstrt4);\n    }\n    //写入从界面文本框获取的文本\n    paragraph-&gt;dynamicCall(\"TypeText(const QString&amp;)\", writewoldstr);\n    //保存文档\n    document-&gt;dynamicCall(\"SaveAs(const QString&amp;)\",\"D:\\\\Qt5.doc\");\n    //关闭\n    delete paragraph;\n    paragraph= nullptr;\n    document-&gt;dynamicCall(\"Close()\");\n    myword-&gt;dynamicCall(\"Quit()\");\n    QMessageBox::information(this, tr(\"完毕\") , tr(\"Word 文档己保存\")) ;\n}\n</code></pre>\n<p>4、效果</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095623866.png\" alt=\"image-20230810095623866\"></p>\n<p>代码中保存文档路径中找到文档</p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095717214.png\" alt=\"image-20230810095717214\"></p>\n<p><img data-src=\"../../../img.assets/23-8-14QT%E8%AF%BB%E5%86%99word%E6%96%87%E6%A1%A3.assets/image-20230810095659859.png\" alt=\"image-20230810095659859\"></p>\n<p>好啦，完事</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a4f9153.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a4f9153.html",
            "title": "QT数据库的基本使用",
            "date_published": "2023-08-12T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>用 QT 实现数据库的增删改查</p>\n<p>QT 随便整几个控件 + 4 个按钮</p>\n<p><img data-src=\"../../../img.assets/23-8-13QT%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets/image-20230810085904644.png\" alt=\"image-20230810085904644\"></p>\n<p>可以用 navicat 打开看一下</p>\n<p><img data-src=\"../../../img.assets/23-8-13QT%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets/image-20230810092510251.png\" alt=\"image-20230810092510251\"></p>\n<p>数据库初始化</p>\n<pre><code class=\"language-c++\">//初始化\nbool bmysqlInit(){\n    //1、打印驱动列表\n    qDebug()&lt;&lt;QSqlDatabase::drivers();\n    //2、检测已连接的方式 - 默认连接名\n    if(QSqlDatabase::contains(\"qt_sql_default_connection\")){\n        mydb = QSqlDatabase::database(\"qt_sql_default_connection\");\n    }\n    else{\n        mydb = QSqlDatabase::addDatabase(\"QSQLITE\");\n    }\n    //3、设置数据库路径，不存在则创建\n    mydb.setDatabaseName(\"flechazo.db\");\n    //4、测试打开\n    if(mydb.open()){\n        qDebug()&lt;&lt;\"open success\";\n        bmysqlcreattable();\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;mydb.lastError();\n        return false;\n    }\n    return true;\n}\n\nbool bmysqlcreattable(){\n    //sql语句不熟悉的推荐《sql必知必会》，轻松入门\n    //如果不存在则创建my_table表\n    //id自增,name唯一\n    const QString sql=R\"(\n                      CREATE TABLE IF NOT EXISTS  my_table (\n                      id   INTEGER   PRIMARY KEY AUTOINCREMENT NOT NULL,\n                      name CHAR (50) UNIQUE NOT NULL,\n                      age  INTEGER\n                      );)\";\n    //QSqlQuery构造前，需要mydb已打开并连接\n    //未指定mydb或者mydb无效时使用默认连接进行操作\n    QSqlQuery query;\n\n    if(query.exec(sql)){\n        qDebug()&lt;&lt;\"init table success\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n</code></pre>\n<p>增删改查</p>\n<pre><code class=\"language-c++\">//插入数据\nbool bmysqlinsert(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(INSERT INTO my_table(name,age) VALUES(?,?);)\");\n    query.addBindValue(name);\n    query.addBindValue(age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//删除数据\nbool bmysqldelete(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.prepare(R\"(DELETE FROM my_table WHERE name=?;)\");\n    query.addBindValue(name);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//更新数据\nbool vmysqlupdate(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(UPDATE my_table SET age=:age WHERE name=:name;)\");\n    query.bindValue(\":name\",name);//通过自定义的别名来替代\n    query.bindValue(\":age\",age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//查询数据\nint imysqlsearch(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.exec(QString(R\"(SELECT age FROM my_table WHERE name='%1';)\")\n               .arg(name));\n\n    //获取查询结果的第0个值，\n    //如果结果是多行数据，可用while(query.next()){}遍历每一行\n    int ageValue=-1;\n    if(query.next()){\n        ageValue=query.value(0).toInt();\n    }\n    qDebug()&lt;&lt;ageValue;\n    return ageValue;\n}\n</code></pre>\n<p>完整的代码，具体的项目很乱没有整理</p>\n<pre><code class=\"language-c++\">#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include &lt;QSqlDatabase&gt;\n#include &lt;QDebug&gt;\n#include &lt;QSqlError&gt;\n#include &lt;QSqlQuery&gt;\n#include &lt;QSqlRecord&gt;\n#include &lt;QMessageBox&gt;\n\nstatic QSqlDatabase mydb;\n\nbool bmysqlcreattable();\n\n//初始化\nbool bmysqlInit(){\n    //1、打印驱动列表\n    qDebug()&lt;&lt;QSqlDatabase::drivers();\n    //2、检测已连接的方式 - 默认连接名\n    if(QSqlDatabase::contains(\"qt_sql_default_connection\")){\n        mydb = QSqlDatabase::database(\"qt_sql_default_connection\");\n    }\n    else{\n        mydb = QSqlDatabase::addDatabase(\"QSQLITE\");\n    }\n    //3、设置数据库路径，不存在则创建\n    mydb.setDatabaseName(\"flechazo.db\");\n    //4、测试打开\n    if(mydb.open()){\n        qDebug()&lt;&lt;\"open success\";\n        bmysqlcreattable();\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;mydb.lastError();\n        return false;\n    }\n    return true;\n}\n\n\nbool bmysqlcreattable(){\n    //sql语句不熟悉的推荐《sql必知必会》，轻松入门\n    //如果不存在则创建my_table表\n    //id自增,name唯一\n    const QString sql=R\"(\n                      CREATE TABLE IF NOT EXISTS  my_table (\n                      id   INTEGER   PRIMARY KEY AUTOINCREMENT NOT NULL,\n                      name CHAR (50) UNIQUE NOT NULL,\n                      age  INTEGER\n                      );)\";\n    //QSqlQuery构造前，需要mydb已打开并连接\n    //未指定mydb或者mydb无效时使用默认连接进行操作\n    QSqlQuery query;\n\n    if(query.exec(sql)){\n        qDebug()&lt;&lt;\"init table success\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n\n\n//插入数据\nbool bmysqlinsert(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(INSERT INTO my_table(name,age) VALUES(?,?);)\");\n    query.addBindValue(name);\n    query.addBindValue(age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//删除数据\nbool bmysqldelete(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.prepare(R\"(DELETE FROM my_table WHERE name=?;)\");\n    query.addBindValue(name);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//更新数据\nbool vmysqlupdate(const QString &amp;name, int age)\n{\n    QSqlQuery query;\n    //绑定值，待定变量默认问号，可自定义\n    query.prepare(R\"(UPDATE my_table SET age=:age WHERE name=:name;)\");\n    query.bindValue(\":name\",name);//通过自定义的别名来替代\n    query.bindValue(\":age\",age);\n    if(query.exec()){\n        qDebug()&lt;&lt;\"insert successful!\";\n    }else{\n        //打印sql语句错误信息\n        qDebug()&lt;&lt;\"init table error\"&lt;&lt;query.lastError();\n        return false;\n    }\n    return true;\n}\n\n//查询数据\nint imysqlsearch(const QString &amp;name)\n{\n    QSqlQuery query;\n    query.exec(QString(R\"(SELECT age FROM my_table WHERE name='%1';)\")\n               .arg(name));\n\n    //获取查询结果的第0个值，\n    //如果结果是多行数据，可用while(query.next()){}遍历每一行\n    int ageValue=-1;\n    if(query.next()){\n        ageValue=query.value(0).toInt();\n    }\n    qDebug()&lt;&lt;ageValue;\n    return ageValue;\n}\n\nvoid MainWindow::on_pushButton_mysql_open_clicked()\n{\n\n    //检测已连接的方式 - 自定义连接名\n    if(QSqlDatabase::contains(\"flechazo_mysql\"))\n        mydb = QSqlDatabase::database(\"flechazo_mysql\");\n    else\n        mydb = QSqlDatabase::addDatabase(\"QSQLITE\",\"flechazo_mysql\");\n    //设置数据库路径，不存在则创建\n    mydb.setDatabaseName(\"flechazo.db\");\n    //SQLite不需要用户名和密码\n    //mydb.setUserName(\"flechazo\");\n    //mydb.setPassword(\"unique\");\n\n    //打开数据库\n    if(mydb.open()){\n        qDebug()&lt;&lt;\"open success\";\n    }\n}\n\nvoid MainWindow::on_pushButton_mysql_close_clicked()\n{\n    //关闭数据库\n    mydb.close();\n}\n\nvoid MainWindow::on_pushButton_add_clicked()\n{\n    QString name = ui-&gt;lineEdit_mysql_creat_excel_number-&gt;text();\n    int age = ui-&gt;lineEdit_mysql_creat_excel_time-&gt;text().toInt();\n    bmysqlinsert(name,age);\n    qDebug()&lt;&lt;\"insert successful!\";\n}\n\n\nvoid MainWindow::on_pushButton_read_clicked()\n{\n    //读出数据库\n    QString name=ui-&gt;lineEdit_mysql_creat_excel_number-&gt;text();\n    ui-&gt;lineEdit_mysql_creat_excel_time-&gt;setText(QString::number(imysqlsearch(name)));\n    qDebug()&lt;&lt;\"read successful!\";\n}\n\n</code></pre>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "QT",
                "QT"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e3153979.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e3153979.html",
            "title": "一文彻底理解原码反码和补码",
            "date_published": "2023-08-08T16:00:00.000Z",
            "content_html": "<html><head></head><body><p>一文彻底理解原码反码和补码</p>\n<p>记得大学学计算机时，被这三个玩意折腾了很久，本人又是个钢铁直男，理解不透就没法继续，老师又只说记住就行了。</p>\n<p>烦恼我许久，于是便整理了一下</p>\n<p>直接开始吧</p>\n<p>首先举个例子，通过这个例子来思考补码的意义</p>\n<h2 id=\"原码\"><a class=\"anchor\" href=\"#原码\">#</a> 原码</h2>\n<p>咱们来算一下 （+6）+（-6）= 0</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230803172545752.png\" alt=\"image-20230803172545752\"></p>\n<p>这个大家都可以理解</p>\n<p>因为这个符号位，所以有这样</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230804085418540.png\" alt=\"image-20230804085418540\"></p>\n<p>分成了两块</p>\n<ul>\n<li>0-127</li>\n<li>（-0）-（-127）</li>\n</ul>\n<p>这个时候（+6）+（-6）= （-12）</p>\n<p>即：</p>\n<p>0 000 0110</p>\n<ul>\n<li></li>\n</ul>\n<p>1 000 0110</p>\n<p>=</p>\n<p>1 000 1100（-12）显然错误</p>\n<h2 id=\"反码\"><a class=\"anchor\" href=\"#反码\">#</a> 反码</h2>\n<p>正数 = 原码      负数 = 除符号位，其余按位取反</p>\n<p>0 000 0110      =》      +6\t\t【6】</p>\n<p>1 111 1001       =》      -6\t\t【249】</p>\n<p>我们都知道（+6）+（-6）= 0，但是【6】+【249】=【255】</p>\n<p>而【255：<strong>1111 1111</strong> + <strong>1</strong> = 1 <strong>0000 0000</strong>】也算是等于零了，所以我们就是要想一个合理的办法凑出正确的答案</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230804091617821.png\" alt=\"image-20230804091617821\"></p>\n<p>那么为什么要取反呢</p>\n<p><img data-src=\"../../../img.assets/23-8-9%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.assets/image-20230804092353973.png\" alt=\"image-20230804092353973\"></p>\n<p>因为这个范围【0-127】【-0--127】</p>\n<p>出现了 - 0，而事实上没有这个 - 0，所以负数运算时需要偏移 1 位。</p>\n<p>正数 = 原码      负数 = 除符号位，其余按位取反。像这样的句子，本人是最烦背这个了😒</p>\n<h2 id=\"补码\"><a class=\"anchor\" href=\"#补码\">#</a> 补码：</h2>\n<p>正数 = 原码      负数 =+1</p>\n<p>有了上述的思考，那么这个补码就可以理解了吧！</p>\n<p>0 000 0110      =》      +6</p>\n<p>1 111 1010       =》      -6</p>\n<h2 id=\"意义\"><a class=\"anchor\" href=\"#意义\">#</a> 意义：</h2>\n<p>有了这一系列的操作，终于明白补码的意义了吧。</p>\n<p>就是为了解决计算机中的减法问题。</p>\n<p>巧妙地把【减法】换算成了【加法】</p>\n<p>那么为啥不直接用减法呢？</p>\n<p>因为一位加法器实现：是用异或门来实现相加，与门来进位。</p>\n<p>异或：^</p>\n<p>可以参考</p>\n<p>与：&amp;</p>\n<p>0&amp;0=0</p>\n<p>0&amp;1=0</p>\n<p>1&amp;0=0</p>\n<p>1&amp;1=1</p>\n<p>减法实现起来比加法器复杂不少，所以就只有加法就可以了。</p>\n</body></html>",
            "tags": [
                "技术教程🎃",
                "C语言",
                "C语言"
            ]
        },
        {
            "id": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html",
            "url": "https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html",
            "title": "",
            "date_published": "2023-08-07T14:09:07.150Z",
            "content_html": "<html><head></head><body></body></html>",
            "tags": []
        }
    ]
}
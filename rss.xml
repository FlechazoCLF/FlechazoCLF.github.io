<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>我在人间贩卖黄昏，只为收集世间温柔遇见你.</title>
        <subtitle>有幸来到人间的旅人</subtitle>
        <icon>https://flechazoclf.github.io/FlechazoCLF.github.io/images/favicon.ico</icon>
        <link>https://FlechazoCLF.github.io/FlechazoCLF.github.io</link>
        <author>
          <name>flechazo</name>
        </author>
        <description>我在人间贩卖星光</description>
        <language>zh-CN</language>
        <pubDate>Fri, 24 May 2024 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 24 May 2024 00:00:00 +0800</lastBuildDate>
        <category term="个人博客" />
        <category term="随想" />
        <category term="经验" />
        <category term="句子" />
        <category term="收藏" />
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7cac95ec.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（4）编译</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7cac95ec.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Fri, 24 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;小柴带你学autosar系列一-基础知识篇4编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇4编译&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（4）编译&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;编译真的很重要！了解一下机器是如何工作的吧。当然啦！通过学习这篇文章还可以学习制作库文件哦！隐藏你的源码，依然可以调用函数。这样代码发给别人就不怕源码暴漏哦！🍔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601175457674.png&#34; alt=&#34;image-20240601175457674&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;gcc编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gcc编译&#34;&gt;#&lt;/a&gt; GCC 编译&lt;/h1&gt;
&lt;p&gt;GCC 编译器是一个开源的编译器套件，用于编译多种编程语言，包括 C、C++、Objective-C、Fortran、Ada 等。它是一个功能强大且灵活的编译器，支持多种平台和架构。&lt;/p&gt;
&lt;h2 id=&#34;1-预处理阶段preprocessing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-预处理阶段preprocessing&#34;&gt;#&lt;/a&gt; 1. 预处理阶段（Preprocessing）&lt;/h2&gt;
&lt;p&gt;在预处理阶段，GCC 将源代码中的预处理指令（以  &lt;code&gt;#&lt;/code&gt;  开头的指令，如  &lt;code&gt;#include&lt;/code&gt; 、 &lt;code&gt;#define&lt;/code&gt; ）处理成纯 C 代码。预处理器会将头文件包含到源文件中，执行宏替换等操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：通常，预处理后的文件会以  &lt;code&gt;.i&lt;/code&gt;  扩展名保存，如  &lt;code&gt;source.i&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;2-编译阶段compilation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-编译阶段compilation&#34;&gt;#&lt;/a&gt; 2. 编译阶段（Compilation）&lt;/h2&gt;
&lt;p&gt;编译阶段将预处理后的源文件翻译成汇编语言。GCC 使用的是内置的 C 编译器（称为  &lt;code&gt;cc1&lt;/code&gt; ），它将 C 代码转换成目标机器的汇编代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：通常，编译后的文件会以  &lt;code&gt;.s&lt;/code&gt;  扩展名保存，如  &lt;code&gt;source.s&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;3-汇编阶段assembly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-汇编阶段assembly&#34;&gt;#&lt;/a&gt; 3. 汇编阶段（Assembly）&lt;/h2&gt;
&lt;p&gt;在汇编阶段，汇编器将汇编代码转换成机器码指令，生成目标文件。这些目标文件包含了二进制代码和相关的元数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：通常，汇编后的文件会以  &lt;code&gt;.o&lt;/code&gt;  扩展名保存，如  &lt;code&gt;source.o&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;4-链接阶段linking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-链接阶段linking&#34;&gt;#&lt;/a&gt; 4. 链接阶段（Linking）&lt;/h2&gt;
&lt;p&gt;链接阶段将所有的目标文件（包括程序的主文件和所有的库文件）链接在一起，生成最终的可执行文件。链接器（ld）负责解析符号引用、符号重定位等任务，将各个目标文件中的代码和数据段组合成一个可执行文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：最终生成的可执行文件通常没有扩展名，如  &lt;code&gt;a.out&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h2&gt;
&lt;p&gt;假设有一个 C 源文件  &lt;code&gt;hello.c&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, world!\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 GCC 编译该文件时，可以执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gcc &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;o hello hello&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个命令会依次执行预处理、编译、汇编和链接四个阶段，并生成最终的可执行文件  &lt;code&gt;hello&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hello.i&lt;/code&gt; ：预处理后的文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hello.s&lt;/code&gt; ：编译后的汇编文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hello.o&lt;/code&gt; ：汇编后的目标文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hello&lt;/code&gt; ：最终的可执行文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是 GCC 编译器的工作过程以及每个阶段生成的文件。&lt;/p&gt;
&lt;h1 id=&#34;ghs编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ghs编译&#34;&gt;#&lt;/a&gt; GHS 编译&lt;/h1&gt;
&lt;p&gt;RH850 是一种用于嵌入式系统的微控制器（MCU），通常用 Green Hills Software（GHS）编译工具进行编译和链接。GHS 工具链包含编译器、汇编器、链接器等，支持各种目标平台和架构。编译过程包括使用链接脚本，这是生成嵌入式系统二进制文件的关键步骤。下面是一个典型的 RH850 使用 GHS 编译器的编译过程，详细介绍了每个阶段及其生成的文件，特别是链接器脚本的作用。&lt;/p&gt;
&lt;h2 id=&#34;1-源代码准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-源代码准备&#34;&gt;#&lt;/a&gt; 1. 源代码准备&lt;/h2&gt;
&lt;p&gt;假设有一个简单的 C 源文件  &lt;code&gt;main.c&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, RH850!\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;2-预处理阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-预处理阶段&#34;&gt;#&lt;/a&gt; 2. 预处理阶段&lt;/h2&gt;
&lt;p&gt;预处理器将处理所有的预处理指令，例如  &lt;code&gt;#include&lt;/code&gt;  和  &lt;code&gt;#define&lt;/code&gt; ，生成一个预处理后的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ccrh850 &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;E main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;c &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;o main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.i&lt;/code&gt; ：预处理后的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-编译阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-编译阶段&#34;&gt;#&lt;/a&gt; 3. 编译阶段&lt;/h2&gt;
&lt;p&gt;编译器将预处理后的 C 代码转换为汇编代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ccrh850 &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;S main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;o main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.s&lt;/code&gt; ：汇编代码文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-汇编阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-汇编阶段&#34;&gt;#&lt;/a&gt; 4. 汇编阶段&lt;/h2&gt;
&lt;p&gt;汇编器将汇编代码转换为机器代码，生成目标文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;asrh850 main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;o main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.o&lt;/code&gt; ：目标文件（对象文件）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-链接阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-链接阶段&#34;&gt;#&lt;/a&gt; 5. 链接阶段&lt;/h2&gt;
&lt;p&gt;链接器将多个目标文件和库文件链接在一起，生成可执行文件。链接器脚本在这个阶段非常重要，用于指定代码和数据段在内存中的布局。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链接器脚本（linker script）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个典型的链接器脚本可能如下所示（ &lt;code&gt;linker.ld&lt;/code&gt; ）：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SECTIONS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bss &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bss&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个脚本指定了  &lt;code&gt;.text&lt;/code&gt;  段（代码段）、 &lt;code&gt;.data&lt;/code&gt;  段（数据段）和  &lt;code&gt;.bss&lt;/code&gt;  段（未初始化数据段）的布局。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;librh850 main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;o &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;T linker&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ld &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;o main&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;elf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;生成的文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.elf&lt;/code&gt; ：最终的可执行文件（ELF 格式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预处理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ccrh850 -E main.c -o main.i
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;生成预处理后的文件  &lt;code&gt;main.i&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ccrh850 -S main.i -o main.s
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;生成汇编代码文件  &lt;code&gt;main.s&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汇编：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asrh850 main.s -o main.o
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;生成目标文件  &lt;code&gt;main.o&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;librh850 main.o -T linker.ld -o main.elf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;生成最终的可执行文件  &lt;code&gt;main.elf&lt;/code&gt; ，使用链接器脚本  &lt;code&gt;linker.ld&lt;/code&gt;  指定内存布局。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个阶段都生成特定的中间文件和最终的可执行文件，链接器脚本在链接阶段至关重要，它定义了程序的内存布局，使得生成的二进制文件能够正确地运行在目标硬件上。&lt;/p&gt;
&lt;h1 id=&#34;静态库lib&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态库lib&#34;&gt;#&lt;/a&gt; 静态库.lib&lt;/h1&gt;
&lt;p&gt;通过静态库，开发者可以隐藏实现细节，仅暴露接口（头文件）。这增加了代码的安全性，并使得接口的更改不会影响到使用该库的代码，只要接口保持不变。&lt;/p&gt;
&lt;p&gt;真的太好玩啦！&lt;/p&gt;
&lt;h2 id=&#34;1制作静态库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1制作静态库&#34;&gt;#&lt;/a&gt; 1. 制作静态库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VS 创建一个新项目&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180016291.png&#34; alt=&#34;image-20240601180016291&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打印一些信息，并在头文件声明这个函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180221362.png&#34; alt=&#34;image-20240601180221362&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成 lib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180400338.png&#34; alt=&#34;image-20240601180400338&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到他啦&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180440718.png&#34; alt=&#34;image-20240601180440718&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2使用静态库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2使用静态库&#34;&gt;#&lt;/a&gt; 2. 使用静态库&lt;/h2&gt;
&lt;h3 id=&#34;1-创建或打开你的c项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-创建或打开你的c项目&#34;&gt;#&lt;/a&gt; 1. 创建或打开你的 C 项目&lt;/h3&gt;
&lt;p&gt;首先，确保你已经在 Visual Studio 中创建了一个 C 项目或打开了现有的 C 项目。&lt;/p&gt;
&lt;h3 id=&#34;2-将静态库文件添加到项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-将静态库文件添加到项目&#34;&gt;#&lt;/a&gt; 2. 将静态库文件添加到项目&lt;/h3&gt;
&lt;p&gt;假设你的静态库文件是  &lt;code&gt;StaticLib1.lib&lt;/code&gt; 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将  &lt;code&gt;StaticLib1.lib&lt;/code&gt;  文件拷贝到你的项目目录中，通常放在一个特定的文件夹中，比如  &lt;code&gt;libs&lt;/code&gt;  文件夹。我懒哈哈！随便放啦&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180639255.png&#34; alt=&#34;image-20240601180639255&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-添加库文件路径和库文件名到项目设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-添加库文件路径和库文件名到项目设置&#34;&gt;#&lt;/a&gt; 3. 添加库文件路径和库文件名到项目设置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;打开项目属性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在解决方案资源管理器中，右键点击你的项目名称，选择 “属性”（ &lt;code&gt;Properties&lt;/code&gt; ）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置包含目录&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在项目属性窗口中，导航到  &lt;code&gt;Configuration Properties -&amp;gt; C/C++ -&amp;gt; General&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;Additional Include Directories&lt;/code&gt;  字段中，添加你的头文件目录的路径。如果你的头文件在  &lt;code&gt;include&lt;/code&gt;  文件夹中，输入相对路径  &lt;code&gt;include&lt;/code&gt;  或者绝对路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置库目录&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在项目属性窗口中，导航到  &lt;code&gt;Configuration Properties -&amp;gt; Linker -&amp;gt; General&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;Additional Library Directories&lt;/code&gt;  字段中，添加你的静态库目录的路径。如果你的库文件在  &lt;code&gt;libs&lt;/code&gt;  文件夹中，输入相对路径  &lt;code&gt;libs&lt;/code&gt;  或者绝对路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加库文件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在项目属性窗口中，导航到  &lt;code&gt;Configuration Properties -&amp;gt; Linker -&amp;gt; Input&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;Additional Dependencies&lt;/code&gt;  字段中，添加你的库文件名称  &lt;code&gt;mylibrary.lib&lt;/code&gt; 。如果有多个库文件，用分号分隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后就可以调用静态库里的函数啦！同时又看不到函数的具体实现。是不是贼有意思呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-24%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%884%EF%BC%89%E7%BC%96%E8%AF%91.assets/image-20240601180929641.png&#34; alt=&#34;image-20240601180929641&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/5e71c9a6.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（3）C语言基础</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/5e71c9a6.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Fri, 17 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;小柴带你学autosar系列一-基础知识篇3c语言基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇3c语言基础&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（3）C 语言基础&lt;/h1&gt;
&lt;h1 id=&#34;c语言入门基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言入门基本语法&#34;&gt;#&lt;/a&gt; C 语言入门基本语法&lt;/h1&gt;
&lt;p&gt;C 语言是一种功能强大且高效的编程语言，被广泛应用于系统编程、嵌入式系统、游戏开发等领域。本文将介绍 C 语言的基本语法，并通过代码示例帮助你理解和掌握这些基础知识。&lt;/p&gt;
&lt;h2 id=&#34;1-程序结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-程序结构&#34;&gt;#&lt;/a&gt; 1. 程序结构&lt;/h2&gt;
&lt;p&gt;一个简单的 C 语言程序通常包含以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预处理指令&lt;/li&gt;
&lt;li&gt;主函数&lt;/li&gt;
&lt;li&gt;变量声明&lt;/li&gt;
&lt;li&gt;语句和表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是一个简单的 C 语言程序示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 预处理指令，包含标准输入输出库&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 主函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, World!\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 返回值，0 表示程序成功结束&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;2-变量和数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-变量和数据类型&#34;&gt;#&lt;/a&gt; 2. 变量和数据类型&lt;/h2&gt;
&lt;p&gt;C 语言支持多种数据类型，包括整型、浮点型、字符型等。常见的基本数据类型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; ：整型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt; ：单精度浮点型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt; ：双精度浮点型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt; ：字符型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;变量声明的示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 整型变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 浮点型变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 双精度浮点型变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 字符型变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.718&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3-常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-常量&#34;&gt;#&lt;/a&gt; 3. 常量&lt;/h2&gt;
&lt;p&gt;常量是值在程序运行期间不可更改的数据。可以使用 &lt;code&gt;const&lt;/code&gt;  关键字定义常量：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; MAX_SIZE &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 整型常量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; PI &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 浮点型常量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;4-运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-运算符&#34;&gt;#&lt;/a&gt; 4. 运算符&lt;/h2&gt;
&lt;p&gt;C 语言提供了多种运算符，包括算术运算符、关系运算符、逻辑运算符等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符： &lt;code&gt;+&lt;/code&gt; ,  &lt;code&gt;-&lt;/code&gt; ,  &lt;code&gt;*&lt;/code&gt; ,  &lt;code&gt;/&lt;/code&gt; ,  &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关系运算符： &lt;code&gt;==&lt;/code&gt; ,  &lt;code&gt;!=&lt;/code&gt; ,  &lt;code&gt;&amp;gt;&lt;/code&gt; ,  &lt;code&gt;&amp;lt;&lt;/code&gt; ,  &lt;code&gt;&amp;gt;=&lt;/code&gt; ,  &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;逻辑运算符： &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ,  &lt;code&gt;||&lt;/code&gt; ,  &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; sum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 算术运算&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; diff &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; prod &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; quotient &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; remainder &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; isEqual &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 关系运算&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; isGreater &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; andResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 逻辑运算&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; orResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; notResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;5-控制结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-控制结构&#34;&gt;#&lt;/a&gt; 5. 控制结构&lt;/h2&gt;
&lt;h3 id=&#34;条件语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件语句&#34;&gt;#&lt;/a&gt; 条件语句&lt;/h3&gt;
&lt;p&gt;条件语句用于根据条件的真伪执行不同的代码块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;  语句：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; number &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Number is positive\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Number is negative\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Number is zero\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt;  语句：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; grade &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;grade&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Excellent\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Good\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Fair\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Poor\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Invalid grade\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;循环语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环语句&#34;&gt;#&lt;/a&gt; 循环语句&lt;/h3&gt;
&lt;p&gt;循环语句用于重复执行某个代码块。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt;  循环：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;i = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;  循环：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;count = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    count&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do-while&lt;/code&gt;  循环：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;n = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    n&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;6-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-函数&#34;&gt;#&lt;/a&gt; 6. 函数&lt;/h2&gt;
&lt;p&gt;函数是组织代码的基本单元，用于实现特定功能。函数可以有参数和返回值。&lt;/p&gt;
&lt;p&gt;函数定义和调用示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 函数定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 函数调用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Result = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;7-数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-数组&#34;&gt;#&lt;/a&gt; 7. 数组&lt;/h2&gt;
&lt;p&gt;数组是存储同类型数据的集合，可以通过下标访问数组元素。&lt;/p&gt;
&lt;p&gt;数组声明和使用示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; numbers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 数组声明和初始化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;numbers[%d] = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; numbers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;8-指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-指针&#34;&gt;#&lt;/a&gt; 8. 指针&lt;/h2&gt;
&lt;p&gt;指针是存储变量地址的变量，可以通过指针访问和操作变量的值。&lt;/p&gt;
&lt;p&gt;指针示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 指针 p 指向 x 的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Value of x = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Address of x = %p\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Value at address p = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 通过指针访问 x 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;函数返回值类型 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 指针变量名&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;函数参数列表&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; 函数返回值类型 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 指针变量名&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;函数参数列表&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pFun&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myFun: %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pFun &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myFun&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 函数指针指向 myFun (); 调用：pFun ();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;9-结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-结构体&#34;&gt;#&lt;/a&gt; 9. 结构体&lt;/h2&gt;
&lt;p&gt;结构体是用户自定义的数据类型，用于存储不同类型的数据。&lt;/p&gt;
&lt;p&gt;结构体定义和使用示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; score&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt; student1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;student1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;student1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;John Doe&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 字符数组赋值需要使用 strcpy 函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;student1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;score &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;95.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ID: %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; student1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Name: %s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; student1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Score: %.2f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; student1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;score&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;10共用体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10共用体&#34;&gt;#&lt;/a&gt; 10. 共用体&lt;/h2&gt;
&lt;p&gt;共用体（Union）是 C 语言中一种特殊的数据类型，它允许在相同的内存位置存储不同的数据类型。与结构体不同的是，共用体的所有成员共享同一块内存空间，因此共用体的大小等于其最大成员的大小。&lt;/p&gt;
&lt;h3 id=&#34;共用体的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共用体的定义&#34;&gt;#&lt;/a&gt; 共用体的定义&lt;/h3&gt;
&lt;p&gt;共用体通过关键字 &lt;code&gt;union&lt;/code&gt;  来定义，其语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; UnionName &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    member1_type member1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    member2_type member2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 可以有多个成员&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;共用体的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共用体的使用&#34;&gt;#&lt;/a&gt; 共用体的使用&lt;/h3&gt;
&lt;p&gt;共用体的成员可以像结构体的成员一样被访问。但是，共用体的每次赋值都会覆盖之前的值，并且只能同时使用一个成员。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; Data &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;data.i = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;data.f = %.2f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出 3.14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;data.str = %s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出 Hello&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在上面的示例中，共用体 &lt;code&gt;Data&lt;/code&gt;  有三个成员： &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;f&lt;/code&gt;  和 &lt;code&gt;str&lt;/code&gt; ，它们分别是整型、浮点型和字符数组类型。因为共用体的所有成员共享同一块内存空间，所以对一个成员的赋值会影响其他成员的值。&lt;/p&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节省内存&lt;/strong&gt;：当某些数据共享同一块内存空间时，可以使用共用体来节省内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据类型转换&lt;/strong&gt;：在一些特定情况下，共用体可以用于进行不同类型之间的转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11宏定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11宏定义&#34;&gt;#&lt;/a&gt; 11. 宏定义&lt;/h2&gt;
&lt;h3 id=&#34;创建符号常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建符号常量&#34;&gt;#&lt;/a&gt; 创建符号常量&lt;/h3&gt;
&lt;p&gt;宏定义可以用来创建符号常量，这些常量在程序中可以被多次引用，提高了代码的可读性和维护性。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;3.14159&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;MAX_SIZE&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在上面的示例中， &lt;code&gt;PI&lt;/code&gt;  和 &lt;code&gt;MAX_SIZE&lt;/code&gt;  都被定义为符号常量，它们在程序中可以被多次使用而不用重复书写其值。&lt;/p&gt;
&lt;h3 id=&#34;创建代码片段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建代码片段&#34;&gt;#&lt;/a&gt; 创建代码片段&lt;/h3&gt;
&lt;p&gt;宏定义还可以用来创建代码片段，这些片段在程序中被多次调用。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name function&#34;&gt;SQUARE&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的宏定义创建了一个求平方的宏，可以通过传入参数 &lt;code&gt;x&lt;/code&gt;  来实现平方操作。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h3&gt;
&lt;p&gt;下面是一个使用宏定义的示例，演示了创建符号常量和代码片段的用法：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;3.14159&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name function&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;PI = %.2f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; PI&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; max_value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MAX&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Max value = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; max_value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在这个示例中， &lt;code&gt;PI&lt;/code&gt;  被定义为符号常量， &lt;code&gt;MAX&lt;/code&gt;  被定义为求最大值的宏。&lt;/p&gt;
&lt;h2 id=&#34;12枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12枚举&#34;&gt;#&lt;/a&gt; 12. 枚举&lt;/h2&gt;
&lt;p&gt;枚举是一种用户定义的数据类型，它允许为一组相关的常量赋予符号名称。这使得代码更易于阅读和维护。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Weekday&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Monday&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Tuesday&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Wednesday&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Thursday&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Friday&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Saturday&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Sunday&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在上面的示例中，我们定义了一个枚举类型 &lt;code&gt;Weekday&lt;/code&gt; ，其中包含了一周中的每一天。默认情况下，枚举常量的值从 0 开始，依次递增。&lt;/p&gt;
&lt;h2 id=&#34;13递归&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13递归&#34;&gt;#&lt;/a&gt; 13. 递归&lt;/h2&gt;
&lt;p&gt;递归是指函数调用自身的编程技术。它在解决问题时通常将问题分解为更小的、类似的子问题，直到达到基本情况。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;factorial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;factorial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;factorial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Factorial of 5 is %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在这个例子中， &lt;code&gt;factorial&lt;/code&gt;  函数通过递归调用自身来计算给定数字的阶乘。&lt;/p&gt;
&lt;h2 id=&#34;14内联函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14内联函数&#34;&gt;#&lt;/a&gt; 14. 内联函数&lt;/h2&gt;
&lt;p&gt;在 c/c++ 中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了 &lt;strong&gt;inline&lt;/strong&gt; 修饰符，表示为内联函数。&lt;/p&gt;
&lt;p&gt;栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。&lt;/p&gt;
&lt;p&gt;inline 仅是一个对编译器的建议&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;num_check&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;奇&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;偶&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%02d   %s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;num_check&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;上面的例子就是标准的内联函数的用法，使用 inline 修饰带来的好处我们表面看不出来，其实，在内部的工作就是在每个 for 循环的内部任何调用 dbtest (i) 的地方都换成了 (i%2&amp;gt;0)?&#34;奇&#34;:&#34;偶&#34;，这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;内联是以 ** 代码膨胀（复制）** 为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。&lt;/p&gt;
&lt;p&gt;如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。&lt;/p&gt;
&lt;h1 id=&#34;c语言关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言关键字&#34;&gt;#&lt;/a&gt; C 语言关键字&lt;/h1&gt;
&lt;p&gt;C 语言中的关键字可以根据其功能和用途进行分类。以下是对 C 语言关键字的分类：&lt;/p&gt;
&lt;h2 id=&#34;1-数据类型声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-数据类型声明&#34;&gt;#&lt;/a&gt; 1. 数据类型声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;char&lt;/strong&gt;：用于声明字符型变量或函数的返回类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;：用于声明整型变量或函数的返回类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;float&lt;/strong&gt;：用于声明单精度浮点型变量或函数的返回类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;double&lt;/strong&gt;：用于声明双精度浮点型变量或函数的返回类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;void&lt;/strong&gt;：用于指定函数无返回值或无参数，或者声明指向未知类型的指针。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;long&lt;/strong&gt;：用于声明长整型变量或函数的返回类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;short&lt;/strong&gt;：用于声明短整型变量或函数的返回类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;signed&lt;/strong&gt;：用于声明有符号整型变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unsigned&lt;/strong&gt;：用于声明无符号整型变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-变量声明和存储类别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-变量声明和存储类别&#34;&gt;#&lt;/a&gt; 2. 变量声明和存储类别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auto&lt;/strong&gt;：用于声明自动变量，其生命周期随着代码块的结束而结束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;static&lt;/strong&gt;：用于声明静态变量，其生命周期在整个程序执行期间保持不变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extern&lt;/strong&gt;：用于声明变量或函数是在其他文件中定义的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;register&lt;/strong&gt;：用于声明寄存器变量，提示编译器将变量存储在 CPU 寄存器中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const&lt;/strong&gt;：用于声明只读变量，其值在初始化后不能修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile&lt;/strong&gt;：用于告诉编译器变量的值可能会在外部被改变，从而防止编译器对该变量进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-流程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-流程控制&#34;&gt;#&lt;/a&gt; 3. 流程控制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;if&lt;/strong&gt;：用于创建条件语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;else&lt;/strong&gt;：用于在 if 语句中指定条件为假时要执行的代码块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;switch&lt;/strong&gt;：用于创建 switch 语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;case&lt;/strong&gt;：用于在 switch 语句中指定不同的情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;：在 switch 语句中用于指定默认情况。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;while&lt;/strong&gt;：用于创建 while 循环。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;do&lt;/strong&gt;：用于创建 do-while 循环。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;for&lt;/strong&gt;：用于创建 for 循环。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;break&lt;/strong&gt;：用于跳出循环或 switch 语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continue&lt;/strong&gt;：用于跳过循环中的当前迭代，继续下一次迭代。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goto&lt;/strong&gt;：用于无条件地转移到程序中的标记位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return&lt;/strong&gt;：用于从函数中返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-函数和返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-函数和返回值&#34;&gt;#&lt;/a&gt; 4. 函数和返回值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;void&lt;/strong&gt;：用于指定函数无返回值或无参数，或者声明指向未知类型的指针。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return&lt;/strong&gt;：用于从函数中返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-结构和组织代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-结构和组织代码&#34;&gt;#&lt;/a&gt; 5. 结构和组织代码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;struct&lt;/strong&gt;：用于定义结构体类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;union&lt;/strong&gt;：用于定义共用体类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typedef&lt;/strong&gt;：用于定义新的数据类型名称。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enum&lt;/strong&gt;：用于定义枚举类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-内存大小和类型检查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-内存大小和类型检查&#34;&gt;#&lt;/a&gt; 6. 内存大小和类型检查&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sizeof&lt;/strong&gt;：用于获取数据类型或变量的大小（字节数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-标记和标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-标记和标签&#34;&gt;#&lt;/a&gt; 7. 标记和标签&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;goto&lt;/strong&gt;：用于无条件地转移到程序中的标记位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;label_name:&lt;/strong&gt;：标签名称，通常与 &lt;code&gt;goto&lt;/code&gt;  语句配合使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-条件编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-条件编译&#34;&gt;#&lt;/a&gt; 8. 条件编译&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;#if&lt;/strong&gt;：条件预处理指令，根据条件编译指定的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#ifdef&lt;/strong&gt;：条件预处理指令，如果定义了指定的宏则编译后面的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#ifndef&lt;/strong&gt;：条件预处理指令，如果未定义指定的宏则编译后面的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#elif&lt;/strong&gt;：条件预处理指令，用于多个条件之间的选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#else&lt;/strong&gt;：条件预处理指令，用于条件不成立时执行的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#endif&lt;/strong&gt;：条件预处理指令，结束条件编译块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#define&lt;/strong&gt;：用于定义宏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#undef&lt;/strong&gt;：用于取消已定义的宏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#include&lt;/strong&gt;：用于包含其他文件的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些关键字和预处理指令在 C 语言中起着不同的作用，能够帮助程序员控制程序的流程、声明变量和类型、组织代码结构等。理解和熟悉这些关键字的用法是编写高效、可读性强的 C 代码的重要基础。&lt;/p&gt;
&lt;h1 id=&#34;c语言运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言运算符&#34;&gt;#&lt;/a&gt; C 语言运算符&lt;/h1&gt;
&lt;p&gt;C 语言中的运算符是用来执行各种数学和逻辑运算的特殊符号。它们可以用于操作各种类型的数据，包括整数、浮点数、字符等。以下是 C 语言中常用的运算符及其优先级：&lt;/p&gt;
&lt;h2 id=&#34;1-算术运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-算术运算符&#34;&gt;#&lt;/a&gt; 1. 算术运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt;：加法运算&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt;：减法运算&lt;/li&gt;
&lt;li&gt;*****：乘法运算&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/&lt;/strong&gt;：除法运算&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%&lt;/strong&gt;：取模运算（求余数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-关系运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-关系运算符&#34;&gt;#&lt;/a&gt; 2. 关系运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;==&lt;/strong&gt;：等于&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!=&lt;/strong&gt;：不等于&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;：大于&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;：小于&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;=&lt;/strong&gt;：大于等于&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;=&lt;/strong&gt;：小于等于&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-逻辑运算符&#34;&gt;#&lt;/a&gt; 3. 逻辑运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;：逻辑与&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;||&lt;/strong&gt;：逻辑或&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!&lt;/strong&gt;：逻辑非&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-位运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-位运算符&#34;&gt;#&lt;/a&gt; 4. 位运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt;：按位与&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;|&lt;/strong&gt;：按位或&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt;：按位异或&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~&lt;/strong&gt;：按位取反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt;：左移位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;：右移位&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-赋值运算符&#34;&gt;#&lt;/a&gt; 5. 赋值运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;=&lt;/strong&gt;：赋值运算符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+=&lt;/strong&gt;：加法赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-=&lt;/strong&gt;：减法赋值&lt;/li&gt;
&lt;li&gt;*&lt;strong&gt;=&lt;/strong&gt;：乘法赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/=&lt;/strong&gt;：除法赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%=&lt;/strong&gt;：取模赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;=&lt;/strong&gt;：按位与赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;|=&lt;/strong&gt;：按位或赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;^=&lt;/strong&gt;：按位异或赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;&amp;lt;=&lt;/strong&gt;：左移位赋值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&amp;gt;=&lt;/strong&gt;：右移位赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-其他运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-其他运算符&#34;&gt;#&lt;/a&gt; 6. 其他运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sizeof()&lt;/strong&gt;：返回数据类型或变量的大小（字节数）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;?:&lt;/strong&gt;：条件运算符（三目运算符）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;,&lt;/strong&gt;：逗号运算符（用于分隔多个表达式，返回最后一个表达式的值）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-优先级&#34;&gt;#&lt;/a&gt; 7. 优先级&lt;/h2&gt;
&lt;p&gt;运算符的优先级确定了它们在表达式中的执行顺序。以下是常见运算符的优先级，按照从高到低的顺序排列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;()&lt;/strong&gt;：圆括号（最高优先级）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[], -&amp;gt;, .&lt;/strong&gt;：数组访问、结构体和共用体成员访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;++, --&lt;/strong&gt;：自增和自减&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+, -&lt;/strong&gt;：正负号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!, ~&lt;/strong&gt;：逻辑非和按位取反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sizeof&lt;/strong&gt;：大小运算符&lt;/li&gt;
&lt;li&gt;*&lt;strong&gt;, /, %&lt;/strong&gt;：乘法、除法和取模&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+, -&lt;/strong&gt;：加法和减法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;&amp;lt;, &amp;gt;&amp;gt;&lt;/strong&gt;：左移位和右移位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&lt;/strong&gt;：关系运算符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;==, !=&lt;/strong&gt;：等于和不等于&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt;：按位与&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt;：按位异或&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;|&lt;/strong&gt;：按位或&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;：逻辑与&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;||&lt;/strong&gt;：逻辑或&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;?:&lt;/strong&gt;：条件运算符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;=, +=, -=, *=, /=, %=, &amp;amp;=, |=, ^=, &amp;lt;&amp;lt;=, &amp;gt;&amp;gt;=&lt;/strong&gt;：赋值运算符（最低优先级）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;了解运算符的优先级和结合性是编写正确和高效的表达式的关键。0&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html</guid>
            <title></title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/0.html</link>
            <pubDate>Mon, 13 May 2024 22:21:32 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Sat, 04 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构&lt;/h2&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;缘起&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缘起&#34;&gt;#&lt;/a&gt; 缘起&lt;/h2&gt;
&lt;p&gt;首先要知道分层的意义：树状结构！（就像国、省、市、区这样分发快递的时候是不是很清晰呢😊）&lt;/p&gt;
&lt;p&gt;补充一点：Autosar 的代码全是状态驱动的。为了实现代码解耦。【详情后续会更新👻】&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;autosar分层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autosar分层&#34;&gt;#&lt;/a&gt; AutoSar 分层&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512105511125.png&#34; alt=&#34;image-20240512105511125&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层（Application Layer）：【具体功能的实现。例如：制动控制、车身控制、点火控制、刹车控制、天气等等】&lt;/li&gt;
&lt;li&gt;RTE（Runtime Environment）【管理和调度 SWC。做 SWC 与 BSW 之间的映射】&lt;/li&gt;
&lt;li&gt;BSW（Basic Software）基础软件层【枚举了所有可能用到的所有基本功能】&lt;/li&gt;
&lt;li&gt;微控制器（Microcontroller）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240504123109486.png&#34; alt=&#34;image-20240504123109486&#34;&gt;&lt;/p&gt;
&lt;p&gt;各个层级之间如何对接的呢🎮&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512105719292.png&#34; alt=&#34;image-20240512105719292&#34;&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;bsw分层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bsw分层&#34;&gt;#&lt;/a&gt; BSW 分层&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;服务层【服务层提供了基本的服务和功能，为应用层提供支持。这些服务包括诸如网络通信和管理服务、内存服务、诊断服务、ECU 状态管理、模式管理、时间管理、任务管理等】&lt;/li&gt;
&lt;li&gt;ECU 抽象层【提供了一些微控制器的驱动】&lt;/li&gt;
&lt;li&gt;微控制器抽象层【直接与硬件相关的层级，给上层提供标准化的接口来使上层脱离硬件的区别】&lt;/li&gt;
&lt;li&gt;复杂驱动层【未在 Autosar 定义内的内容以 CDD 的形式集成】&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240504123138493.png&#34; alt=&#34;image-20240504123138493&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体来看看吧🤔&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer(SWC)&lt;/li&gt;
&lt;li&gt;Runtime Environment(RTE)&lt;/li&gt;
&lt;li&gt;Basic Software(BSW)
&lt;ul&gt;
&lt;li&gt;Services Layer 服务层
&lt;ul&gt;
&lt;li&gt;System Services 系统服务&lt;/li&gt;
&lt;li&gt;Memory Services 内存服务&lt;/li&gt;
&lt;li&gt;Crypto Services 加密服务&lt;/li&gt;
&lt;li&gt;Off-board Communication Services 片外通信服务&lt;/li&gt;
&lt;li&gt;Communication Services 通信服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ECU Abstraction LayerECU 抽象层
&lt;ul&gt;
&lt;li&gt;Onboard Device Abstraction 片上设备抽象&lt;/li&gt;
&lt;li&gt;Memory Hardware Abstraction 内存硬件抽象&lt;/li&gt;
&lt;li&gt;Crypto Hardware Abstraction 加密硬件抽象&lt;/li&gt;
&lt;li&gt;Wireless Communication HW Abstraction 无线通信硬件抽象&lt;/li&gt;
&lt;li&gt;Communication HW Abstraction 通信硬件抽象&lt;/li&gt;
&lt;li&gt;I/O Hardware Abstraction I/O 硬件抽象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microcontroller Abstraction Layer 微控制器抽象层
&lt;ul&gt;
&lt;li&gt;Microcontroller Drivers 微控制器驱动&lt;/li&gt;
&lt;li&gt;Memory Drivers 内存驱动&lt;/li&gt;
&lt;li&gt;Crypto Drivers 加密驱动&lt;/li&gt;
&lt;li&gt;Wireless Communication Drivers 无线通信驱动&lt;/li&gt;
&lt;li&gt;Communication Drivers 通信驱动&lt;/li&gt;
&lt;li&gt;I/O Drivers I/O 驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex Drivers 复杂驱动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microcontroller&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240504123208031.png&#34; alt=&#34;image-20240504123208031&#34;&gt;&lt;/p&gt;
&lt;p&gt;坦白来讲呢就一句话层层分明，来细化各个模块。同时这也导致代码看起来极其不直观。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;rte的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rte的作用&#34;&gt;#&lt;/a&gt; RTE 的作用&lt;/h2&gt;
&lt;p&gt;RTE（Runtime Environment）是 AUTOSAR 架构中的一个关键组件，主要用于管理和调度汽车电子系统中的软件组件（SWC）。其主要功能包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通信管理&lt;/strong&gt;：RTE 负责管理和调度 SWC 之间的通信，包括数据传输、消息传递等，确保各个 SWC 之间能够正确地交换数据和信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度和时间管理&lt;/strong&gt;：RTE 根据预先定义的调度表，对各个 SWC 的任务进行调度和执行，确保各个任务按时完成，同时管理系统的时钟和时间，保证系统的时序性和实时性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源管理&lt;/strong&gt;：RTE 负责管理系统中的资源，包括 CPU、内存、IO 等，确保各个 SWC 之间能够共享和竞争资源，并通过资源分配算法进行优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误管理&lt;/strong&gt;：RTE 提供错误检测和处理机制，监控系统运行过程中的错误和异常情况，采取相应的措施进行处理，保证系统的稳定性和可靠性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，RTE 层在 AUTOSAR 架构中扮演着系统级别的角色，负责管理和调度汽车电子系统中的各个软件组件，确保它们能够协同工作，实现整车的功能，并且保证系统的性能、稳定性和安全性。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;分层结构举例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分层结构举例&#34;&gt;#&lt;/a&gt; 分层结构举例&lt;/h2&gt;
&lt;h3 id=&#34;can&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#can&#34;&gt;#&lt;/a&gt; CAN&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512095428803.png&#34; alt=&#34;image-20240512095428803&#34;&gt;&lt;/p&gt;
&lt;p&gt;CAN，即 Controller Area Network（控制器局域网），在车载软件上的作用可谓举足轻重。它不仅是一个通信协议，更是一个能够实现车辆内部各个控制单元之间高效、实时信息交互的桥梁。CAN 总线可以挂载多个 ECU 实现通信，一般可以接 10~100 个节点。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512094630291.png&#34; alt=&#34;image-20240512094630291&#34;&gt;&lt;/p&gt;
&lt;p&gt;每层都有其自身的定位。😎&lt;/p&gt;
&lt;h4 id=&#34;服务层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务层&#34;&gt;#&lt;/a&gt; 服务层&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;PDUR（Physical Data Unit Receiver）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：PDUR 负责接收来自 CAN 物理层的数据，并将其转换为服务层可以处理的格式。它处理数据的接收同步、解码以及错误检测等任务，确保数据的完整性和正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CANTP（CAN Transport Protocol）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：CANTP 是一个传输协议，它提供了在 CAN 网络上可靠传输数据帧的机制。它负责将数据分割成合适大小的数据块，并在接收端进行数据重组，以支持长数据的传输，同时提供流量控制和错误恢复功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CANSM（CAN State Manager）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：CANSM 负责管理 CAN 通信的状态和生命周期。它监控 CAN 网络的连接状态，处理网络故障和恢复，确保 CAN 通信的稳定性和可靠性。此外，它还可能提供网络管理功能，如节点的加入、离开和配置等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CANNM（CAN Network Management）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：CANNM 负责网络层面的管理和控制。它可能包括网络初始化、节点寻址、节点状态监控等功能，以确保 CAN 网络的整体性能和稳定性。此外，它还可能提供诊断和维护功能，帮助开发人员和维修人员快速定位和解决问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ecu抽象层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ecu抽象层&#34;&gt;#&lt;/a&gt; ECU 抽象层&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;CANIf（CAN Interface）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：CANIf 是 ECU 与 CAN 网络之间的接口层。它提供了 ECU 访问 CAN 网络的统一接口，隐藏了底层通信的复杂性。CANIf 负责数据的封装和解封装，将 ECU 发送的数据转换为 CAN 帧格式，并将接收到的 CAN 帧解析为 ECU 可以理解的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CANTrcv（CAN Receiver）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：CANTrcv 是 ECU 内部用于接收 CAN 数据的组件。它负责监听 CAN 网络上的数据，并将接收到的数据传递给相应的处理函数或模块。CANTrcv 可能还具备数据过滤功能，只接收特定类型或特定源地址的数据，以减少 ECU 的处理负担。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;微控制器抽象层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微控制器抽象层&#34;&gt;#&lt;/a&gt; 微控制器抽象层&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;CAN（Microcontroller Abstraction Layer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这里的 CAN 指的是微控制器抽象层的 CAN 模块或驱动。它负责在微控制器和 CAN 硬件之间建立通信桥梁，使得微控制器能够通过软件控制 CAN 硬件的操作。这个抽象层通常提供了一组 API（应用程序接口），允许上层软件以统一的方式访问和操作 CAN 硬件，而无需关心具体的硬件细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些 CAN 相关的组件和层在 CAN 通信系统中各自扮演着重要的角色，它们协同工作以确保数据的可靠传输和系统的稳定运行。&lt;/p&gt;
&lt;h3 id=&#34;lin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lin&#34;&gt;#&lt;/a&gt; LIN&lt;/h3&gt;
&lt;p&gt;分层都类似就不多说了，直接看图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512101904559.png&#34; alt=&#34;image-20240512101904559&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;flexray&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flexray&#34;&gt;#&lt;/a&gt; FlexRay&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512102454037.png&#34; alt=&#34;image-20240512102454037&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ethernet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ethernet&#34;&gt;#&lt;/a&gt; Ethernet&lt;/h3&gt;
&lt;p&gt;以太网不用过多解释了吧，生活中已经无处不在！🚀&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512102531226.png&#34; alt=&#34;image-20240512102531226&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里附上一个网络七层模型，相信大家就理解啦！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSI 网络七层模型&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层级&lt;/th&gt;
&lt;th&gt;层&lt;/th&gt;
&lt;th&gt;英文全称&lt;/th&gt;
&lt;th&gt;常用协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;Application Layer&lt;/td&gt;
&lt;td&gt;HTTP、FTP、SMTP、POP3、TELNET、NNTP、IMAP4、FINGER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;表示层&lt;/td&gt;
&lt;td&gt;Prosentation Layer&lt;/td&gt;
&lt;td&gt;LPP’、BNBSSP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;会话层&lt;/td&gt;
&lt;td&gt;Session Layer&lt;/td&gt;
&lt;td&gt;SSL、TLS、DAP、LDAP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;Transport Layer&lt;/td&gt;
&lt;td&gt;TCP、UDP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;Network Layer&lt;/td&gt;
&lt;td&gt;IP、ICMP、RIP、IGMP、OSPF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;数据链路层&lt;/td&gt;
&lt;td&gt;Data Link Layer&lt;/td&gt;
&lt;td&gt;以太网、网卡、交换机、PPTP、L2TP、ARP、ATMP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;Physical Layer&lt;/td&gt;
&lt;td&gt;物理线路、光纤、中继器、集线器、双绞线&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;多核架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多核架构&#34;&gt;#&lt;/a&gt; 多核架构&lt;/h2&gt;
&lt;h3 id=&#34;autosar多核架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autosar多核架构&#34;&gt;#&lt;/a&gt; Autosar 多核架构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512105228633.png&#34; alt=&#34;image-20240512105228633&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;rh850u2a多核架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rh850u2a多核架构&#34;&gt;#&lt;/a&gt; RH850U2A 多核架构&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110157172.png&#34; alt=&#34;image-20240512110157172&#34;&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;各模块之间的交互协作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各模块之间的交互协作&#34;&gt;#&lt;/a&gt; 各模块之间的交互协作&lt;/h2&gt;
&lt;h3 id=&#34;memory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memory&#34;&gt;#&lt;/a&gt; Memory&lt;/h3&gt;
&lt;p&gt;大家看图自己体会😜&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110445777.png&#34; alt=&#34;image-20240512110445777&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110520195.png&#34; alt=&#34;image-20240512110520195&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;communication&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#communication&#34;&gt;#&lt;/a&gt; Communication&lt;/h3&gt;
&lt;h4 id=&#34;整体看一下吧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整体看一下吧&#34;&gt;#&lt;/a&gt; 整体看一下吧😋&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512111542154.png&#34; alt=&#34;image-20240512111542154&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ethernet-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ethernet-2&#34;&gt;#&lt;/a&gt; Ethernet&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512111620314.png&#34; alt=&#34;image-20240512111620314&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110922137.png&#34; alt=&#34;image-20240512110922137&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;整个过程用到了以下组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整个过程用到了以下组件&#34;&gt;#&lt;/a&gt; 整个过程用到了以下组件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;PDU Router
&lt;ul&gt;
&lt;li&gt;提供不同抽象通信控制器和上层之间 PDU 的路由&lt;/li&gt;
&lt;li&gt;路由器的规模是特定于 ECU 的（如果例如只有一个通信控制器，则缩小到无规模）&lt;/li&gt;
&lt;li&gt;提供动态 TP 路由。在缓冲完整的 TP 数据之前开始传输 TP 数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COM
&lt;ul&gt;
&lt;li&gt;提供不同 I-PDU 之间单个信号或信号组的路由&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NM Coordinator
&lt;ul&gt;
&lt;li&gt;通过 NM 协调员处理的网络管理，同步连接到 ECU 的不同通信信道的网络状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Communication State Managers
&lt;ul&gt;
&lt;li&gt;通过接口启动和关闭通信系统的硬件单元&lt;/li&gt;
&lt;li&gt;控制 PDU 组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;can-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#can-2&#34;&gt;#&lt;/a&gt; CAN&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110716797.png&#34; alt=&#34;image-20240512110716797&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;还有一些层级命名的说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#还有一些层级命名的说明&#34;&gt;#&lt;/a&gt; 还有一些层级命名的说明&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512110800894.png&#34; alt=&#34;image-20240512110800894&#34;&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;autosar-cp集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autosar-cp集群&#34;&gt;#&lt;/a&gt; Autosar CP 集群&lt;/h2&gt;
&lt;p&gt;不多描述了看图，明白这个思想就好&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112131906.png&#34; alt=&#34;image-20240512112131906&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112155000.png&#34; alt=&#34;image-20240512112155000&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112304469.png&#34; alt=&#34;image-20240512112304469&#34;&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;autosar配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autosar配置&#34;&gt;#&lt;/a&gt; Autosar 配置&lt;/h2&gt;
&lt;p&gt;使用依赖注入的方式来配置【参考 https://zhuanlan.zhihu.com/p/681210703】🐷&lt;/p&gt;
&lt;p&gt;简单来说就是使用一个指针指向配置参数。上层只需要在使用时将指针指向自己的配置即可。具体看下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-04%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%882%EF%BC%89AutoSar%E6%9E%B6%E6%9E%84.assets/image-20240512112625716.png&#34; alt=&#34;image-20240512112625716&#34;&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;integration-and-runtime-aspects&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#integration-and-runtime-aspects&#34;&gt;#&lt;/a&gt; Integration and Runtime aspects&lt;/h2&gt;
&lt;p&gt;集成与运行这块大家想看也可以了解一下&lt;/p&gt;
&lt;p&gt;本文就不做介绍啦&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;结束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结束&#34;&gt;#&lt;/a&gt; 结束&lt;/h2&gt;
&lt;p&gt;经过上述的介绍，相信大家已经大概了解 Autosar 啦！&lt;/p&gt;
&lt;p&gt;接下来愉快的开始学习新的知识吧！&lt;/p&gt;
&lt;p&gt;感谢有你陪伴哦！😘&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Sat, 04 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构&lt;/h1&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Sat, 04 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构&lt;/h1&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（2）AutoSar架构</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/e8a5cc27.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Sat, 04 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇2autosar架构&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（2）AutoSar 架构&lt;/h1&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b20010d9.html</guid>
            <title>小柴带你学AutoSar系列一、基础知识篇（1）概念和目标</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/b20010d9.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Fri, 03 May 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【知乎】flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;【知乎】flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;【CSDN】小柴带你学AutoSar总目录&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5zaGFuZzUyMDEzL2FydGljbGUvZGV0YWlscy8xMzgxNDAyMzU/c3BtPTEwMDEuMjAxNC4zMDAxLjU1MDE=&#34;&gt;【CSDN】小柴带你学AutoSar总目录&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://blog.csdn.net/qianshang52013/article/details/138140235?spm=1001.2014.3001.5501&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Autosar 系列教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpBeE9ETTJOVFEwTnc9PSZhbXA7bWlkPTIyNDc0OTIzMjYmYW1wO2lkeD0xJmFtcDtzbj1kNDdhYWM4YTE4MWJkZjM0NGNmMzJhOThmNzAxMjkyNyZhbXA7Y2hrc209OWJkNWNmOGVhY2EyNDY5ODgyMzcxZTEyOTY5Yzc3NzdiMDY1NGRiMGE3MDVlNWE1ZDNkZGFmNjRjODk5ZjhmYzUyYmRhNTM4MzczMiZhbXA7cGF5cmVhZHRpY2tldD1IQjBaZE1Tc3RNVmVRVXF2RkdBb2E1U2Q3Mnk2bzJOb192OF9PLUhsaXRxMHBaOWcxVzFablBrbmwwQmJySGZZajcxeUtkZyNyZA==&#34;&gt;小柴带你学 AutoSar 总目录&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;小柴带你学autosar系列一-基础知识篇1概念和目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar系列一-基础知识篇1概念和目标&#34;&gt;#&lt;/a&gt; 小柴带你学 AutoSar 系列一、基础知识篇（1）概念和目标&lt;/h1&gt;
&lt;p&gt;AUTOSAR（Automotive Open System Architecture）是一种开放式的汽车电子系统架构，旨在实现汽车电子系统的标准化、模块化和可重用性。&lt;/p&gt;
&lt;p&gt;其主要目标包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标准化&lt;/strong&gt;：通过制定统一的标准和规范，实现汽车电子系统的软件和硬件之间的互操作性，降低系统集成和开发的复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块化&lt;/strong&gt;：将汽车电子系统划分为多个独立的模块，每个模块具有特定的功能和接口，可以独立设计、开发和测试，从而提高系统的灵活性和可维护性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重用性&lt;/strong&gt;：通过定义通用的软件组件和接口，实现汽车电子系统的功能模块化和可重用性，减少重复开发工作，提高开发效率和质量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：提供安全性标准和机制，确保汽车电子系统的稳定性、可靠性和安全性，以应对日益复杂的汽车电子系统和网络攻击等安全威胁。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，AUTOSAR 的概念和目标是为了推动汽车电子系统的标准化、模块化和可重用性，以满足现代汽车对于更高效、更安全和更智能的需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后通过配置工具来生成代码，实现想要的功能！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小柴大白话：代码只想写一次，剩下的全部通过配置来设置！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;autosar整体认知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autosar整体认知&#34;&gt;#&lt;/a&gt; Autosar 整体认知&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213254808.png&#34; alt=&#34;image-20240503213254808&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;aiapplication-interfaces&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aiapplication-interfaces&#34;&gt;#&lt;/a&gt; AI(Application Interfaces)&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213642771.png&#34; alt=&#34;image-20240503213642771&#34;&gt;&lt;/p&gt;
&lt;p&gt;重点是已建立的&lt;strong&gt;应用程序的接口规范&lt;/strong&gt;，以强调软件&lt;strong&gt;重用和交换&lt;/strong&gt;，这被认为是 AUTOSAR 的主要要求之一。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;标准化应用程序接口的部署是应用程序重用的一个关键因素。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用程序接口描述包含由所有合作伙伴的专家标准化的丰富数据。&lt;/p&gt;
&lt;p&gt;这些标准化接口允许软件设计者和实施者在独立于特定硬件和 / 或电子控制单元 (ECU) 扩展或重用软件组件的情况下使用它们。&lt;/p&gt;
&lt;p&gt;一般来说，应用程序是 ECU 的竞争优势。AUTOSAR 不会标准化应用程序的内部功能行为，例如算法，而是应用程序之间交换的内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;典型应用包括电子稳定控制 (ESC)、转向、电子驻车制动、驻车距离控制、车外灯、防盗系统、遥控无钥匙进入等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cpclassic-platform&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpclassic-platform&#34;&gt;#&lt;/a&gt; CP(Classic Platform)&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213443988.png&#34; alt=&#34;image-20240503213443988&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一个基本概念是虚拟功能总线 (VFB)。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种虚拟总线将应用程序从基础设施中分离出来。它通过专用端口进行通信，这意味着应用软件的通信接口必须映射到这些端口。VFB 处理单个 ECU 内部以及 ECU 之间的通信。从应用程序的角度来看，不需要底层技术或依赖关系的详细知识。这支持应用软件的独立于硬件的开发和使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AUTOSAR 分层架构提供了软件和硬件独立性所需的所有机制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它区分了运行在微控制器 (µC) 上的三个主要软件层：应用层、运行时环境 (RTE) 和基础软件 (BSW)。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同汽车领域的应用程序通过 RTE 与基本软件连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了定义架构和接口之外，AUTOSAR 还定义了一种方法，能够配置完整的 AUTOSAR 堆栈，并增强不同工具链之间的互操作能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一方面，这对于开发项目中的协作很重要，另一方面，这对于降低开发成本也很重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标准化 ECU 软件架构的主要概念是通过软件抽象层 RTE（运行时环境）将独立于硬件的应用软件和面向硬件的基础软件（BSW）分开。在 RTE 的上层，该抽象层支持开发特定于 OEM 且具有竞争力的软件应用程序。在 RTE 的低端，它支持基本软件的标准化和 OEM 独立性。AUTOSAR 软件架构的另一个特点是适用于多种车型的 ECU 软件的可扩展性、跨 ECU 分布应用程序（功能软件模块）的可能性以及集成不同来源软件模块的能力。&lt;/p&gt;
&lt;p&gt;**AUTOSAR 软件架构中的基本软件进一步分为以下几层：服务、ECU 抽象和微控制器抽象。** 通过 RTE 实现的应用层与基本软件的分离包括控制这些层之间的数据交换。这构成了应用程序级面向组件、独立于硬件的软件结构的基础，软件组件（SWC）是独立的单元。由于其硬件独立性，因此有可能在不了解所使用或计划的硬件的情况下开发软件控制系统，并在开发期间灵活地将现有软件控制系统重新定位到电子控制单元。&lt;/p&gt;
&lt;h3 id=&#34;methodology&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#methodology&#34;&gt;#&lt;/a&gt; Method­ol­ogy&lt;/h3&gt;
&lt;p&gt;除了软件架构之外，AUTOSAR 还为汽车软件开发引入了统一的方法。这主要是由改善参与当今汽车项目的不同方之间的协作的需求所驱动的。&lt;/p&gt;
&lt;p&gt;AUTOSAR 提供了指定将软件组件集成到 ECU 上以及将不同 ECU 集成到各种不同总线系统上的整个网络通信所需的所有方面的方法。该方法定义了活动对工作产品的依赖关系，预计将支持 AUTOSAR 中的活动、描述和工具使用。&lt;/p&gt;
&lt;p&gt;描述（.arxml）基于 AUTOSAR 模板，该模板定义了正式的交换格式（AUTOSAR 模式）和伴随交换格式的语义约束。这些描述用于保存在 AUTOSAR 方法中生成或使用的信息。各种生成器可以利用描述中的信息来支持 RTE 和 AUTOSAR 基本软件（包括操作系统）的配置和生成。&lt;/p&gt;
&lt;p&gt;也就是说：Autosar 可以通过&lt;strong&gt;配置来实现功能&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;apadaptive-platform&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apadaptive-platform&#34;&gt;#&lt;/a&gt; AP(Adaptive Platform)&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503213504790.png&#34; alt=&#34;image-20240503213504790&#34;&gt;&lt;/p&gt;
&lt;p&gt;AUTOSAR 扩展了现有的方法，能够为经典平台和自适应平台提供通用的方法。支持功能应用程序的分布式、独立和敏捷开发需要一种标准化的开发方法。&lt;/p&gt;
&lt;p&gt;AUTOSAR 自适应方法涉及工作产品及其各自任务的标准化。工作产品描述诸如服务、应用程序、机器及其配置之类的工件。各个任务定义了工作产品如何为基于自适应平台开发产品所需的活动交换设计信息。&lt;/p&gt;
&lt;h2 id=&#34;foundation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#foundation&#34;&gt;#&lt;/a&gt; Foundation&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-05-03%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%EF%BC%881%EF%BC%89%E6%A6%82%E5%BF%B5%E5%92%8C%E7%9B%AE%E6%A0%87.assets/image-20240503214800344.png&#34; alt=&#34;image-20240503214800344&#34;&gt;&lt;/p&gt;
&lt;p&gt;基础标准的目的是加强 AUTOSAR 平台之间的互操作能力。&lt;br&gt;
Foundation 包含 AUTOSAR 平台之间共享的通用要求和技术规范 (例如协议)。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a3fde49a.html</guid>
            <title>职场的一些经验之谈木雁之间</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a3fde49a.html</link>
            <category term="小世界✨" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/microcosm/" />
            <category term="自我提升" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/microcosm/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/" />
            <category term="自我提升" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/" />
            <pubDate>Tue, 23 Apr 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&#34;缘起&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缘起&#34;&gt;#&lt;/a&gt; 缘起&lt;/h2&gt;
&lt;p&gt;今天领导让我修复一个 boot 的问题【我在公司干了一年 Ethernet 了车载以太网】，说要当天搞定？说是要参加展会。&lt;/p&gt;
&lt;p&gt;然后经过排查，是 ld 文件【链接脚本文件】没分配对，RH850 的 4 核有 3 个跑不起来，boot 跳转的地址也不对。&lt;/p&gt;
&lt;p&gt;花了 2 小时搞定。【这 boot 是 boot 组那边人搞的，本来不属于我的工作】&lt;/p&gt;
&lt;p&gt;结果跟他们说结果，他们竟然都不愿意去详细看你的验证过程，给我的感觉就像是他们对这个不负责，这个活直接到我头上？这不是你们的事情吗？我不是只帮忙吗？&lt;/p&gt;
&lt;p&gt;然后是这样的&lt;/p&gt;
&lt;p&gt;boot.hex 直接烧录进 RH850&lt;/p&gt;
&lt;p&gt;app.hex 转 vbf 通过 can 使用诊断 UDS 服务下载进 codeflash 后重启 boot 完成升级。&lt;/p&gt;
&lt;p&gt;然后我一个临时解决 boot 跳转起不来的，TM 的难道不是只让你起来就行了吗？&lt;/p&gt;
&lt;p&gt;还需要我管你这一套流程吗？这不是这个项目的负责人该干的事吗？&lt;/p&gt;
&lt;p&gt;TMD 气人&lt;/p&gt;
&lt;p&gt;加油吧！快要跑路了！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/bee4fbea.html</guid>
            <title>【热辣滚烫】You Only Live Once!</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/bee4fbea.html</link>
            <category term="小世界✨" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/microcosm/" />
            <category term="自我提升" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/microcosm/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/" />
            <category term="自我提升" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/" />
            <pubDate>Sun, 21 Apr 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&#34;缘起&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缘起&#34;&gt;#&lt;/a&gt; 缘起&lt;/h2&gt;
&lt;p&gt;今天看了电影《热辣滚烫》&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/u=3197228552,228360321&amp;amp;fm=30&amp;amp;app=106&amp;amp;f=JPEG.jpeg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真的很励志。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电影讲述的是乐莹（贾玲）毕业后在家宅十年后，遭受种种打击后励志打完一场拳击比赛，最终通过一年的努力完成蜕变的故事。&lt;/p&gt;
&lt;h2 id=&#34;拼搏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拼搏&#34;&gt;#&lt;/a&gt; 拼搏&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102618.png&#34; alt=&#34;微信截图_20240421102618&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到这里我也在拷问自己：😭&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我赢过吗？&lt;/p&gt;
&lt;p&gt;哪怕一次！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;绝望&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绝望&#34;&gt;#&lt;/a&gt; 绝望&lt;/h2&gt;
&lt;p&gt;乐莹在&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;男友劈腿闺蜜&lt;/p&gt;
&lt;p&gt;妹妹想要房产&lt;/p&gt;
&lt;p&gt;朋友欺骗利用&lt;/p&gt;
&lt;p&gt;拳击教练事后概不负责&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四重打击下彻底绝望，跳楼未果后，选择赢一次！💖&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103101.png&#34; alt=&#34;微信截图_20240421103101&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;汗水&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汗水&#34;&gt;#&lt;/a&gt; 汗水&lt;/h2&gt;
&lt;p&gt;开启了自己热辣滚烫的奋斗！👟&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102655.png&#34; alt=&#34;微信截图_20240421102655&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;不弃&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不弃&#34;&gt;#&lt;/a&gt; 不弃&lt;/h2&gt;
&lt;p&gt;经历春夏秋冬🍀🍁🍂🍃，四季变迁。这一天终于到来！&lt;/p&gt;
&lt;p&gt;乐莹迈向赛场，内心早已坚定，当初的乐莹不复存在。【泪目😭过往的经历，四季的汗水浮现】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102809.png&#34; alt=&#34;微信截图_20240421102809&#34;&gt;&lt;/p&gt;
&lt;p&gt;面对职业拳击手，乐莹应声倒地。&lt;/p&gt;
&lt;p&gt;但！&lt;/p&gt;
&lt;p&gt;她并没输。&lt;/p&gt;
&lt;p&gt;因为只要完整打完拳击比赛，就已经赢了！【泪目😭】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421102958.png&#34; alt=&#34;微信截图_20240421102958&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;吸引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#吸引&#34;&gt;#&lt;/a&gt; 吸引&lt;/h2&gt;
&lt;p&gt;打完比赛回家时，曾抛弃自己的健身教练又来约乐莹吃饭。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103223.png&#34; alt=&#34;微信截图_20240421103223&#34;&gt;&lt;/p&gt;
&lt;p&gt;乐莹内心早已充盈。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103303.png&#34; alt=&#34;微信截图_20240421103303&#34;&gt;&lt;/p&gt;
&lt;p&gt;不再是当初满眼是你的女孩。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103349.png&#34; alt=&#34;微信截图_20240421103349&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;未来&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#未来&#34;&gt;#&lt;/a&gt; 未来&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;可是&lt;/p&gt;
&lt;p&gt;未来还有很多机会，对吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103428.png&#34; alt=&#34;微信截图_20240421103428&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103447-17136816056232.png&#34; alt=&#34;微信截图_20240421103447&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;撒花&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#撒花&#34;&gt;#&lt;/a&gt; 撒花&lt;/h2&gt;
&lt;p&gt;一年的历程历历在目，太佩服贾玲了。我也可以吗？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240421103519.png&#34; alt=&#34;微信截图_20240421103519&#34;&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h2 id=&#34;yolo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yolo&#34;&gt;#&lt;/a&gt; YOLO&lt;/h2&gt;
&lt;p&gt;You Only Live Once!&lt;/p&gt;
&lt;p&gt;你只活一次！&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;结束！大家可以返回文章了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/640.webp&#34; alt=&#34;640&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果看到了这里：那么我想和你交个朋友！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;未来规划：🎀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真的哭了。&lt;/p&gt;
&lt;p&gt;觉得自己又何尝不是之前的乐莹呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;喜欢的事没勇气去做&lt;/p&gt;
&lt;p&gt;喜欢的人不喜欢自己&lt;/p&gt;
&lt;p&gt;浑浑噩噩一年又一年&lt;/p&gt;
&lt;p&gt;下定的决心破了又破&lt;/p&gt;
&lt;p&gt;长相不出众邋里邋遢&lt;/p&gt;
&lt;p&gt;学习没学好普普通通&lt;/p&gt;
&lt;p&gt;玩也没玩明白不开朗&lt;/p&gt;
&lt;p&gt;程序员盯电脑要捉瞎&lt;/p&gt;
&lt;p&gt;久坐身体也每况日下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天是农历三月十三，真的刚好 24 年整。🎥&lt;/p&gt;
&lt;p&gt;回想过去 24 年的经历，我又何尝不是乐莹呢？&lt;/p&gt;
&lt;p&gt;唯一坚持下来的或许就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;活着！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可我真的甘心这样吗？&lt;/p&gt;
&lt;p&gt;渴望的爱情会到来吗？&lt;/p&gt;
&lt;p&gt;升职加薪会轮到我吗？&lt;/p&gt;
&lt;p&gt;😭&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;看了《热辣滚烫》&lt;/p&gt;
&lt;p&gt;我想，一切都有了答案！🏮&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;放弃那个很喜欢的人！&lt;/p&gt;
&lt;p&gt;丢掉那些坏习惯！&lt;/p&gt;
&lt;p&gt;不再管他升职加薪！&lt;/p&gt;
&lt;p&gt;内心坚定不再迷茫！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我要做的只有一件事：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遇见更好的自己！🎖&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不再去想如何讨好她&lt;/p&gt;
&lt;p&gt;只剩下提升自己&lt;/p&gt;
&lt;p&gt;不再去自我怀疑&lt;/p&gt;
&lt;p&gt;只是去做&lt;/p&gt;
&lt;p&gt;不再精神内耗&lt;/p&gt;
&lt;p&gt;都是 NPC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;乐莹可以一年蜕变！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也可以！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为我们，只活一次！&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;写下这篇日记&lt;/p&gt;
&lt;p&gt;是为了当自己坚持不下去时，想要放弃时，来这里看看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警醒自己，YOLO！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规划：&lt;/strong&gt;【不用太苛刻自己】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;英语：每天早上刷墨墨背单词&lt;/li&gt;
&lt;li&gt;舞蹈：每周三 &amp;amp; 周日去舞蹈室学 Hiphop&lt;/li&gt;
&lt;li&gt;健身：每天晚上 7 点公园跑步 &amp;amp; 21 点 keep&lt;/li&gt;
&lt;li&gt;护肤：早晚坚持护肤补水防晒&lt;/li&gt;
&lt;li&gt;穿搭：跟着舞蹈老师学穿搭&lt;/li&gt;
&lt;li&gt;饮食：戒辣，戒糖&lt;/li&gt;
&lt;li&gt;攒钱：每月攒下 3000&lt;/li&gt;
&lt;li&gt;文章：筹划一个 AutoSar 的专栏&lt;/li&gt;
&lt;li&gt;视频：哈哈哈等学会跳舞再说吧&lt;/li&gt;
&lt;li&gt;社交：每周都认识一些新朋友&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就这样了！【背英语断了一天就断了，没什么大不了的，明天继续背】&lt;/p&gt;
&lt;p&gt;放平心态才能长久！&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;加油！柴林峰，You Only Live Once！去活出你想要的生活吧！&lt;/p&gt;
&lt;p&gt;相信，当我变成更好的自己后，终将邂逅属于自己的爱情！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E6%88%91%E5%8F%AA%E6%B4%BB%E4%B8%80%E6%AC%A1%EF%BC%8C%E5%AF%B9%E5%90%97%EF%BC%9F.assets/640%20(1).webp&#34; alt=&#34;640 (1)&#34;&gt;&lt;/p&gt;
&lt;p&gt;2025 年 4 月 21 日&lt;/p&gt;
&lt;p&gt;记得打开这篇文章。&lt;/p&gt;
&lt;p&gt;记得以一个全新的自己打开这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在未来等你！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-flechazo&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cbed58a6.html</guid>
            <title>小柴带你学AutoSar总目录</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/cbed58a6.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/AUTOSAR/" />
            <category term="AUTOSAR" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/AUTOSAR/" />
            <pubDate>Sun, 21 Apr 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;工作了一段时间了，真的就发现网上没有一个系统一点的 AutoSar 讲解吗？&lt;/p&gt;
&lt;p&gt;算了，小柴自己来吧！当作整理知识啦～&lt;/p&gt;
&lt;p&gt;个人建议做嵌入式的都可以学习一下！不只是汽车行业！代码和思想真的不分行业！&lt;/p&gt;
&lt;h2 id=&#34;小柴带你学autosar总目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar总目录&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】总目录&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;专栏目标：系列讲解车载软件 Autosar 的方方面面&lt;/p&gt;
&lt;p&gt;适合职业：嵌入式软件开发&lt;/p&gt;
&lt;p&gt;内容声明：此专栏内容仅供参考学习&lt;/p&gt;
&lt;p&gt;更新说明：工作较忙，内容不定期更新&lt;/p&gt;
&lt;p&gt;笔者笔名：flechazo / 柴大大学长&lt;/p&gt;
&lt;h3 id=&#34;资料下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资料下载&#34;&gt;#&lt;/a&gt; 资料下载&lt;/h3&gt;
&lt;p&gt;官网获取：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYXV0b3Nhci5vcmcv&#34;&gt;https://www.autosar.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-04-21%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E6%80%BB%E7%9B%AE%E5%BD%95.assets/image-20240423210242962.png&#34; alt=&#34;image-20240423210242962&#34;&gt;&lt;/p&gt;
&lt;p&gt;王子号获取：柴大大学长【私信：&lt;strong&gt;AutoSar&lt;/strong&gt;】&lt;/p&gt;
&lt;p&gt;VVX 获取：18339963582&lt;/p&gt;
&lt;p&gt;可油可油👗获取：546305967&lt;/p&gt;
&lt;h3 id=&#34;交流专区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交流专区&#34;&gt;#&lt;/a&gt; 交流专区&lt;/h3&gt;
&lt;p&gt;VVX👗：18339963582&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&#34;../../../img.assets/24-04-21%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B0%8F%E6%9F%B4%E5%B8%A6%E4%BD%A0%E5%AD%A6%E4%B9%A0AutoSar%E7%B3%BB%E5%88%97%E6%80%BB%E7%9B%AE%E5%BD%95.assets/bbb80a90746ed3ed98bdc8bd3fa8e8d.jpg&#34; alt=&#34;bbb80a90746ed3ed98bdc8bd3fa8e8d&#34; style=&#34;zoom:25%;&#34; /&amp;gt;&lt;/p&gt;
&lt;p&gt;可油可油👗：546305967&lt;/p&gt;
&lt;h3 id=&#34;小柴带你学autosar一-基础知识篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】一、基础知识篇&lt;/h3&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇1概念和目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇1概念和目标&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82OTU4MzAzMjM=&#34;&gt;【小柴带你学 AutoSar】一、基础知识篇:（1）概念和目标&lt;/span&gt;&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇2autosar架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇2autosar架构&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82OTczMDE0NDg=&#34;&gt;【小柴带你学 AutoSar】一、基础知识篇:（2）AutoSar 架构&lt;/span&gt;&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇3c语言基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇3c语言基础&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】一、基础知识篇:（3）C 语言基础&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇4编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇4编译&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】一、基础知识篇:（4）编译&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇5cmake基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇5cmake基础&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】一、基础知识篇:（5）cmake 基础&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇6车规级mcu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇6车规级mcu&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】一、基础知识篇:（6）车规级 MCU&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar一-基础知识篇7术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar一-基础知识篇7术语&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】一、基础知识篇:（7）术语&lt;/h5&gt;
&lt;h3 id=&#34;小柴带你学autosar二-架构篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar二-架构篇&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】二、架构篇&lt;/h3&gt;
&lt;h5 id=&#34;小柴带你学autosar二-架构篇1cpclassic-platform&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar二-架构篇1cpclassic-platform&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】二、架构篇:（1）CP (Classic Platform)&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar二-架构篇2apadaptive-platform&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar二-架构篇2apadaptive-platform&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】二、架构篇:（2）AP (Adaptive Platform)&lt;/h5&gt;
&lt;h3 id=&#34;小柴带你学autosar三-标准和规范篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇&lt;/h3&gt;
&lt;h5 id=&#34;小柴带你学autosar三-标准和规范篇1general&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇1general&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇:（1）General&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar三-标准和规范篇2bswgeneral&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇2bswgeneral&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇:（2）BSWGeneral&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar三-标准和规范篇3modemanagement&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇3modemanagement&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇:（3）ModeManagement&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar三-标准和规范篇4applicationinterfaces&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇4applicationinterfaces&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇:（4）ApplicationInterfaces&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar三-标准和规范篇5rte&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇5rte&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇:（5）RTE&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar三-标准和规范篇6basicsoftware&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar三-标准和规范篇6basicsoftware&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】三、标准和规范篇:（6）BasicSoftware&lt;/h5&gt;
&lt;h3 id=&#34;小柴带你学autosar四-工具链篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar四-工具链篇&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】四、工具链篇&lt;/h3&gt;
&lt;h5 id=&#34;小柴带你学autosar四-工具链篇1davinci&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar四-工具链篇1davinci&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】四、工具链篇:（1）Davinci&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar四-工具链篇2canoe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar四-工具链篇2canoe&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】四、工具链篇:（2）Canoe&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar四-工具链篇3cvi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar四-工具链篇3cvi&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】四、工具链篇:（3）CVI&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar四-工具链篇4matlab&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar四-工具链篇4matlab&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】四、工具链篇:（4）Matlab&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar四-工具链篇5etas&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar四-工具链篇5etas&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】四、工具链篇:（5）ETAS&lt;/h5&gt;
&lt;h3 id=&#34;小柴带你学autosar五-进阶篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar五-进阶篇&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】五、进阶篇&lt;/h3&gt;
&lt;h5 id=&#34;小柴带你学autosar五-进阶篇1c语言进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar五-进阶篇1c语言进阶&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】五、进阶篇:（1）C 语言进阶&lt;/h5&gt;
&lt;h5 id=&#34;小柴带你学autosar五-进阶篇2cmake进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar五-进阶篇2cmake进阶&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】五、进阶篇:（2）cmake 进阶&lt;/h5&gt;
&lt;h3 id=&#34;小柴带你学autosar六-应用和实践篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar六-应用和实践篇&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】六、应用和实践篇&lt;/h3&gt;
&lt;h5 id=&#34;小柴带你学autosar六-应用和实践篇1团队协作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar六-应用和实践篇1团队协作&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】六、应用和实践篇:（1）团队协作&lt;/h5&gt;
&lt;h3 id=&#34;小柴带你学autosar更新ing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小柴带你学autosar更新ing&#34;&gt;#&lt;/a&gt; 【小柴带你学 AutoSar】更新 ing&lt;/h3&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1558dc78.html</guid>
            <title>QT接收电脑串口的数据</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1558dc78.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/QT/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/QT/" />
            <pubDate>Mon, 15 Apr 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&#34;flechazo的小知乎欢迎大家造访啦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flechazo的小知乎欢迎大家造访啦&#34;&gt;#&lt;/a&gt; flechazo 的小知乎，欢迎大家造访啦😘&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;书接上回 QT 使用定时器&lt;/p&gt;
&lt;h3 id=&#34;使用-qt读取电脑串口数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-qt读取电脑串口数据&#34;&gt;#&lt;/a&gt; 使用 Qt 读取电脑串口数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;QtSerialPort/QSerialPort&amp;gt;
#include &amp;lt;QtSerialPort/QSerialPortInfo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置串口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置串口&#34;&gt;#&lt;/a&gt; 设置串口&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/* 搜索可用的串口，并添加到串口组合框 */
void MainWindow::SearchSerialPorts()
{
    ui-&amp;gt;comboBoxPort-&amp;gt;clear();
    foreach(const QSerialPortInfo &amp;amp;info,QSerialPortInfo::availablePorts())
    {
        if(ui-&amp;gt;comboBoxPort-&amp;gt;count()&amp;gt;0){
            for(int idx=0; idx&amp;lt;ui-&amp;gt;comboBoxPort-&amp;gt;count(); idx++){
                QString itemName = ui-&amp;gt;comboBoxPort-&amp;gt;itemText(idx);
                QString itemCode = ui-&amp;gt;comboBoxPort-&amp;gt;itemData(idx, Qt::UserRole).toString();
                /*  do other things */
                if(itemName!=info.portName()){
                   ui-&amp;gt;comboBoxPort-&amp;gt;addItem(info.portName());//+info.description());
                }
            }
        }else{
            ui-&amp;gt;comboBoxPort-&amp;gt;addItem(info.portName());//+info.description());
        }
    }
}

/* 实现软件参变量的初始化设定 */
void MainWindow::InitialSetting()
{
    /* 填充串口号组合框 */
    SearchSerialPorts();

    /* 填充串口波特率 */
    ui-&amp;gt;comboBoxBaud-&amp;gt;addItem(&#34;9600&#34;);
    ui-&amp;gt;comboBoxBaud-&amp;gt;addItem(&#34;14400&#34;);
    ui-&amp;gt;comboBoxBaud-&amp;gt;addItem(&#34;19200&#34;);
    ui-&amp;gt;comboBoxBaud-&amp;gt;addItem(&#34;57600&#34;);
    ui-&amp;gt;comboBoxBaud-&amp;gt;addItem(&#34;115200&#34;);
    ui-&amp;gt;comboBoxBaud-&amp;gt;setCurrentIndex(4);

    /* 填充串口数据位 */
    ui-&amp;gt;comboBoxData-&amp;gt;addItem(&#34;7位&#34;);
    ui-&amp;gt;comboBoxData-&amp;gt;addItem(&#34;8位&#34;);
    ui-&amp;gt;comboBoxData-&amp;gt;addItem(&#34;9位&#34;);
    ui-&amp;gt;comboBoxData-&amp;gt;setCurrentIndex(1);

    /* 填充串口校验位 */
    ui-&amp;gt;comboBoxParity-&amp;gt;addItem(&#34;无校验&#34;);
    ui-&amp;gt;comboBoxParity-&amp;gt;addItem(&#34;奇校验&#34;);
    ui-&amp;gt;comboBoxParity-&amp;gt;addItem(&#34;偶校验&#34;);

    /* 填充串口停止位 */
    ui-&amp;gt;comboBoxStop-&amp;gt;addItem(&#34;1位&#34;);
    ui-&amp;gt;comboBoxStop-&amp;gt;addItem(&#34;1.5位&#34;);
    ui-&amp;gt;comboBoxStop-&amp;gt;addItem(&#34;2位&#34;);

    /* 为变量赋初值 */
    receivedBytes=0;
    transmitBytes=0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打开串口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打开串口&#34;&gt;#&lt;/a&gt; 打开串口&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 打开串口 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MainWindow&lt;/span&gt;&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;on_actionConnect_triggered&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setPortName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;comboBoxPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentText&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;QIODevice&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;ReadWrite&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 打开串口成功 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 设置波特率 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setBaudRate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;comboBoxBaud&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentText&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 设置数据位数 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;comboBoxData&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setDataBits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;QSerialPort&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;Data8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 设置奇偶校验 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;comboBoxParity&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setParity&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;QSerialPort&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;NoParity&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 设置停止位 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;comboBoxStop&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;currentIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setStopBits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;QSerialPort&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;OneStop&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setStopBits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;QSerialPort&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;TwoStop&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 设置流控制 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        serialPort&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setFlowControl&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;QSerialPort&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;NoFlowControl&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 连接槽函数 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;serialPort&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;QSerialPort&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;readyRead&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;MainWindow&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;ReadSerialData&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 设置控件可否使用 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;actionConnect&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setEnabled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;actionClose&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setEnabled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ui&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;actionRefresh&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setEnabled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* 打开失败提示 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;QMessageBox&lt;/span&gt;&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;错误&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;打开串口失败！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;QMessageBox&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;Ok&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;读取数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读取数据&#34;&gt;#&lt;/a&gt; 读取数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/* 从串口接收数据 */
void MainWindow::ReadSerialData()
{
    /* 用于接收超时处理 */
    flechazoTime_ms = 0;
    receiveflag=true;
    /* 先把接收到的数据存到这里 */
    rxDatas+=serialPort-&amp;gt;readAll();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;超时处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超时处理&#34;&gt;#&lt;/a&gt; 超时处理&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/* 使用定时器定时处理哦https://zhuanlan.zhihu.com/p/690750411 */
void MainWindow::recievedata()
{
    flechazoTime_ms++;
    /* 检查是否接收到数据 并有2ms的超时 */
    if((receiveflag)&amp;amp;&amp;amp;(flechazoTime_ms&amp;gt;=2))
    {
        receiveflag=false;
        if(ui-&amp;gt;checkBoxRecieve-&amp;gt;isChecked()) //十六进制显示
        {
             context = rxDatas.toHex();
             context = context.toUpper();

             QByteArray buffer,tmp, src;
             buffer = QByteArray::fromHex(context.toLatin1());
             for(int i=0;i&amp;lt;rxDatas.size();i++){
                cmdprotocolparsing.byte[i] = buffer[i];
             }
             vprotocolcmdparsing(&#34;&#34;,rxDatas.size());

             src = context.toLatin1();
             for (int i = 0; i &amp;lt; src.size(); i++ )
             {
                 tmp.append(src.at(i));
                 if (i % 2) tmp.append(0x20);
             }
             context = tmp;
        }
        else    //ASCII显示
        {
            context = QString::fromLocal8Bit(rxDatas);
        }

        QString timeStrLine=&#34;[&#34;+QDateTime::currentDateTime().toString(&#34;hh:mm:ss&#34;)+&#34;][接收]:🐬 &#34;;
        context = timeStrLine+context;//+&#34;\n\r&#34;;

        QString content = &#34;&amp;lt;span style=\&#34; color:blue;\&#34;&amp;gt;&#34;+context+&#34;&amp;lt;/span&amp;gt;&#34;;
        ui-&amp;gt;textBrowser-&amp;gt;append(content);

        receivedBytes=receivedBytes+rxDatas.size();
        ui-&amp;gt;lcdNumberRecieve-&amp;gt;display(receivedBytes);

        ui-&amp;gt;statusbar-&amp;gt;showMessage(tr(&#34;成功读取%1字节数据&#34;).arg(rxDatas.size()));
        rxDatas.clear();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;发送数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发送数据&#34;&gt;#&lt;/a&gt; 发送数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void MainWindow::WriteSerialData(QString qstring_context)
{
    /* 处理成16进制 */
    QByteArray flechazoSend_buffer;
    QString flechazoSend_msg=&#34;&#34;;
    if ( qstring_context.indexOf(&#34; &#34;) &amp;gt; 0)
    {
        bool ok;
        char data;
        QStringList list;
        list = qstring_context.split(&#34; &#34;);
        for (int i = 0; i &amp;lt; list.count(); i++)
        {
            if (list.at(i) == &#34; &#34;)
                continue;
            if (list.at(i).isEmpty())
                continue;
            data = (char)list.at(i).toInt(&amp;amp;ok, 16);
            if (!ok)
            {
                QMessageBox::information(this, tr(&#34;提示消息&#34;), tr(&#34;输入的数据格式有错误！&#34;), QMessageBox::Ok);
                return;
            }
            flechazoSend_buffer.append(data);
        }
        flechazoSend_msg = qstring_context.toUpper();
    }
    else
    {
        QByteArray tmp, src,myqsarraydata;
        myqsarraydata=qstring_context.toLatin1();
        flechazoSend_buffer = QByteArray::fromHex(myqsarraydata);
        src = qstring_context.toLatin1();
        for (int i = 0; i &amp;lt; src.size(); i++ )
        {
            tmp.append(src.at(i));
            if (i % 2) tmp.append(0x20);
        }
        flechazoSend_msg = tmp;
    }

    /* 发送数据 */
    if (serialPort &amp;amp;&amp;amp; serialPort-&amp;gt;isOpen() &amp;amp;&amp;amp; serialPort-&amp;gt;isWritable())
    {
        qDebug()&amp;lt;&amp;lt;&#34;**************************buf : &#34;&amp;lt;&amp;lt;flechazoSend_buffer.toHex();
        QString timeStrLine=&#34;[&#34;+QDateTime::currentDateTime().toString(&#34;hh:mm:ss&#34;)+&#34;][发送]:🚀 &#34;;
        QString content = &#34;&amp;lt;span style=\&#34; color:red;\&#34;&amp;gt;&#34;+timeStrLine +flechazoSend_msg+&#34;\n\r&amp;lt;/span&amp;gt;&#34;;
        ui-&amp;gt;textBrowser-&amp;gt;append(content);

        /* 向串口发送数据 */
        serialPort-&amp;gt;write(flechazoSend_buffer);
        ui-&amp;gt;statusbar-&amp;gt;showMessage(tr(&#34;发送数据成功&#34;));

        /* 界面控制 */
        ui-&amp;gt;textBrowser-&amp;gt;setTextColor(Qt::red);
        transmitBytes +=flechazoSend_buffer.size();
        ui-&amp;gt;lcdNumberSend-&amp;gt;display(transmitBytes);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;关闭串口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关闭串口&#34;&gt;#&lt;/a&gt; 关闭串口&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/* 关闭串口 */
void MainWindow::on_actionClose_triggered()
{
    serialPort-&amp;gt;clear();
    serialPort-&amp;gt;close();

    /* 设置控件可否使用 */
    ui-&amp;gt;actionConnect-&amp;gt;setEnabled(true);
    ui-&amp;gt;actionClose-&amp;gt;setEnabled(false);
    ui-&amp;gt;actionRefresh-&amp;gt;setEnabled(true);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完结撒花🍁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家有问题欢迎向我提问哦！&lt;/strong&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/829c4b27.html</guid>
            <title>QT定时器的使用</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/829c4b27.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/QT/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/QT/" />
            <pubDate>Thu, 04 Apr 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&#34;flechazo的小知乎欢迎大家造访啦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flechazo的小知乎欢迎大家造访啦&#34;&gt;#&lt;/a&gt; flechazo 的小知乎，欢迎大家造访啦😘&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&#34;qt中使用定时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#qt中使用定时器&#34;&gt;#&lt;/a&gt; QT 中使用定时器&lt;/h2&gt;
&lt;h3 id=&#34;初见&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初见&#34;&gt;#&lt;/a&gt; 初见&lt;/h3&gt;
&lt;p&gt;为啥子要用定时器呢？因为喜欢哈哈哈！&lt;/p&gt;
&lt;p&gt;定时器在软件开发中有着广泛的应用，其主要作用包括但不限于以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;执行周期性任务&lt;/strong&gt;：定时器可以设置一个时间间隔，定时触发任务的执行。这种周期性的执行可以用于定期更新界面、定时采集数据、定时发送心跳包等场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟执行任务&lt;/strong&gt;：定时器也可以用于延迟执行任务，即在一定的时间后触发任务的执行。这种延迟执行可以用于实现一些需要等待一段时间后才能执行的操作，比如启动动画、显示提示信息等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现超时处理&lt;/strong&gt;：在网络通信、用户交互等场景中，经常需要设置超时时间来处理未在规定时间内完成的操作，定时器可以用于监测超时并执行相应的处理逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定时刷新数据&lt;/strong&gt;：对于需要定时更新数据的应用，比如实时监控系统、股票行情等，定时器可以周期性地触发数据刷新操作，保持数据的实时性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节省资源&lt;/strong&gt;：定时器可以在需要执行任务时启动，任务执行完毕后自动停止，有效地节省了系统资源和能耗。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说，定时器是一种非常有用的工具，可以帮助我们实现各种时间相关的功能，提高程序的灵活性和用户体验。在软件开发中合理使用定时器能够提高系统的效率和性能。&lt;/p&gt;
&lt;h3 id=&#34;了解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#了解&#34;&gt;#&lt;/a&gt; 了解&lt;/h3&gt;
&lt;p&gt;先来看一哈思路&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建一个指向 QTimer 对象的指针 flechazoTimer_s&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;QTimer &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;flechazoTimer_s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在堆上分配一个新的 QTimer 对象，并将其地址赋给 flechazoTimer_s 指针&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flechazoTimer_s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; QTimer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 启动定时器，设置定时器的间隔为 1000 毫秒（1 秒）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flechazoTimer_s&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 连接定时器的 timeout 信号到 MainWindow 类的 vflechazo_s 槽函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这意味着当定时器超时时，将调用 MainWindow 类的 vflechazo_s 函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flechazoTimer_s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;QTimer&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;timeout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;MainWindow&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;vflechazoTimerout_s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// MainWindow 类的 vflechazo_s 槽函数的声明和实现&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MainWindow&lt;/span&gt;&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;vflechazoTimerout_s&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 在这里执行定时任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;熟悉&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#熟悉&#34;&gt;#&lt;/a&gt; 熟悉&lt;/h3&gt;
&lt;p&gt;经过上述的思路，我们就可以开始玩耍了。&lt;/p&gt;
&lt;p&gt;定时器用起来真的很方便。&lt;/p&gt;
&lt;p&gt;我最开始用的时候呢是因为超时中断。做单片机的都知道，UART 里的中断是可以设定超时中断的。但在第一次接触 QT 时竟然没找到这个设定。使用起来很是不舒服。&lt;/p&gt;
&lt;p&gt;下次出一篇文章仔细介绍&lt;/p&gt;
&lt;h3 id=&#34;源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源码&#34;&gt;#&lt;/a&gt; 源码&lt;/h3&gt;
&lt;p&gt;mainwindow.h&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include &amp;lt;QTime&amp;gt;

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();
    
    QTimer *flechazoTimer_s;
    void vflechazoTimerout_s(void);

private slots:

private:
    Ui::MainWindow *ui;
};

#endif // MAINWINDOW_H
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mainwindow.cpp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;mainwindow.h&#34;
#include &#34;ui_mainwindow.h&#34;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui-&amp;gt;setupUi(this);

    flechazoTimer_s = new QTimer;
    flechazoTimer_s-&amp;gt;start(1000);

    connect(flechazoTimer_s, &amp;amp;QTimer::timeout,this,&amp;amp;MainWindow::vflechazoTimerout_s);
}

//定时器中断-&amp;gt;1s进入1次
void MainWindow::vflechazoTimerout_s(void)
{
    // 在这里执行定时任务
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好啦！有了定时器想干嘛就干嘛了！熟悉的单片机的味道回来啦哈哈哈&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1a8fe83d.html</guid>
            <title>QT实用工具之DOC转PDF</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/1a8fe83d.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/QT/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/QT/" />
            <pubDate>Tue, 19 Mar 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&#34;flechazo的小知乎欢迎大家造访啦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flechazo的小知乎欢迎大家造访啦&#34;&gt;#&lt;/a&gt; flechazo 的小知乎，欢迎大家造访啦😘&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用-qt-将-word-文档转换为-pdf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-qt-将-word-文档转换为-pdf&#34;&gt;#&lt;/a&gt; 使用 Qt 将 Word 文档转换为 PDF&lt;/h2&gt;
&lt;p&gt;在本教程中，我们将学习如何使用 Qt 框架将 Word 文档转换为 PDF 格式。这可以通过与 Microsoft Word 应用程序进行交互，利用其功能来实现。在本示例中，我们将演示如何使用 Qt 的相关类和 ActiveX 技术来完成这一任务。&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤&#34;&gt;#&lt;/a&gt; 步骤&lt;/h2&gt;
&lt;h3 id=&#34;1-包含必要的头文件和创建-qapplication-对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-包含必要的头文件和创建-qapplication-对象&#34;&gt;#&lt;/a&gt; 1. 包含必要的头文件和创建 QApplication 对象&lt;/h3&gt;
&lt;p&gt;首先，我们需要包含必要的头文件并创建 QApplication 对象，以便使用 Qt 框架的功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;QAxObject&amp;gt;
#include &amp;lt;QAxWidget&amp;gt;
#include &amp;lt;QDebug&amp;gt;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QDir&amp;gt;
int main(int argc, char *argv[]) {
    QApplication a(argc, argv);

    // 以下是后续的代码...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-检查文件夹是否存在并获取文件列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-检查文件夹是否存在并获取文件列表&#34;&gt;#&lt;/a&gt; 2. 检查文件夹是否存在并获取文件列表&lt;/h3&gt;
&lt;p&gt;接下来，我们使用  &lt;code&gt;QDir&lt;/code&gt;  类来检查指定路径下的文件夹是否存在，并获取该文件夹下的所有文件信息列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;QDir dir(&#34;D:\\your\\directory\\path&#34;);
if(!dir.exists()){
    qDebug() &amp;lt;&amp;lt; &#34;Directory error&#34;;
    return 0;
}

dir.setFilter(QDir::Files | QDir::NoSymLinks);
QFileInfoList list = dir.entryInfoList();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-逐个处理-word-文档并导出为-pdf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-逐个处理-word-文档并导出为-pdf&#34;&gt;#&lt;/a&gt; 3. 逐个处理 Word 文档并导出为 PDF&lt;/h3&gt;
&lt;p&gt;现在，我们将逐个打开 Word 文档，并将其导出为 PDF 格式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(int i = 0; i &amp;lt; list.size(); i++){
    QFileInfo fileInfo = list.at(i);
    QString fileName = fileInfo.fileName();
    QString filePath = fileInfo.absoluteFilePath();
    QString dirName = dir.path();

    QAxWidget word(&#34;Word.Application&#34;);
    word.setProperty(&#34;Visible&#34;, false);
    QAxObject * documents = word.querySubObject(&#34;Documents&#34;);
    QAxObject * document = documents-&amp;gt;querySubObject(&#34;Open(QString)&#34;, filePath);

    QVariant OutputFileName(dirName + &#34;/&#34; + fileName.mid(0, fileName.lastIndexOf(&#34;.&#34;)) + &#34;.pdf&#34;);
    QVariant ExportFormat(17);  // 17 表示 PDF 格式
    QVariant OpenAfterExport(false);

    document-&amp;gt;querySubObject(&#34;ExportAsFixedFormat(const QVariant&amp;amp;,const QVariant&amp;amp;,const QVariant&amp;amp;)&#34;,
                             OutputFileName,
                             ExportFormat,
                             OpenAfterExport);

    document-&amp;gt;dynamicCall(&#34;Close(boolean)&#34;,false);
    word.dynamicCall(&#34;Quit (void)&#34;);

    qDebug() &amp;lt;&amp;lt; filePath + &#34; to PDF success&#34;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-完成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-完成&#34;&gt;#&lt;/a&gt; 4. 完成&lt;/h3&gt;
&lt;p&gt;最后，我们调用  &lt;code&gt;a.exec()&lt;/code&gt;  来运行应用程序。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;return a.exec();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;通过本教程，我们学习了如何使用 Qt 框架和 ActiveX 技术将 Word 文档转换为 PDF 格式。这种方法可以轻松地集成到您的 Qt 项目中，并为用户提供方便的文档转换功能。&lt;/p&gt;
&lt;p&gt;希望本教程对您有所帮助，如果您有任何问题或疑问，请随时联系我哦。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这样的教程可以帮助读者了解如何在 Qt 中使用 ActiveX 技术与 Word 进行交互，从而实现 Word 文档转换为 PDF 的功能。如果您需要对某些部分进行进一步解释或添加其他内容，请随时告诉我。&lt;/p&gt;
&lt;h2 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;QAxObject&amp;gt;
#include &amp;lt;QAxWidget&amp;gt;
#include &amp;lt;QDebug&amp;gt;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QDir&amp;gt;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    QDir dir(&#34;D:\\flechazo\\ProgramSourceCode\\flechazo\\25QTexample\\Qt\\DocxToPdfDemo\\doc&#34;);
    if(!dir.exists()){

        qDebug() &amp;lt;&amp;lt; &#34;dir error&#34;;
        return 0;
    }

    dir.setFilter(QDir::Files | QDir::NoSymLinks);
    QFileInfoList list = dir.entryInfoList();
    for(int i = 0; i &amp;lt; list.size(); i++){

        QFileInfo fileInfo = list.at(i);
        QString fileName = fileInfo.fileName();
        QString filePath = fileInfo.absoluteFilePath();
        QString dirName = dir.path();

        QAxWidget word(&#34;Word.Application&#34;);
        word.setProperty(&#34;Visible&#34;, false);
        QAxObject * documents = word.querySubObject(&#34;Documents&#34;);
        QAxObject * document = documents-&amp;gt;querySubObject(&#34;Open(QString)&#34;, filePath);

        QVariant OutputFileName(dirName + &#34;/&#34; + fileName.mid(0, fileName.lastIndexOf(&#34;.&#34;)) + &#34;.pdf&#34;);
        QVariant ExportFormat(17);
        QVariant OpenAfterExport(false);

        document-&amp;gt;querySubObject(&#34;ExportAsFixedFormat(const QVariant&amp;amp;,const QVariant&amp;amp;,const QVariant&amp;amp;)&#34;,
                                 OutputFileName,
                                 ExportFormat,
                                 OpenAfterExport);

        document-&amp;gt;dynamicCall(&#34;Close(boolean)&#34;,false);
        word.dynamicCall(&#34;Quit (void)&#34;);

        qDebug() &amp;lt;&amp;lt; filePath + &#34; to pdf success&#34;;
    }

    return a.exec();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8be44650.html</guid>
            <title>编码技巧之dowhile的高级用法</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/8be44650.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="C语言" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/C%E8%AF%AD%E8%A8%80/" />
            <category term="C语言" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/C%E8%AF%AD%E8%A8%80/" />
            <pubDate>Mon, 04 Mar 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&#34;缘起&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缘起&#34;&gt;#&lt;/a&gt; 缘起&lt;/h3&gt;
&lt;p&gt;在 C 语言编程中，要将代码写的更高级一点，代码的逻辑更清晰，执行效率更高。在阅读 Autosar 的 EthSwt 模块时学到了一招。跟大家分分享一下！&lt;/p&gt;
&lt;p&gt;在 C 语言中， &lt;code&gt;do-while&lt;/code&gt;  循环是一种常见的循环结构，与  &lt;code&gt;while&lt;/code&gt;  循环不同之处在于它先执行循环体，然后再判断条件是否成立。这使得  &lt;code&gt;do-while&lt;/code&gt;  循环特别适用于需要至少执行一次循环体的情况。本文将介绍  &lt;code&gt;do-while&lt;/code&gt;  循环的多种高级用法，包括菜单选择、输入验证、游戏循环和提前退出等。&lt;/p&gt;
&lt;h3 id=&#34;菜单选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#菜单选择&#34;&gt;#&lt;/a&gt; 菜单选择&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;do-while&lt;/code&gt;  循环经常被用于实现菜单选择功能。通过在循环体内展示菜单选项，要求用户输入选择，并根据用户输入执行相应操作，直到用户选择退出为止。以下是一个简单的菜单选择示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; choice&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 展示菜单&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1. Option 1\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2. Option 2\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3. Quit\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 用户选择&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Enter your choice: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;choice&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 根据选择执行相应操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;choice&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 执行选项 1 对应的操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 执行选项 2 对应的操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 退出循环&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Invalid choice, please try again.\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;choice &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;输入验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入验证&#34;&gt;#&lt;/a&gt; 输入验证&lt;/h3&gt;
&lt;p&gt;利用  &lt;code&gt;do-while&lt;/code&gt;  循环进行输入验证是另一个常见的用法。可以要求用户输入内容，并进行验证，直到输入符合要求为止。以下是一个输入正数的验证示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; number&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Enter a positive number: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;number&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Invalid input. Please try again.\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;number &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;游戏循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#游戏循环&#34;&gt;#&lt;/a&gt; 游戏循环&lt;/h3&gt;
&lt;p&gt;在游戏开发中， &lt;code&gt;do-while&lt;/code&gt;  循环通常用于游戏主循环，确保游戏循环至少执行一次，并在每次迭代结束后检查退出条件。以下是一个简单的游戏循环示例：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; playAgain&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 游戏逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Do you want to play again? (y/n): &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; %c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;playAgain&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;playAgain &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token char&#34;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;提前退出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提前退出&#34;&gt;#&lt;/a&gt; 提前退出&lt;/h3&gt;
&lt;p&gt;通过结合  &lt;code&gt;do-while&lt;/code&gt;  循环和  &lt;code&gt;continue&lt;/code&gt;  语句，我们可以在代码执行出错时提前跳出当前迭代，优化代码执行的效率。以下是一个示例，演示了在  &lt;code&gt;do-while&lt;/code&gt;  循环中遇到错误时使用  &lt;code&gt;continue&lt;/code&gt;  来提前结束当前迭代：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; input&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 模拟需要输入并验证的操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Enter a positive number: &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;scanf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Invalid input. Skipping to next iteration.\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 提前结束当前迭代&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 条件二提前跳出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input &lt;span class=&#34;token operator&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Invalid input. Skipping to next iteration.\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 提前结束当前迭代&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 正确处理输入的情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Input is valid: %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 在这里可以继续添加其他需要执行的代码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 这里使用 -1 作为退出条件示例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上是  &lt;code&gt;do-while&lt;/code&gt;  循环在 C 语言中多种用法的介绍，希望能帮助您更好地理解和应用这一循环结构。&lt;/p&gt;
&lt;h3 id=&#34;autosar代码示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autosar代码示例&#34;&gt;#&lt;/a&gt; Autosar 代码示例&lt;/h3&gt;
&lt;p&gt;说一下提前退出啦&lt;/p&gt;
&lt;p&gt;这里截取一段 Autosar 中的代码&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 用宏定义来优化代码结构 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name function&#34;&gt;CHK_FUN_CONTINUE&lt;/span&gt;&lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;             &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;                                      &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                         &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;int32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;RT_ERR_OK &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;int32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;                                  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                      &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;                                  &lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 可以使用 do {} while () 来优化代码执行效率 如果中间有一项执行失败就提前返回 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;RtkApiRet &lt;span class=&#34;token function&#34;&gt;rtk_mirror_disable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;uint32 unit&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    RtkApiRet rtkRet &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RT_ERR_OK&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;AUTOSAR_DEBUG_INFO&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;PORT_MIRRORING_DISABLED\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* Reset to the HW’s default values */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;CHK_FUN_CONTINUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rtkRet&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rtk_mirror_reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;unit&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1u&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;CHK_FUN_CONTINUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rtkRet&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reg_write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;unit&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; TRAFFIC_MIRROR0_CONTROL2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;CHK_FUN_CONTINUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rtkRet&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reg_write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;unit&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; MIRROR0_PORT_EGRESS_FILTER_CONTROL&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;CHK_FUN_CONTINUE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rtkRet&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reg_write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;unit&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; TRAFFIC_MIRROR0_SAMPLE_CONTROL&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0u&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1u&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; rtkRet&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;学会了嘛😜&lt;/p&gt;
&lt;p&gt;谢谢可爱的你能看到最后呢！&lt;/p&gt;
&lt;p&gt;爱你呀😍&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a0e7ce99.html</guid>
            <title>编码技巧之如何高效地遍历</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a0e7ce99.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="C语言" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/C%E8%AF%AD%E8%A8%80/" />
            <category term="C语言" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/C%E8%AF%AD%E8%A8%80/" />
            <pubDate>Mon, 26 Feb 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;缘起： 在 C 语言编程中，经常需要对数组进行遍历操作。&lt;/p&gt;
&lt;p&gt;通常有两种常见的方式：&lt;strong&gt;一种是使用索引进行遍历&lt;/strong&gt;，&lt;strong&gt;另一种是使用指针进行遍历&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文将聚焦于比较这两种方式的效率差异，并阐述为什么指针遍历方式在大多数情况下更高效。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;首先看个例子吧：&lt;/p&gt;
&lt;p&gt;EfficiencyOfCodeExecution.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* file : EfficiencyOfCodeExecution.c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;stdio.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* Global Type Declaration&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; foo_struct&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* Global Function Implement&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 1. 声明结构体数组 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    foo_struct foo&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 2. 第一种遍历方式 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        foo&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        foo&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        foo&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;c&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 3. 第二种遍历方式 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    foo_struct &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;fp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    foo_struct &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;fend&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fend &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; foo &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fp&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;foo&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;fp&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;fend&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;fp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        fp&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        fp&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        fp&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* file : EfficiencyOfCodeExecution.c end!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上述的第二种指针的方式又高级又效率！&lt;/p&gt;
&lt;p&gt;主打一个高级感🚎&lt;/p&gt;
&lt;p&gt;还不用起来🎀&lt;/p&gt;
&lt;p&gt;那 为什么呢？&lt;/p&gt;
&lt;p&gt;索引遍历方式需要通过索引值来访问数组元素。每次迭代都需要进行索引值的计算，然后根据索引值进行内存地址的访问。&lt;/p&gt;
&lt;p&gt;这涉及到了额外的计算操作，增加了代码的复杂度和执行时间。&lt;/p&gt;
&lt;p&gt;相比之下，指针遍历方式直接通过指针进行内存地址的访问，无需进行额外的索引计算。&lt;/p&gt;
&lt;p&gt;指针递增操作由编译器自动完成，减少了不必要的计算开销。&lt;/p&gt;
&lt;p&gt;这使得指针遍历方式能够更快速地访问数组元素，提高了代码的执行效率。&lt;/p&gt;
&lt;p&gt;当然啦！这也不是绝对滴，在某些特殊情况下，索引遍历方式可能会更适合。&lt;/p&gt;
&lt;p&gt;例如，需要随机访问数组元素或具有特定的索引模式时，索引遍历方式可能更具优势。&lt;/p&gt;
&lt;p&gt;学会了嘛😜&lt;/p&gt;
&lt;p&gt;谢谢可爱的你能看到最后呢！&lt;/p&gt;
&lt;p&gt;爱你呀😍&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/563afaa7.html</guid>
            <title>编码技巧之如何优雅的解耦</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/563afaa7.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="C语言" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/C%E8%AF%AD%E8%A8%80/" />
            <category term="C语言" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/C%E8%AF%AD%E8%A8%80/" />
            <pubDate>Sat, 03 Feb 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;缘起： 在软件开发中，代码解耦是一项至关重要的技术。解耦意味着将相互依赖的模块或组件之间的耦合度降到最低，使得系统更加灵活、可扩展和易于维护。本文将介绍代码解耦的概念和重要性，并提供一些实用的解耦技巧。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;码代码就像盖楼！&lt;/p&gt;
&lt;p&gt;需要打地基打地基打地基！&lt;/p&gt;
&lt;p&gt;需要好框架，做好分层才能分工明确，条理不乱，容易维护！&lt;/p&gt;
&lt;p&gt;下面就来举个例子讲一下我单身 24 年悟出的经验吧！&lt;/p&gt;
&lt;p&gt;🍕🍔🍟🌭&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是代码耦合？ 代码耦合是指模块或组件之间的依赖程度。当一个模块直接依赖于另一个模块的具体实现细节时，就存在高耦合度。高耦合度会导致代码难以修改、测试和重用，增加了系统的复杂性。&lt;/li&gt;
&lt;li&gt;为什么要解耦代码？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;灵活性：解耦代码可以使系统更加灵活，当需求变化时，只需修改少量代码而不会对整个系统产生过大的影响。&lt;/li&gt;
&lt;li&gt;可扩展性：解耦代码可以降低模块之间的依赖关系，使得添加新功能或模块更加容易。&lt;/li&gt;
&lt;li&gt;可维护性：解耦代码可以使代码结构更清晰，易于理解和维护。同时，解耦也有助于减少错误的传播范围，提高代码的可靠性。&lt;/li&gt;
&lt;li&gt;可测试性：解耦代码使得单元测试和集成测试更加容易，通过独立测试每个模块，可以更准确地定位和修复问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;解耦技巧：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用接口或抽象类：将具体实现与接口或抽象类分离，其他模块只依赖于接口而不依赖于具体实现。这样，当需要修改实现时，只需修改实现类而无需修改依赖它的模块。&lt;/li&gt;
&lt;li&gt;事件驱动架构：使用事件机制来解耦模块之间的通信。一个模块触发事件，其他模块根据需要订阅并响应这些事件，从而实现模块之间的解耦。&lt;/li&gt;
&lt;li&gt;依赖注入：通过将依赖对象从外部传递给模块，使得模块不需要关心对象如何创建和管理。这种方式可以减少模块之间的直接依赖，提高可替换性和可测试性。&lt;/li&gt;
&lt;li&gt;领域驱动设计（DDD）：将代码组织为领域模型，将业务逻辑封装在领域对象中。这种方式可以使代码更加解耦、可读性更好，并且更贴近实际业务需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结论： 代码解耦是构建灵活、可维护的软件的关键技术之一。通过使用接口、事件驱动架构、依赖注入和领域驱动设计等技巧，我们可以降低代码耦合度，提高系统的灵活性、可扩展性、可维护性和可测试性。在开发过程中，我们应该始终关注代码解耦，并将其视为提高软件质量和开发效率的重要手段。&lt;/p&gt;
&lt;p&gt;来看看例子吧&lt;/p&gt;
&lt;p&gt;main.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : main.c start!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;uart.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;processdata.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * main()&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 分离之后，接口可以随意切换，更加具有兼容性！这样写一份代码就可以方便的复用啦！！！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       processdata: 作为数据的整理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       uart: 作为数据的发送接口 */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Processdata_InterfaceInit_t Processdata_InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Processdata_InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SendData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Uart_Send&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Processdata_InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;RecieveData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Uart_Recieve&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Processdata_InterfaceInit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;Processdata_InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 这样将接口对过去就可以啦！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       今后想换接口：ethernet/SPI/IIC 等等就直接将函数传入就行啦 */&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* your code */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : main.c end!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;processdata.h&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : processdata.h start!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;_PROCESSDATA_H&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;_PROCESSDATA_H&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Global Type Declaration&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;Processdata_SendType&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;Processdata_RecieveType&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Processdata_SendType SendData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Processdata_RecieveType RecieveData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;Processdata_InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Global Function Declaration&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Processdata_InterfaceInit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Processdata_InterfaceInit_t &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* _PROCESSDATA_H */&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : processdata.h end!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;processdata.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : processdata.c start!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;uart.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;processdata.h&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Global Variable&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bool processdata_InerfaceInit_Flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Processdata_SendType Processdata_SendData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; NULL_PTR&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Processdata_RecieveType Processdata_RecieveData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; NULL_PTR&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Global Function Implement&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Processdata_InterfaceInit()&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Processdata_InterfaceInit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Processdata_InterfaceInit_t &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;InterfaceInit_t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* check */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;InterfaceInit_t&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;SendData&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;NULL_PTR&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;\&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;InterfaceInit_t&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;RecieveData&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;NULL_PTR&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;/* init function API */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Processdata_SendData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; InterfaceInit_t&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;SendData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Processdata_RecieveData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; InterfaceInit_t&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;RecieveData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        processdata_InerfaceInit_Flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0u&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1u&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;/* OK | NOT_OK */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : processdata.c end!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;uart.h&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : uart.h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;ifndef&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;_UART_H&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;_UART_H&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Global Function Declaration&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Uart_Send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Uart_Recieve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* _UART_H */&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file end!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;uart.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : uart.c start!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Global Function Implement&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Uart_Send()&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Uart_Send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* Uart Driver */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;/* OK | NOT_OK */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * Uart_Recieve()&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Uart_Recieve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* Uart Driver */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;/* OK | NOT_OK */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/****************************************************&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * file : uart.c end!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;****************************************************/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;学会了嘛😜&lt;/p&gt;
&lt;p&gt;谢谢可爱的你能看到最后呢！&lt;/p&gt;
&lt;p&gt;爱你呀😍&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7f90a610.html</guid>
            <title>QT中信号与槽的连接</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/7f90a610.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/QT/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/QT/" />
            <pubDate>Sun, 28 Jan 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&#34;flechazo的小知乎欢迎大家造访啦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flechazo的小知乎欢迎大家造访啦&#34;&gt;#&lt;/a&gt; flechazo 的小知乎，欢迎大家造访啦😘&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;当使用 Qt 进行应用程序开发时，QObject::connect 是一个非常重要的函数，它被用于将信号与槽函数连接起来，实现对象之间的通信。通过这种机制，可以实现模块之间的解耦和灵活的交互。本文将详细介绍 QObject::connect 的用法。&lt;/p&gt;
&lt;h3 id=&#34;1-qobjectconnect-函数的基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-qobjectconnect-函数的基本语法&#34;&gt;#&lt;/a&gt; 1. QObject::connect 函数的基本语法&lt;/h3&gt;
&lt;p&gt;QObject::connect 的基本语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bool QObject::connect(const QObject *sender, const char *signal,
                      const QObject *receiver, const char *method,
                      Qt::ConnectionType type = Qt::AutoConnection);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中各参数的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sender&lt;/code&gt; ：发出信号的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal&lt;/code&gt; ：信号的名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;receiver&lt;/code&gt; ：接收信号的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; ：槽函数的名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; ：连接类型，默认为 Qt::AutoConnection。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-信号与槽函数的声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-信号与槽函数的声明&#34;&gt;#&lt;/a&gt; 2. 信号与槽函数的声明&lt;/h3&gt;
&lt;p&gt;在使用 QObject::connect 进行连接之前，需要确保信号和槽函数在相应的类中进行了正确的声明。信号和槽函数的声明遵循特定的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;信号的声明：在信号所属的类中使用  &lt;code&gt;signals&lt;/code&gt;  关键字进行声明，通常在类的头文件中。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;signals:
    void mySignal();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;槽函数的声明：在槽函数所属的类中进行声明，通常在类的头文件中，并且需要使用  &lt;code&gt;slots&lt;/code&gt;  关键字进行修饰。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public slots:
    void mySlot();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-连接信号与槽函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-连接信号与槽函数&#34;&gt;#&lt;/a&gt; 3. 连接信号与槽函数&lt;/h3&gt;
&lt;p&gt;连接信号与槽函数是通过 QObject::connect 函数来实现的。该函数会根据参数指定的发送者、接收者、信号和槽函数进行连接。例如，以下代码将一个对象的信号连接到另一个对象的槽函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;QObject::connect(senderObj, SIGNAL(mySignal()), receiverObj, SLOT(mySlot()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上述代码中，senderObj 是发出信号的对象，mySignal 是该对象的信号，receiverObj 是接收信号的对象，mySlot 是该对象的槽函数。当 senderObj 发出 mySignal 信号时，receiverObj 将自动执行 mySlot 槽函数的逻辑。&lt;/p&gt;
&lt;h3 id=&#34;4-信号与槽函数参数的匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-信号与槽函数参数的匹配&#34;&gt;#&lt;/a&gt; 4. 信号与槽函数参数的匹配&lt;/h3&gt;
&lt;p&gt;在进行信号与槽函数的连接时，需要确保它们的参数类型和个数是匹配的。如果不匹配，编译器会发出警告，但并不会导致程序崩溃或出错。因此，在进行连接时，务必要确保信号与槽函数的参数类型和个数匹配，以避免意外错误的发生。&lt;/p&gt;
&lt;h3 id=&#34;5-连接类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-连接类型&#34;&gt;#&lt;/a&gt; 5. 连接类型&lt;/h3&gt;
&lt;p&gt;QObject::connect 函数还支持不同的连接类型，可以通过第五个参数  &lt;code&gt;type&lt;/code&gt;  来指定。常用的连接类型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Qt::AutoConnection&lt;/code&gt; （默认）：自动选择连接类型，如果发送者和接收者在同一线程，则使用  &lt;code&gt;Qt::DirectConnection&lt;/code&gt; ，否则使用  &lt;code&gt;Qt::QueuedConnection&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Qt::DirectConnection&lt;/code&gt; ：直接连接，信号发出时会立即调用槽函数，无论发送者和接收者是否在同一线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Qt::QueuedConnection&lt;/code&gt; ：队列连接，信号发出时将事件放入接收者所在线程的事件队列中，在接收者线程的事件循环处理完当前事件后再调用槽函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Qt::BlockingQueuedConnection&lt;/code&gt; ：阻塞队列连接，与  &lt;code&gt;Qt::QueuedConnection&lt;/code&gt;  类似，但是信号发出者会等待槽函数执行完毕之后才继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-多线程连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-多线程连接&#34;&gt;#&lt;/a&gt; 6. 多线程连接&lt;/h3&gt;
&lt;p&gt;QObject::connect 函数还可以用于多线程连接。使用不同的连接类型可以实现跨线程的信号与槽函数通信。当发送者和接收者位于不同的线程时，一般使用  &lt;code&gt;Qt::QueuedConnection&lt;/code&gt;  连接类型。具体的使用方法和注意事项，请参考 Qt 文档中关于多线程编程的部分。&lt;/p&gt;
&lt;p&gt;以上就是 QObject::connect 函数的基本用法介绍。通过合理地使用信号与槽机制，可以实现模块之间的松耦合和高度可维护的代码结构。在实际开发中，建议详细阅读 Qt 文档，并根据具体的需求选择合适的连接类型和参数。&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-01-28QT%E4%B8%AD%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD%E7%9A%84%E8%BF%9E%E6%8E%A5.assets/image-20240128210411902.png&#34; alt=&#34;image-20240128210411902&#34;&gt;&lt;/p&gt;
&lt;p&gt;main.cpp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;QCoreApplication&amp;gt;
#include &#34;Demo1.h&#34;
#include &#34;ReceClass.h&#34;
#include &amp;lt;QDebug&amp;gt;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    //init
    ReceClass receClass;
    Demo1 demo1;
    Demo1 demo2;

    //bind
    qDebug() &amp;lt;&amp;lt; QObject::connect(&amp;amp;demo1, &amp;amp;Demo1::sendMsg, &amp;amp;receClass, &amp;amp;ReceClass::receMsg, static_cast&amp;lt;Qt::ConnectionType&amp;gt;(Qt::QueuedConnection | Qt::UniqueConnection));
    qDebug() &amp;lt;&amp;lt; QObject::connect(&amp;amp;demo2, &amp;amp;Demo1::sendMsg, &amp;amp;receClass, &amp;amp;ReceClass::receMsg, static_cast&amp;lt;Qt::ConnectionType&amp;gt;(Qt::QueuedConnection | Qt::UniqueConnection));

    //run
    demo1.setMsg(&#34;我爱你!&#34;);
    demo2.setMsg(&#34;滚!&#34;);

    demo1.start();
    demo2.start();

    return a.exec();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Demo1.cpp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;Demo1.h&#34;
#include &amp;lt;QDebug&amp;gt;


void Demo1::run()
{
    for(int i = 0; i &amp;lt; 2; i++){

        emit sendMsg(this-&amp;gt;m_msg);
        qDebug() &amp;lt;&amp;lt; &#34;emit &#34; &amp;lt;&amp;lt; this-&amp;gt;m_msg &amp;lt;&amp;lt; &#34; over&#34;;
    }
    qDebug() &amp;lt;&amp;lt; &#34;msg:&#34; &amp;lt;&amp;lt; this-&amp;gt;m_msg &amp;lt;&amp;lt; &#34; over&#34;;
}

void Demo1::setMsg(const QString &amp;amp;msg)
{
    this-&amp;gt;m_msg = msg;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Demo1.h&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#ifndef DEMO1_H
#define DEMO1_H

#include &amp;lt;QThread&amp;gt;

class Demo1 : public QThread
{
    Q_OBJECT
    void run() override;

public:
    void setMsg(const QString &amp;amp;msg);

signals:
    void sendMsg(QString msg);

private:
    QString m_msg;
};

#endif // DEMO1_H
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReceClass.cpp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;ReceClass.h&#34;
#include &amp;lt;QDebug&amp;gt;
#include &amp;lt;QThread&amp;gt;

ReceClass::ReceClass(QObject *parent) : QObject(parent)
{

}

void ReceClass::receMsg(QString msg)
{
    qDebug() &amp;lt;&amp;lt; &#34;Get msg: &#34; +  msg;
    QThread::sleep(1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReceClass.h&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#ifndef RECECLASS_H
#define RECECLASS_H

#include &amp;lt;QObject&amp;gt;

class ReceClass : public QObject
{
    Q_OBJECT
public:
    explicit ReceClass(QObject *parent = nullptr);

public slots:
    void receMsg(QString msg);
};

#endif // RECECLASS_H
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/dec6794a.html</guid>
            <title>QT给输入框添加自动补全提示词</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/dec6794a.html</link>
            <category term="技术教程🎃" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/technique/QT/" />
            <category term="QT" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/QT/" />
            <pubDate>Mon, 22 Jan 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;QT 读取 bin 文件&lt;/p&gt;
&lt;h2 id=&#34;flechazo的小知乎欢迎大家造访啦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flechazo的小知乎欢迎大家造访啦&#34;&gt;#&lt;/a&gt; flechazo 的小知乎，欢迎大家造访啦😘&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;flechazo&#34; style=&#34;--block-color:#21d4fd;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34; data-background-image=&#34;https://foruda.gitee.com/avatar/1680342439464493317/9010997_flechazo5201314_1680342439.png!avatar200&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9qaXVfc2hlbmc=&#34;&gt;flechazo&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://www.zhihu.com/people/jiu_sheng&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;在 QT 中，可以使用 setCompleter () 函数设置自动完成功能，该函数可以将一个 QCompleter 对象与一个输入框（如 QLineEdit 或 QPlainTextEdit）关联起来，从而实现自动完成的功能。&lt;/p&gt;
&lt;p&gt;QCompleter 对象是用来提供自动完成功能的，它可以通过 QStringList 或模型类作为数据源。下面分别介绍这两种方式的使用方法：&lt;/p&gt;
&lt;h2 id=&#34;使用-qstringlist-作为数据源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-qstringlist-作为数据源&#34;&gt;#&lt;/a&gt; 使用 QStringList 作为数据源&lt;/h2&gt;
&lt;p&gt;效果展示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-01-23QT%E7%BB%99%E8%BE%93%E5%85%A5%E6%A1%86%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA%E8%AF%8D.assets/image-20240122180359905.png&#34; alt=&#34;image-20240122180359905&#34;&gt;&lt;/p&gt;
&lt;p&gt;QStringList 是 QT 中常用的字符串列表类型，它可以作为 QCompleter 的数据源，提供自动完成功能。以下是一个示例代码，展示了如何使用 QStringList 设置自动完成功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QLineEdit&amp;gt;
#include &amp;lt;QCompleter&amp;gt;

//为了能使用ui控件，记得将这个函数声明在Widget类里哦！
void Widget::vflechazoAutoCompleter(void)
{
    // 创建一个字符串列表作为自动完成的数据源
    QStringList wordList;
    wordList &amp;lt;&amp;lt; &#34;apple🍎&#34; &amp;lt;&amp;lt; &#34;banana🍌&#34; &amp;lt;&amp;lt; &#34;cherry🧀&#34; &amp;lt;&amp;lt; &#34;grape🍇&#34; &amp;lt;&amp;lt; &#34;orange🍊&#34; &amp;lt;&amp;lt; &#34;flechazo🌸&#34; &amp;lt;&amp;lt; &#34;欢迎大家造访flechazo的小窝🍬&#34;;
    wordList &amp;lt;&amp;lt; &#34; flechazo🍭&#34;;
    wordList &amp;lt;&amp;lt; &#34; 喜欢大家😘&#34;;
    wordList &amp;lt;&amp;lt; &#34; 欢迎大家来捧场哦🎊&#34;;
    wordList &amp;lt;&amp;lt; &#34; 我的小窝🎃flechazo.mba&#34;;
    wordList &amp;lt;&amp;lt; &#34; flechazo一枚可可爱爱的程序员🌸&#34;;

    // 创建了一个 QCompleter 对象 completer1，并将其与 wordList 数据源关联起来。在构造 QCompleter 对象时，将 wordList 作为参数传入。同时，使用 setCaseSensitivity() 函数设置 QCompleter 的大小写不敏感性，即 Qt::CaseInsensitive，这样在自动匹配时不区分大小写。
    QCompleter *completer1 = new QCompleter(wordList, this);
    completer1-&amp;gt;setCaseSensitivity(Qt::CaseInsensitive);

    // 使用 setCompleter() 函数将 completer1 设置为 ui-&amp;gt;lineEdit 的自动完成器，从而实现在该输入框中输入部分字符时的自动匹配功能。
    ui-&amp;gt;lineEdit-&amp;gt;setCompleter(completer1);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的示例中，我们创建了一个字符串列表 wordList 作为自动完成的数据源。然后，我们创建了一个 QCompleter 对象并将其与数据源关联起来。最后，我们创建了一个 QLineEdit 对象，并使用 setCompleter () 函数将自动完成器设置为 lineEdit 的自动完成器。&lt;/p&gt;
&lt;p&gt;当用户在 lineEdit 输入框中输入字符时，QCompleter 会根据输入的内容自动匹配并显示可能的完成选项供用户选择。&lt;/p&gt;
&lt;h2 id=&#34;使用模型类作为数据源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用模型类作为数据源&#34;&gt;#&lt;/a&gt; 使用模型类作为数据源&lt;/h2&gt;
&lt;p&gt;效果展示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-01-23QT%E7%BB%99%E8%BE%93%E5%85%A5%E6%A1%86%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA%E8%AF%8D.assets/image-20240122180513930.png&#34; alt=&#34;image-20240122180513930&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了 QStringList，还可以使用 QT 内置的模型类作为 QCompleter 的数据源。例如，可以使用 QDirModel 访问文件系统中的文件和目录列表，作为自动完成的数据源。以下是一个示例代码，展示了如何使用 QDirModel 设置自动完成功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QLineEdit&amp;gt;
#include &amp;lt;QCompleter&amp;gt;
#include &amp;lt;QDirModel&amp;gt;

void Widget::vflechazoAutoCompleterDir(void)
{
    // 创建一个 QCompleter 对象，并将其与 QDirModel 模型关联起来
    QCompleter *completerDir = new QCompleter(this);
    completerDir-&amp;gt;setModel(new QDirModel(completerDir));

    // 创建一个 QLineEdit 对象，并设置自动完成器
    ui-&amp;gt;lineEdit_2-&amp;gt;setCompleter(completerDir);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的示例中，我们创建了一个 QCompleter 对象，并将其与 QDirModel 模型关联起来。然后，我们创建了一个 QLineEdit 对象，并使用 setCompleter () 函数将自动完成器设置为 lineEdit 的自动完成器。&lt;/p&gt;
&lt;p&gt;当用户在 lineEdit 输入框中输入部分文件或目录名时，QCompleter 会根据输入的内容自动匹配并显示可能的选项供用户选择。需要注意的是，QDirModel 可以访问整个文件系统，因此在使用时要小心，确保只提供需要的目录和文件列表，避免意外泄露敏感信息。&lt;/p&gt;
&lt;p&gt;除了数据源的设置，还可以通过 setCaseSensitivity () 函数设置 QCompleter 的大小写敏感性。默认情况下，QCompleter 是大小写敏感的，但可以通过设置 Qt::CaseInsensitive 选项来忽略大小写。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;Codecompleter-&amp;gt;setCaseSensitivity(Qt::CaseInsensitive);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，使用 setCompleter () 函数将 QCompleter 设置为输入框的自动完成器，就可以实现自动完成功能了。&lt;/p&gt;
&lt;p&gt;谢谢耐心看完的大家啦！&lt;/p&gt;
&lt;p&gt;给个小心心吧❤&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a1c393ed.html</guid>
            <title>【自我提升】我的MBTI人格测试</title>
            <link>https://flechazoclf.github.io/FlechazoCLF.github.io/archives/a1c393ed.html</link>
            <category term="小世界✨" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/microcosm/" />
            <category term="自我提升" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/categories/microcosm/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/" />
            <category term="自我提升" scheme="https://flechazoclf.github.io/FlechazoCLF.github.io/tags/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/" />
            <pubDate>Tue, 09 Jan 2024 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&#34;缘起&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缘起&#34;&gt;#&lt;/a&gt; 缘起：&lt;/h2&gt;
&lt;p&gt;我来啦〰！想要&lt;strong&gt;自我提升&lt;/strong&gt;的&lt;strong&gt;宝子&lt;/strong&gt;们一定要看一看哇💖！&lt;/p&gt;
&lt;p&gt;先认清自己再做出改变！冲锋🌏&lt;/p&gt;
&lt;p&gt;我也浑浑噩噩地度过啦&lt;strong&gt; 23&lt;/strong&gt; 年啦！说起来还有点小伤感呢，打住！积极一点啦，&lt;strong&gt;人生只有一次&lt;/strong&gt;。何不&lt;strong&gt;洒脱自信&lt;/strong&gt;一点呢😄？笑一笑➰&lt;/p&gt;
&lt;p&gt;那 24 年祝愿自己：&lt;strong&gt;积极&lt;/strong&gt;，&lt;strong&gt;自律&lt;/strong&gt;，&lt;strong&gt;勇敢&lt;/strong&gt;，&lt;strong&gt;自信&lt;/strong&gt;💮！&lt;/p&gt;
&lt;p&gt;等等，还有脱单。哈哈哈！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我是个&lt;strong&gt;建筑师&lt;/strong&gt;呢，哈哈哈。每个人都是世界上&lt;strong&gt;独一无二&lt;/strong&gt;的存在！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-01-09%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E4%B9%8BMBTI%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95.assets/image-20240109143952301.png&#34; alt=&#34;image-20240109143952301&#34;&gt;&lt;/p&gt;
&lt;p&gt;看看全世界独一无二的 &lt;strong&gt;flechazo&lt;/strong&gt; ：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuMTZwZXJzb25hbGl0aWVzLmNvbS9jaC9pbnRqLSVFNCVCQSVCQSVFNiVBMCVCQw==&#34;&gt;我的人格&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../img.assets/24-01-09%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87%E4%B9%8BMBTI%E4%BA%BA%E6%A0%BC%E6%B5%8B%E8%AF%95.assets/image-20240109150401655.png&#34; alt=&#34;image-20240109150401655&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;照妖镜&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#照妖镜&#34;&gt;#&lt;/a&gt; 照妖镜：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;建筑师，从内心深处与独立牢牢绑定，想要摆脱别人的期望，追求自己的想法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答：时而独立，时而孤僻。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建筑师既可以是最大胆的梦想家，也可以是最悲观的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答：之前比较悲观啦！但是想明白啦：人生只有一次。何不大胆一点？精彩一点？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建筑师不只是为了炫耀而学习新事物 -- 他们从内心喜欢扩大自己的知识范围。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答：真的想静下心来做好一件事情【比如想认真写好一个文章，想学会一个才艺】&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有时，建筑师可能会怀疑与他人打交道是否值得为此受挫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答：我真的会被这个问题困扰。24 年目标：生活精彩丰富、一个人也要有仪式感、鉴定、果断！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建筑师充满了矛盾。他们富有想象力但果断，雄心勃勃但秘而不宣，好奇但专注。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答：24 年要果断哦！别犹豫啦 /~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建筑师质疑一切。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答：哈哈理工男特性！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mbti&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mbti&#34;&gt;#&lt;/a&gt; MBTI：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MBTI16&lt;/strong&gt; 型人格测试是一种基于心理学理论的人格评估工具。&lt;/p&gt;
&lt;p&gt;MBTI 代表迈尔斯 - 布里格斯类型指标，它最初由凯瑟琳・布里格斯和伊莎贝尔・迈尔斯开发，旨在帮助人们更好地了解自己的个性特点和偏好。&lt;/p&gt;
&lt;p&gt;MBTI16 型人格测试基于卡尔・荣格的心理学理论，即个体有不同的心理取向和行为模式。测试通过测量个体在四个维度上的偏好。包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外向（E）与内向（I）&lt;/li&gt;
&lt;li&gt;感觉（S）与直觉（N）&lt;/li&gt;
&lt;li&gt;思考（T）与情感（F）&lt;/li&gt;
&lt;li&gt;判断（J）与知觉（P）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来确定个体的人格类型。&lt;/p&gt;
&lt;p&gt;每个维度都代表了两种相对的偏好，例如外向与内向代表了个体获取能量的方式，感觉与直觉代表了个体获取信息的方式，思考与情感代表了个体做决策的方式，判断与知觉代表了个体对待生活的方式。通过将这些偏好组合起来，MBTI16 型人格测试可以给出 16 种不同的人格类型，如 ISTJ、ENFP 等。&lt;/p&gt;
&lt;p&gt;MBTI16 型人格测试的&lt;strong&gt;意义在于&lt;/strong&gt;帮助人们更好地了解自己的个性特点和偏好，从而提高自我认知和发展。它可以帮助人们认识到自己的优势和弱点，理解自己在与他人互动、做决策和工作方式上的倾向。通过了解自己的人格类型，人们可以更好地选择适合自己的职业，改善人际关系，提高团队合作效果，并在个人成长和发展方面有所启发。&lt;/p&gt;
&lt;p&gt;需要明确的是，MBTI16 型人格测试并不是对人格的绝对定义，而只是一种评估工具。人格是多维的，受到多个因素的影响，包括遗传、环境和个人经历等。因此，测试结果只是参考，不能将其视为人格的全部或定论。&lt;/p&gt;
&lt;h2 id=&#34;路漫漫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路漫漫&#34;&gt;#&lt;/a&gt; 路漫漫：&lt;/h2&gt;
&lt;p&gt;人生路漫漫：认识自己！改变自己！提升自己！&lt;/p&gt;
&lt;p&gt;时刻提醒自己：&lt;strong&gt;拿出小本本！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大家都是&lt;strong&gt;第一次&lt;/strong&gt;来人间，我凭什么让着你！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自信&lt;/strong&gt;一点，你没有那么多观众。&lt;/p&gt;
&lt;p&gt;不要因为别人的看法而改变自己，因为真正重要的是你自己对自己的看法。&lt;/p&gt;
&lt;p&gt;有时候我们需要&lt;strong&gt;跳出舒适区&lt;/strong&gt;，才能发现更广阔的世界。&lt;/p&gt;
&lt;p&gt;成功是由行动而不是愿望实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;成长的路上或许有些孤单：但那又如何呢？努力绽放出自己的&lt;strong&gt;翅膀&lt;/strong&gt;，然后飞向那个你爱的人吧！&lt;/p&gt;
&lt;p&gt;希望对大家有所帮助🎈&lt;/p&gt;
&lt;p&gt;【我自己也是才刚刚意识到这些，还有很多不足。欢迎大家来探讨。🛰：18339963582】&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后的最后；要自信的活出自己哦！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
    </channel>
</rss>
